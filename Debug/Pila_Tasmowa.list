
Pila_Tasmowa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebfc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000698  0800eda0  0800eda0  0000fda0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f438  0800f438  000111ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800f438  0800f438  00010438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f440  0800f440  000111ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f440  0800f440  00010440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f444  0800f444  00010444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800f448  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004970  200001ec  0800f634  000111ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b5c  0800f634  00011b5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cddf  00000000  00000000  0001121c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004598  00000000  00000000  0002dffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c8  00000000  00000000  00032598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001347  00000000  00000000  00033e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c402  00000000  00000000  000351a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f97a  00000000  00000000  000515a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8f81  00000000  00000000  00070f23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  00119ea4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c0c  00000000  00000000  00119f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00121b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ed84 	.word	0x0800ed84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0800ed84 	.word	0x0800ed84

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <LCD_Set_Cursor>:
#include "UART_LCD.h"
#include <stdlib.h>
#include <stdio.h>

void LCD_Set_Cursor(uint8_t x, uint8_t y)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	460a      	mov	r2, r1
 8000ffe:	71fb      	strb	r3, [r7, #7]
 8001000:	4613      	mov	r3, r2
 8001002:	71bb      	strb	r3, [r7, #6]
	x--;
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	3b01      	subs	r3, #1
 8001008:	71fb      	strb	r3, [r7, #7]
	y--;
 800100a:	79bb      	ldrb	r3, [r7, #6]
 800100c:	3b01      	subs	r3, #1
 800100e:	71bb      	strb	r3, [r7, #6]
	if (x > 15 || x <0)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	2b0f      	cmp	r3, #15
 8001014:	d901      	bls.n	800101a <LCD_Set_Cursor+0x26>
		{
			x = 15;
 8001016:	230f      	movs	r3, #15
 8001018:	71fb      	strb	r3, [r7, #7]
		}
	if (y > 1 || y < 0)
 800101a:	79bb      	ldrb	r3, [r7, #6]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d901      	bls.n	8001024 <LCD_Set_Cursor+0x30>
		{
			y = 1;
 8001020:	2301      	movs	r3, #1
 8001022:	71bb      	strb	r3, [r7, #6]
		}

	uint8_t CursorPosition = 128 + y*64 + x; //Change the position (128) of the cursor to (y) row (1,2), position x (1-16)
 8001024:	79bb      	ldrb	r3, [r7, #6]
 8001026:	3302      	adds	r3, #2
 8001028:	b2db      	uxtb	r3, r3
 800102a:	019b      	lsls	r3, r3, #6
 800102c:	b2da      	uxtb	r2, r3
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	4413      	add	r3, r2
 8001032:	b2db      	uxtb	r3, r3
 8001034:	73fb      	strb	r3, [r7, #15]
	uint8_t Command = COMMAND;
 8001036:	23fe      	movs	r3, #254	@ 0xfe
 8001038:	73bb      	strb	r3, [r7, #14]
	HAL_UART_Transmit(&huart2, &Command, 1, UART_TIMEOUT);
 800103a:	f107 010e 	add.w	r1, r7, #14
 800103e:	2364      	movs	r3, #100	@ 0x64
 8001040:	2201      	movs	r2, #1
 8001042:	4807      	ldr	r0, [pc, #28]	@ (8001060 <LCD_Set_Cursor+0x6c>)
 8001044:	f005 fabc 	bl	80065c0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, &CursorPosition, 1, UART_TIMEOUT);
 8001048:	f107 010f 	add.w	r1, r7, #15
 800104c:	2364      	movs	r3, #100	@ 0x64
 800104e:	2201      	movs	r2, #1
 8001050:	4803      	ldr	r0, [pc, #12]	@ (8001060 <LCD_Set_Cursor+0x6c>)
 8001052:	f005 fab5 	bl	80065c0 <HAL_UART_Transmit>
}
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000ad4 	.word	0x20000ad4

08001064 <LCD_Write>:

void LCD_Write(const uint8_t *pData, uint8_t Size)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart2, pData, Size, UART_TIMEOUT);
 8001070:	78fb      	ldrb	r3, [r7, #3]
 8001072:	b29a      	uxth	r2, r3
 8001074:	2364      	movs	r3, #100	@ 0x64
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	4803      	ldr	r0, [pc, #12]	@ (8001088 <LCD_Write+0x24>)
 800107a:	f005 faa1 	bl	80065c0 <HAL_UART_Transmit>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000ad4 	.word	0x20000ad4

0800108c <LCD_Setting>:

void LCD_Setting(uint8_t Data)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
	uint8_t SettingMode = SETTING_MODE;
 8001096:	237c      	movs	r3, #124	@ 0x7c
 8001098:	72fb      	strb	r3, [r7, #11]
	uint8_t *pData = &Data;
 800109a:	1dfb      	adds	r3, r7, #7
 800109c:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, &SettingMode, 1, UART_TIMEOUT);
 800109e:	f107 010b 	add.w	r1, r7, #11
 80010a2:	2364      	movs	r3, #100	@ 0x64
 80010a4:	2201      	movs	r2, #1
 80010a6:	4806      	ldr	r0, [pc, #24]	@ (80010c0 <LCD_Setting+0x34>)
 80010a8:	f005 fa8a 	bl	80065c0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, pData, 1, UART_TIMEOUT);
 80010ac:	2364      	movs	r3, #100	@ 0x64
 80010ae:	2201      	movs	r2, #1
 80010b0:	68f9      	ldr	r1, [r7, #12]
 80010b2:	4803      	ldr	r0, [pc, #12]	@ (80010c0 <LCD_Setting+0x34>)
 80010b4:	f005 fa84 	bl	80065c0 <HAL_UART_Transmit>
}
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000ad4 	.word	0x20000ad4

080010c4 <LCD_SetRGB>:

void LCD_SetRGB(uint8_t r, uint8_t g, uint8_t b)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
 80010ce:	460b      	mov	r3, r1
 80010d0:	71bb      	strb	r3, [r7, #6]
 80010d2:	4613      	mov	r3, r2
 80010d4:	717b      	strb	r3, [r7, #5]
	uint8_t SettingMode = SETTING_MODE;
 80010d6:	237c      	movs	r3, #124	@ 0x7c
 80010d8:	72fb      	strb	r3, [r7, #11]
	if (r > 29) r = 29;
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	2b1d      	cmp	r3, #29
 80010de:	d901      	bls.n	80010e4 <LCD_SetRGB+0x20>
 80010e0:	231d      	movs	r3, #29
 80010e2:	71fb      	strb	r3, [r7, #7]
	if (g > 29) g = 29;
 80010e4:	79bb      	ldrb	r3, [r7, #6]
 80010e6:	2b1d      	cmp	r3, #29
 80010e8:	d901      	bls.n	80010ee <LCD_SetRGB+0x2a>
 80010ea:	231d      	movs	r3, #29
 80010ec:	71bb      	strb	r3, [r7, #6]
	if (b > 29) b = 29;
 80010ee:	797b      	ldrb	r3, [r7, #5]
 80010f0:	2b1d      	cmp	r3, #29
 80010f2:	d901      	bls.n	80010f8 <LCD_SetRGB+0x34>
 80010f4:	231d      	movs	r3, #29
 80010f6:	717b      	strb	r3, [r7, #5]
	r = RGB_RED + r;
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	3b80      	subs	r3, #128	@ 0x80
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	71fb      	strb	r3, [r7, #7]
	g = RGB_GREEN + g;
 8001100:	79bb      	ldrb	r3, [r7, #6]
 8001102:	3b62      	subs	r3, #98	@ 0x62
 8001104:	b2db      	uxtb	r3, r3
 8001106:	71bb      	strb	r3, [r7, #6]
	b = RGB_BLUE + b;
 8001108:	797b      	ldrb	r3, [r7, #5]
 800110a:	3b44      	subs	r3, #68	@ 0x44
 800110c:	b2db      	uxtb	r3, r3
 800110e:	717b      	strb	r3, [r7, #5]
	uint8_t *pR = &r;
 8001110:	1dfb      	adds	r3, r7, #7
 8001112:	617b      	str	r3, [r7, #20]
	uint8_t *pG = &g;
 8001114:	1dbb      	adds	r3, r7, #6
 8001116:	613b      	str	r3, [r7, #16]
	uint8_t *pB = &b;
 8001118:	1d7b      	adds	r3, r7, #5
 800111a:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, &SettingMode, 1, UART_TIMEOUT);
 800111c:	f107 010b 	add.w	r1, r7, #11
 8001120:	2364      	movs	r3, #100	@ 0x64
 8001122:	2201      	movs	r2, #1
 8001124:	4813      	ldr	r0, [pc, #76]	@ (8001174 <LCD_SetRGB+0xb0>)
 8001126:	f005 fa4b 	bl	80065c0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, pR, 1, UART_TIMEOUT);
 800112a:	2364      	movs	r3, #100	@ 0x64
 800112c:	2201      	movs	r2, #1
 800112e:	6979      	ldr	r1, [r7, #20]
 8001130:	4810      	ldr	r0, [pc, #64]	@ (8001174 <LCD_SetRGB+0xb0>)
 8001132:	f005 fa45 	bl	80065c0 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart2, &SettingMode, 1, UART_TIMEOUT);
 8001136:	f107 010b 	add.w	r1, r7, #11
 800113a:	2364      	movs	r3, #100	@ 0x64
 800113c:	2201      	movs	r2, #1
 800113e:	480d      	ldr	r0, [pc, #52]	@ (8001174 <LCD_SetRGB+0xb0>)
 8001140:	f005 fa3e 	bl	80065c0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, pG, 1, UART_TIMEOUT);
 8001144:	2364      	movs	r3, #100	@ 0x64
 8001146:	2201      	movs	r2, #1
 8001148:	6939      	ldr	r1, [r7, #16]
 800114a:	480a      	ldr	r0, [pc, #40]	@ (8001174 <LCD_SetRGB+0xb0>)
 800114c:	f005 fa38 	bl	80065c0 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart2, &SettingMode, 1, UART_TIMEOUT);
 8001150:	f107 010b 	add.w	r1, r7, #11
 8001154:	2364      	movs	r3, #100	@ 0x64
 8001156:	2201      	movs	r2, #1
 8001158:	4806      	ldr	r0, [pc, #24]	@ (8001174 <LCD_SetRGB+0xb0>)
 800115a:	f005 fa31 	bl	80065c0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, pB, 1, UART_TIMEOUT);
 800115e:	2364      	movs	r3, #100	@ 0x64
 8001160:	2201      	movs	r2, #1
 8001162:	68f9      	ldr	r1, [r7, #12]
 8001164:	4803      	ldr	r0, [pc, #12]	@ (8001174 <LCD_SetRGB+0xb0>)
 8001166:	f005 fa2b 	bl	80065c0 <HAL_UART_Transmit>
}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000ad4 	.word	0x20000ad4

08001178 <LCD_SetContrast>:

void LCD_SetContrast (uint8_t Contrast)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
	  LCD_Setting(CONTRAST);
 8001182:	2018      	movs	r0, #24
 8001184:	f7ff ff82 	bl	800108c <LCD_Setting>
	  LCD_Write(&Contrast, 1);
 8001188:	1dfb      	adds	r3, r7, #7
 800118a:	2101      	movs	r1, #1
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff69 	bl	8001064 <LCD_Write>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <LCD_Init>:

void LCD_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LCD_Reset_GPIO_Port, LCD_Reset_Pin, 0);
	//HAL_Delay(500);
	//HAL_GPIO_WritePin(LCD_Reset_GPIO_Port, LCD_Reset_Pin, 1);
	HAL_Delay(1000);
 80011a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011a4:	f002 f960 	bl	8003468 <HAL_Delay>
	LCD_Setting(BAUD8);			//Set BAUD rate to 115200 b/s
 80011a8:	2012      	movs	r0, #18
 80011aa:	f7ff ff6f 	bl	800108c <LCD_Setting>
	HAL_Delay(100);
 80011ae:	2064      	movs	r0, #100	@ 0x64
 80011b0:	f002 f95a 	bl	8003468 <HAL_Delay>
	HAL_UART_DeInit(&huart2);
 80011b4:	480c      	ldr	r0, [pc, #48]	@ (80011e8 <LCD_Init+0x4c>)
 80011b6:	f005 f9d1 	bl	800655c <HAL_UART_DeInit>
	huart2.Init.BaudRate = 115200;
 80011ba:	4b0b      	ldr	r3, [pc, #44]	@ (80011e8 <LCD_Init+0x4c>)
 80011bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011c0:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(&huart2);
 80011c2:	4809      	ldr	r0, [pc, #36]	@ (80011e8 <LCD_Init+0x4c>)
 80011c4:	f005 f97a 	bl	80064bc <HAL_UART_Init>
	LCD_Setting(CLR_DISP);		//Clear Display
 80011c8:	202d      	movs	r0, #45	@ 0x2d
 80011ca:	f7ff ff5f 	bl	800108c <LCD_Setting>
	LCD_Setting(SYS_MSG_OFF);		//Disable system messages
 80011ce:	202f      	movs	r0, #47	@ 0x2f
 80011d0:	f7ff ff5c 	bl	800108c <LCD_Setting>
	LCD_SetContrast(0);			//Set contrast to max
 80011d4:	2000      	movs	r0, #0
 80011d6:	f7ff ffcf 	bl	8001178 <LCD_SetContrast>
	LCD_SetRGB(29, 29, 29);		//Set backlight RGB to white (values 0-29)
 80011da:	221d      	movs	r2, #29
 80011dc:	211d      	movs	r1, #29
 80011de:	201d      	movs	r0, #29
 80011e0:	f7ff ff70 	bl	80010c4 <LCD_SetRGB>
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000ad4 	.word	0x20000ad4

080011ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011f2:	463b      	mov	r3, r7
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011fe:	4b21      	ldr	r3, [pc, #132]	@ (8001284 <MX_ADC1_Init+0x98>)
 8001200:	4a21      	ldr	r2, [pc, #132]	@ (8001288 <MX_ADC1_Init+0x9c>)
 8001202:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001204:	4b1f      	ldr	r3, [pc, #124]	@ (8001284 <MX_ADC1_Init+0x98>)
 8001206:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800120a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800120c:	4b1d      	ldr	r3, [pc, #116]	@ (8001284 <MX_ADC1_Init+0x98>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001212:	4b1c      	ldr	r3, [pc, #112]	@ (8001284 <MX_ADC1_Init+0x98>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001218:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <MX_ADC1_Init+0x98>)
 800121a:	2200      	movs	r2, #0
 800121c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800121e:	4b19      	ldr	r3, [pc, #100]	@ (8001284 <MX_ADC1_Init+0x98>)
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001226:	4b17      	ldr	r3, [pc, #92]	@ (8001284 <MX_ADC1_Init+0x98>)
 8001228:	2200      	movs	r2, #0
 800122a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800122c:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <MX_ADC1_Init+0x98>)
 800122e:	4a17      	ldr	r2, [pc, #92]	@ (800128c <MX_ADC1_Init+0xa0>)
 8001230:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001232:	4b14      	ldr	r3, [pc, #80]	@ (8001284 <MX_ADC1_Init+0x98>)
 8001234:	2200      	movs	r2, #0
 8001236:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001238:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <MX_ADC1_Init+0x98>)
 800123a:	2201      	movs	r2, #1
 800123c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800123e:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <MX_ADC1_Init+0x98>)
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001246:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <MX_ADC1_Init+0x98>)
 8001248:	2201      	movs	r2, #1
 800124a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800124c:	480d      	ldr	r0, [pc, #52]	@ (8001284 <MX_ADC1_Init+0x98>)
 800124e:	f002 f92f 	bl	80034b0 <HAL_ADC_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001258:	f001 fe26 	bl	8002ea8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800125c:	2300      	movs	r3, #0
 800125e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001260:	2301      	movs	r3, #1
 8001262:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001264:	2300      	movs	r3, #0
 8001266:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001268:	463b      	mov	r3, r7
 800126a:	4619      	mov	r1, r3
 800126c:	4805      	ldr	r0, [pc, #20]	@ (8001284 <MX_ADC1_Init+0x98>)
 800126e:	f002 f963 	bl	8003538 <HAL_ADC_ConfigChannel>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001278:	f001 fe16 	bl	8002ea8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000208 	.word	0x20000208
 8001288:	40012000 	.word	0x40012000
 800128c:	0f000001 	.word	0x0f000001

08001290 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	@ 0x28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a17      	ldr	r2, [pc, #92]	@ (800130c <HAL_ADC_MspInit+0x7c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d127      	bne.n	8001302 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	4b16      	ldr	r3, [pc, #88]	@ (8001310 <HAL_ADC_MspInit+0x80>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ba:	4a15      	ldr	r2, [pc, #84]	@ (8001310 <HAL_ADC_MspInit+0x80>)
 80012bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012c2:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <HAL_ADC_MspInit+0x80>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <HAL_ADC_MspInit+0x80>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001310 <HAL_ADC_MspInit+0x80>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012de:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <HAL_ADC_MspInit+0x80>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012ea:	2301      	movs	r3, #1
 80012ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ee:	2303      	movs	r3, #3
 80012f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4619      	mov	r1, r3
 80012fc:	4805      	ldr	r0, [pc, #20]	@ (8001314 <HAL_ADC_MspInit+0x84>)
 80012fe:	f002 ff63 	bl	80041c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001302:	bf00      	nop
 8001304:	3728      	adds	r7, #40	@ 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40012000 	.word	0x40012000
 8001310:	40023800 	.word	0x40023800
 8001314:	40020000 	.word	0x40020000

08001318 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	4b0c      	ldr	r3, [pc, #48]	@ (8001354 <MX_DMA_Init+0x3c>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	4a0b      	ldr	r2, [pc, #44]	@ (8001354 <MX_DMA_Init+0x3c>)
 8001328:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800132c:	6313      	str	r3, [r2, #48]	@ 0x30
 800132e:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <MX_DMA_Init+0x3c>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2105      	movs	r1, #5
 800133e:	2011      	movs	r0, #17
 8001340:	f002 fbd0 	bl	8003ae4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001344:	2011      	movs	r0, #17
 8001346:	f002 fbe9 	bl	8003b1c <HAL_NVIC_EnableIRQ>

}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800

08001358 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4a07      	ldr	r2, [pc, #28]	@ (8001384 <vApplicationGetIdleTaskMemory+0x2c>)
 8001368:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	4a06      	ldr	r2, [pc, #24]	@ (8001388 <vApplicationGetIdleTaskMemory+0x30>)
 800136e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2280      	movs	r2, #128	@ 0x80
 8001374:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	200002f4 	.word	0x200002f4
 8001388:	20000394 	.word	0x20000394

0800138c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4a07      	ldr	r2, [pc, #28]	@ (80013b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800139c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	4a06      	ldr	r2, [pc, #24]	@ (80013bc <vApplicationGetTimerTaskMemory+0x30>)
 80013a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013aa:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	20000594 	.word	0x20000594
 80013bc:	20000634 	.word	0x20000634

080013c0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80013c0:	b5b0      	push	{r4, r5, r7, lr}
 80013c2:	b0c0      	sub	sp, #256	@ 0x100
 80013c4:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of InOutSem */
  osSemaphoreDef(InOutSem);
 80013c6:	2300      	movs	r3, #0
 80013c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  InOutSemHandle = osSemaphoreCreate(osSemaphore(InOutSem), 1);
 80013d2:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 80013d6:	2101      	movs	r1, #1
 80013d8:	4618      	mov	r0, r3
 80013da:	f005 fdf3 	bl	8006fc4 <osSemaphoreCreate>
 80013de:	4603      	mov	r3, r0
 80013e0:	4a8d      	ldr	r2, [pc, #564]	@ (8001618 <MX_FREERTOS_Init+0x258>)
 80013e2:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of OTimer1 */
  osTimerDef(OTimer1, OTimer1Callback);
 80013e4:	4b8d      	ldr	r3, [pc, #564]	@ (800161c <MX_FREERTOS_Init+0x25c>)
 80013e6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  OTimer1Handle = osTimerCreate(osTimer(OTimer1), osTimerOnce, NULL);
 80013f0:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80013f4:	2200      	movs	r2, #0
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f005 fd2f 	bl	8006e5c <osTimerCreate>
 80013fe:	4603      	mov	r3, r0
 8001400:	4a87      	ldr	r2, [pc, #540]	@ (8001620 <MX_FREERTOS_Init+0x260>)
 8001402:	6013      	str	r3, [r2, #0]

  /* definition and creation of OTimer2 */
  osTimerDef(OTimer2, OTimer2Callback);
 8001404:	4b87      	ldr	r3, [pc, #540]	@ (8001624 <MX_FREERTOS_Init+0x264>)
 8001406:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800140a:	2300      	movs	r3, #0
 800140c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  OTimer2Handle = osTimerCreate(osTimer(OTimer2), osTimerOnce, NULL);
 8001410:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8001414:	2200      	movs	r2, #0
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f005 fd1f 	bl	8006e5c <osTimerCreate>
 800141e:	4603      	mov	r3, r0
 8001420:	4a81      	ldr	r2, [pc, #516]	@ (8001628 <MX_FREERTOS_Init+0x268>)
 8001422:	6013      	str	r3, [r2, #0]

  /* definition and creation of OTimer3 */
  osTimerDef(OTimer3, OTimer3Callback);
 8001424:	4b81      	ldr	r3, [pc, #516]	@ (800162c <MX_FREERTOS_Init+0x26c>)
 8001426:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800142a:	2300      	movs	r3, #0
 800142c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  OTimer3Handle = osTimerCreate(osTimer(OTimer3), osTimerOnce, NULL);
 8001430:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001434:	2200      	movs	r2, #0
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f005 fd0f 	bl	8006e5c <osTimerCreate>
 800143e:	4603      	mov	r3, r0
 8001440:	4a7b      	ldr	r2, [pc, #492]	@ (8001630 <MX_FREERTOS_Init+0x270>)
 8001442:	6013      	str	r3, [r2, #0]

  /* definition and creation of OTimer4 */
  osTimerDef(OTimer4, OTimer4Callback);
 8001444:	4b7b      	ldr	r3, [pc, #492]	@ (8001634 <MX_FREERTOS_Init+0x274>)
 8001446:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800144a:	2300      	movs	r3, #0
 800144c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  OTimer4Handle = osTimerCreate(osTimer(OTimer4), osTimerOnce, NULL);
 8001450:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001454:	2200      	movs	r2, #0
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f005 fcff 	bl	8006e5c <osTimerCreate>
 800145e:	4603      	mov	r3, r0
 8001460:	4a75      	ldr	r2, [pc, #468]	@ (8001638 <MX_FREERTOS_Init+0x278>)
 8001462:	6013      	str	r3, [r2, #0]

  /* definition and creation of OTimer5 */
  osTimerDef(OTimer5, OTimer5Callback);
 8001464:	4b75      	ldr	r3, [pc, #468]	@ (800163c <MX_FREERTOS_Init+0x27c>)
 8001466:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800146a:	2300      	movs	r3, #0
 800146c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  OTimer5Handle = osTimerCreate(osTimer(OTimer5), osTimerOnce, NULL);
 8001470:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001474:	2200      	movs	r2, #0
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f005 fcef 	bl	8006e5c <osTimerCreate>
 800147e:	4603      	mov	r3, r0
 8001480:	4a6f      	ldr	r2, [pc, #444]	@ (8001640 <MX_FREERTOS_Init+0x280>)
 8001482:	6013      	str	r3, [r2, #0]

  /* definition and creation of OTimer6 */
  osTimerDef(OTimer6, OTimer6Callback);
 8001484:	4b6f      	ldr	r3, [pc, #444]	@ (8001644 <MX_FREERTOS_Init+0x284>)
 8001486:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  OTimer6Handle = osTimerCreate(osTimer(OTimer6), osTimerOnce, NULL);
 8001490:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8001494:	2200      	movs	r2, #0
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f005 fcdf 	bl	8006e5c <osTimerCreate>
 800149e:	4603      	mov	r3, r0
 80014a0:	4a69      	ldr	r2, [pc, #420]	@ (8001648 <MX_FREERTOS_Init+0x288>)
 80014a2:	6013      	str	r3, [r2, #0]

  /* definition and creation of OTimer7 */
  osTimerDef(OTimer7, OTimer7Callback);
 80014a4:	4b69      	ldr	r3, [pc, #420]	@ (800164c <MX_FREERTOS_Init+0x28c>)
 80014a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80014aa:	2300      	movs	r3, #0
 80014ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  OTimer7Handle = osTimerCreate(osTimer(OTimer7), osTimerOnce, NULL);
 80014b0:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80014b4:	2200      	movs	r2, #0
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f005 fccf 	bl	8006e5c <osTimerCreate>
 80014be:	4603      	mov	r3, r0
 80014c0:	4a63      	ldr	r2, [pc, #396]	@ (8001650 <MX_FREERTOS_Init+0x290>)
 80014c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of OTimer8 */
  osTimerDef(OTimer8, OTimer8Callback);
 80014c4:	4b63      	ldr	r3, [pc, #396]	@ (8001654 <MX_FREERTOS_Init+0x294>)
 80014c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80014ca:	2300      	movs	r3, #0
 80014cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  OTimer8Handle = osTimerCreate(osTimer(OTimer8), osTimerOnce, NULL);
 80014d0:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80014d4:	2200      	movs	r2, #0
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f005 fcbf 	bl	8006e5c <osTimerCreate>
 80014de:	4603      	mov	r3, r0
 80014e0:	4a5d      	ldr	r2, [pc, #372]	@ (8001658 <MX_FREERTOS_Init+0x298>)
 80014e2:	6013      	str	r3, [r2, #0]

  /* definition and creation of OTimer9 */
  osTimerDef(OTimer9, OTimer9Callback);
 80014e4:	4b5d      	ldr	r3, [pc, #372]	@ (800165c <MX_FREERTOS_Init+0x29c>)
 80014e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80014ea:	2300      	movs	r3, #0
 80014ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  OTimer9Handle = osTimerCreate(osTimer(OTimer9), osTimerOnce, NULL);
 80014f0:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80014f4:	2200      	movs	r2, #0
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f005 fcaf 	bl	8006e5c <osTimerCreate>
 80014fe:	4603      	mov	r3, r0
 8001500:	4a57      	ldr	r2, [pc, #348]	@ (8001660 <MX_FREERTOS_Init+0x2a0>)
 8001502:	6013      	str	r3, [r2, #0]

  /* definition and creation of OTimer10 */
  osTimerDef(OTimer10, OTimer10Callback);
 8001504:	4b57      	ldr	r3, [pc, #348]	@ (8001664 <MX_FREERTOS_Init+0x2a4>)
 8001506:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800150a:	2300      	movs	r3, #0
 800150c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  OTimer10Handle = osTimerCreate(osTimer(OTimer10), osTimerOnce, NULL);
 8001510:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001514:	2200      	movs	r2, #0
 8001516:	2100      	movs	r1, #0
 8001518:	4618      	mov	r0, r3
 800151a:	f005 fc9f 	bl	8006e5c <osTimerCreate>
 800151e:	4603      	mov	r3, r0
 8001520:	4a51      	ldr	r2, [pc, #324]	@ (8001668 <MX_FREERTOS_Init+0x2a8>)
 8001522:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Input */
  osThreadDef(Input, StartInput, osPriorityRealtime, 0, 128);
 8001524:	4b51      	ldr	r3, [pc, #324]	@ (800166c <MX_FREERTOS_Init+0x2ac>)
 8001526:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800152a:	461d      	mov	r5, r3
 800152c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800152e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001530:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001534:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InputHandle = osThreadCreate(osThread(Input), NULL);
 8001538:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f005 fc2b 	bl	8006d9a <osThreadCreate>
 8001544:	4603      	mov	r3, r0
 8001546:	4a4a      	ldr	r2, [pc, #296]	@ (8001670 <MX_FREERTOS_Init+0x2b0>)
 8001548:	6013      	str	r3, [r2, #0]

  /* definition and creation of Compute */
  osThreadDef(Compute, StartCompute, osPriorityNormal, 0, 128);
 800154a:	4b4a      	ldr	r3, [pc, #296]	@ (8001674 <MX_FREERTOS_Init+0x2b4>)
 800154c:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8001550:	461d      	mov	r5, r3
 8001552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001556:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800155a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ComputeHandle = osThreadCreate(osThread(Compute), NULL);
 800155e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001562:	2100      	movs	r1, #0
 8001564:	4618      	mov	r0, r3
 8001566:	f005 fc18 	bl	8006d9a <osThreadCreate>
 800156a:	4603      	mov	r3, r0
 800156c:	4a42      	ldr	r2, [pc, #264]	@ (8001678 <MX_FREERTOS_Init+0x2b8>)
 800156e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Output */
  osThreadDef(Output, StartOutput, osPriorityNormal, 0, 128);
 8001570:	4b42      	ldr	r3, [pc, #264]	@ (800167c <MX_FREERTOS_Init+0x2bc>)
 8001572:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001576:	461d      	mov	r5, r3
 8001578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800157a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800157c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001580:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  OutputHandle = osThreadCreate(osThread(Output), NULL);
 8001584:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f005 fc05 	bl	8006d9a <osThreadCreate>
 8001590:	4603      	mov	r3, r0
 8001592:	4a3b      	ldr	r2, [pc, #236]	@ (8001680 <MX_FREERTOS_Init+0x2c0>)
 8001594:	6013      	str	r3, [r2, #0]

  /* definition and creation of Auto */
  osThreadDef(Auto, StartAuto, osPriorityNormal, 0, 128);
 8001596:	4b3b      	ldr	r3, [pc, #236]	@ (8001684 <MX_FREERTOS_Init+0x2c4>)
 8001598:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800159c:	461d      	mov	r5, r3
 800159e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AutoHandle = osThreadCreate(osThread(Auto), NULL);
 80015aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015ae:	2100      	movs	r1, #0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f005 fbf2 	bl	8006d9a <osThreadCreate>
 80015b6:	4603      	mov	r3, r0
 80015b8:	4a33      	ldr	r2, [pc, #204]	@ (8001688 <MX_FREERTOS_Init+0x2c8>)
 80015ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of Manual */
  osThreadDef(Manual, StartManual, osPriorityNormal, 0, 128);
 80015bc:	4b33      	ldr	r3, [pc, #204]	@ (800168c <MX_FREERTOS_Init+0x2cc>)
 80015be:	f107 041c 	add.w	r4, r7, #28
 80015c2:	461d      	mov	r5, r3
 80015c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ManualHandle = osThreadCreate(osThread(Manual), NULL);
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f005 fbdf 	bl	8006d9a <osThreadCreate>
 80015dc:	4603      	mov	r3, r0
 80015de:	4a2c      	ldr	r2, [pc, #176]	@ (8001690 <MX_FREERTOS_Init+0x2d0>)
 80015e0:	6013      	str	r3, [r2, #0]

  /* definition and creation of LCDUpdate */
  osThreadDef(LCDUpdate, StartLCDUpdate, osPriorityNormal, 0, 128);
 80015e2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80015e6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80015ea:	4a2a      	ldr	r2, [pc, #168]	@ (8001694 <MX_FREERTOS_Init+0x2d4>)
 80015ec:	461c      	mov	r4, r3
 80015ee:	4615      	mov	r5, r2
 80015f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCDUpdateHandle = osThreadCreate(osThread(LCDUpdate), NULL);
 80015fc:	463b      	mov	r3, r7
 80015fe:	2100      	movs	r1, #0
 8001600:	4618      	mov	r0, r3
 8001602:	f005 fbca 	bl	8006d9a <osThreadCreate>
 8001606:	4603      	mov	r3, r0
 8001608:	4a23      	ldr	r2, [pc, #140]	@ (8001698 <MX_FREERTOS_Init+0x2d8>)
 800160a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800160c:	bf00      	nop
 800160e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001612:	46bd      	mov	sp, r7
 8001614:	bdb0      	pop	{r4, r5, r7, pc}
 8001616:	bf00      	nop
 8001618:	200002f0 	.word	0x200002f0
 800161c:	0800258d 	.word	0x0800258d
 8001620:	200002c8 	.word	0x200002c8
 8001624:	080025b5 	.word	0x080025b5
 8001628:	200002cc 	.word	0x200002cc
 800162c:	08002609 	.word	0x08002609
 8001630:	200002d0 	.word	0x200002d0
 8001634:	080026c5 	.word	0x080026c5
 8001638:	200002d4 	.word	0x200002d4
 800163c:	08002701 	.word	0x08002701
 8001640:	200002d8 	.word	0x200002d8
 8001644:	0800273d 	.word	0x0800273d
 8001648:	200002dc 	.word	0x200002dc
 800164c:	08002779 	.word	0x08002779
 8001650:	200002e0 	.word	0x200002e0
 8001654:	080027a1 	.word	0x080027a1
 8001658:	200002e4 	.word	0x200002e4
 800165c:	080027c9 	.word	0x080027c9
 8001660:	200002e8 	.word	0x200002e8
 8001664:	08002805 	.word	0x08002805
 8001668:	200002ec 	.word	0x200002ec
 800166c:	0800eda8 	.word	0x0800eda8
 8001670:	200002b0 	.word	0x200002b0
 8001674:	0800edcc 	.word	0x0800edcc
 8001678:	200002b4 	.word	0x200002b4
 800167c:	0800edf0 	.word	0x0800edf0
 8001680:	200002b8 	.word	0x200002b8
 8001684:	0800ee14 	.word	0x0800ee14
 8001688:	200002bc 	.word	0x200002bc
 800168c:	0800ee38 	.word	0x0800ee38
 8001690:	200002c0 	.word	0x200002c0
 8001694:	0800ee60 	.word	0x0800ee60
 8001698:	200002c4 	.word	0x200002c4

0800169c <StartInput>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartInput */
void StartInput(void const * argument)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af02      	add	r7, sp, #8
 80016a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInput */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(InOutSemHandle, 1000);
 80016a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001750 <StartInput+0xb4>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80016ac:	4618      	mov	r0, r3
 80016ae:	f005 fcbb 	bl	8007028 <osSemaphoreWait>
	  HAL_I2C_Master_Receive(&hi2c1, INPUT_MODULE_ADDR_1, Input_1, 2, 10);
 80016b2:	230a      	movs	r3, #10
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	2302      	movs	r3, #2
 80016b8:	4a26      	ldr	r2, [pc, #152]	@ (8001754 <StartInput+0xb8>)
 80016ba:	2141      	movs	r1, #65	@ 0x41
 80016bc:	4826      	ldr	r0, [pc, #152]	@ (8001758 <StartInput+0xbc>)
 80016be:	f003 fa47 	bl	8004b50 <HAL_I2C_Master_Receive>
	  HAL_I2C_Master_Receive(&hi2c1, INPUT_MODULE_ADDR_2, Input_2, 2, 10);
 80016c2:	230a      	movs	r3, #10
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	2302      	movs	r3, #2
 80016c8:	4a24      	ldr	r2, [pc, #144]	@ (800175c <StartInput+0xc0>)
 80016ca:	2143      	movs	r1, #67	@ 0x43
 80016cc:	4822      	ldr	r0, [pc, #136]	@ (8001758 <StartInput+0xbc>)
 80016ce:	f003 fa3f 	bl	8004b50 <HAL_I2C_Master_Receive>
	  HAL_I2C_Master_Receive(&hi2c1, INPUT_MODULE_ADDR_3, Input_3, 2, 10);
 80016d2:	230a      	movs	r3, #10
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2302      	movs	r3, #2
 80016d8:	4a21      	ldr	r2, [pc, #132]	@ (8001760 <StartInput+0xc4>)
 80016da:	2145      	movs	r1, #69	@ 0x45
 80016dc:	481e      	ldr	r0, [pc, #120]	@ (8001758 <StartInput+0xbc>)
 80016de:	f003 fa37 	bl	8004b50 <HAL_I2C_Master_Receive>
	  HAL_I2C_Master_Receive(&hi2c1, INPUT_MODULE_ADDR_4, Input_4, 2, 10);
 80016e2:	230a      	movs	r3, #10
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	2302      	movs	r3, #2
 80016e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001764 <StartInput+0xc8>)
 80016ea:	2147      	movs	r1, #71	@ 0x47
 80016ec:	481a      	ldr	r0, [pc, #104]	@ (8001758 <StartInput+0xbc>)
 80016ee:	f003 fa2f 	bl	8004b50 <HAL_I2C_Master_Receive>
	  Input_1_Sum = (Input_1[1]<<8) | Input_1[0];				//Combine 2 8bit registers to 1 16 bit for the ease of operation
 80016f2:	4b18      	ldr	r3, [pc, #96]	@ (8001754 <StartInput+0xb8>)
 80016f4:	785b      	ldrb	r3, [r3, #1]
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	b21a      	sxth	r2, r3
 80016fa:	4b16      	ldr	r3, [pc, #88]	@ (8001754 <StartInput+0xb8>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	b21b      	sxth	r3, r3
 8001700:	4313      	orrs	r3, r2
 8001702:	b21b      	sxth	r3, r3
 8001704:	b29a      	uxth	r2, r3
 8001706:	4b18      	ldr	r3, [pc, #96]	@ (8001768 <StartInput+0xcc>)
 8001708:	801a      	strh	r2, [r3, #0]
	  Input_2_Sum = (Input_2[1]<<8) | Input_2[0];				//Combine 2 8bit registers to 1 16 bit for the ease of operation
 800170a:	4b14      	ldr	r3, [pc, #80]	@ (800175c <StartInput+0xc0>)
 800170c:	785b      	ldrb	r3, [r3, #1]
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	b21a      	sxth	r2, r3
 8001712:	4b12      	ldr	r3, [pc, #72]	@ (800175c <StartInput+0xc0>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	b21b      	sxth	r3, r3
 8001718:	4313      	orrs	r3, r2
 800171a:	b21b      	sxth	r3, r3
 800171c:	b29a      	uxth	r2, r3
 800171e:	4b13      	ldr	r3, [pc, #76]	@ (800176c <StartInput+0xd0>)
 8001720:	801a      	strh	r2, [r3, #0]
	  Input_3_Sum = (Input_3[1]<<8) | Input_3[0];				//Combine 2 8bit registers to 1 16 bit for the ease of operation
 8001722:	4b0f      	ldr	r3, [pc, #60]	@ (8001760 <StartInput+0xc4>)
 8001724:	785b      	ldrb	r3, [r3, #1]
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	b21a      	sxth	r2, r3
 800172a:	4b0d      	ldr	r3, [pc, #52]	@ (8001760 <StartInput+0xc4>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	b21b      	sxth	r3, r3
 8001730:	4313      	orrs	r3, r2
 8001732:	b21b      	sxth	r3, r3
 8001734:	b29a      	uxth	r2, r3
 8001736:	4b0e      	ldr	r3, [pc, #56]	@ (8001770 <StartInput+0xd4>)
 8001738:	801a      	strh	r2, [r3, #0]
	  osSemaphoreRelease(InOutSemHandle);
 800173a:	4b05      	ldr	r3, [pc, #20]	@ (8001750 <StartInput+0xb4>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f005 fcc0 	bl	80070c4 <osSemaphoreRelease>

	osDelay(OS_DELAY);
 8001744:	2014      	movs	r0, #20
 8001746:	f005 fb74 	bl	8006e32 <osDelay>
	  osSemaphoreWait(InOutSemHandle, 1000);
 800174a:	bf00      	nop
 800174c:	e7aa      	b.n	80016a4 <StartInput+0x8>
 800174e:	bf00      	nop
 8001750:	200002f0 	.word	0x200002f0
 8001754:	20000250 	.word	0x20000250
 8001758:	20000a34 	.word	0x20000a34
 800175c:	20000254 	.word	0x20000254
 8001760:	20000258 	.word	0x20000258
 8001764:	2000025c 	.word	0x2000025c
 8001768:	2000025e 	.word	0x2000025e
 800176c:	20000260 	.word	0x20000260
 8001770:	20000262 	.word	0x20000262

08001774 <StartCompute>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCompute */
void StartCompute(void const * argument)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCompute */
  /* Infinite loop */
  for(;;)
  {
	  if(IN_0_16_AUTO_MANUAL)
 800177c:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <StartCompute+0x50>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	b21b      	sxth	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	db0d      	blt.n	80017a2 <StartCompute+0x2e>
	  	    {
	  	    	osThreadSuspend(ManualHandle);
 8001786:	4b10      	ldr	r3, [pc, #64]	@ (80017c8 <StartCompute+0x54>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f005 fcd0 	bl	8007130 <osThreadSuspend>
	  	    	osThreadResume(AutoHandle);
 8001790:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <StartCompute+0x58>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f005 fcd7 	bl	8007148 <osThreadResume>
	  	    	BacklightColor = GREEN;
 800179a:	4b0d      	ldr	r3, [pc, #52]	@ (80017d0 <StartCompute+0x5c>)
 800179c:	2202      	movs	r2, #2
 800179e:	701a      	strb	r2, [r3, #0]
 80017a0:	e00c      	b.n	80017bc <StartCompute+0x48>
	  	    }
	  	    else
	  	    {
	  	    	osThreadSuspend(AutoHandle);
 80017a2:	4b0a      	ldr	r3, [pc, #40]	@ (80017cc <StartCompute+0x58>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f005 fcc2 	bl	8007130 <osThreadSuspend>
	  	    	osThreadResume(ManualHandle);
 80017ac:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <StartCompute+0x54>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f005 fcc9 	bl	8007148 <osThreadResume>
	  	    	BacklightColor = WHITE;
 80017b6:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <StartCompute+0x5c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
	  	    }
	  osDelay(OS_DELAY);
 80017bc:	2014      	movs	r0, #20
 80017be:	f005 fb38 	bl	8006e32 <osDelay>
	  if(IN_0_16_AUTO_MANUAL)
 80017c2:	e7db      	b.n	800177c <StartCompute+0x8>
 80017c4:	2000025e 	.word	0x2000025e
 80017c8:	200002c0 	.word	0x200002c0
 80017cc:	200002bc 	.word	0x200002bc
 80017d0:	2000000b 	.word	0x2000000b

080017d4 <StartOutput>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOutput */
void StartOutput(void const * argument)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af02      	add	r7, sp, #8
 80017da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOutput */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(InOutSemHandle, 1000);
 80017dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001850 <StartOutput+0x7c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80017e4:	4618      	mov	r0, r3
 80017e6:	f005 fc1f 	bl	8007028 <osSemaphoreWait>
	  Output_2[1] = Output_2_Sum>>8;
 80017ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001854 <StartOutput+0x80>)
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	0a1b      	lsrs	r3, r3, #8
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	4b18      	ldr	r3, [pc, #96]	@ (8001858 <StartOutput+0x84>)
 80017f6:	705a      	strb	r2, [r3, #1]
	  Output_2[2] = Output_2_Sum & 0x00ff;
 80017f8:	4b16      	ldr	r3, [pc, #88]	@ (8001854 <StartOutput+0x80>)
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4b16      	ldr	r3, [pc, #88]	@ (8001858 <StartOutput+0x84>)
 8001800:	709a      	strb	r2, [r3, #2]
	  Output_1[1] = Output_1_Sum>>8;
 8001802:	4b16      	ldr	r3, [pc, #88]	@ (800185c <StartOutput+0x88>)
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	0a1b      	lsrs	r3, r3, #8
 8001808:	b29b      	uxth	r3, r3
 800180a:	b2da      	uxtb	r2, r3
 800180c:	4b14      	ldr	r3, [pc, #80]	@ (8001860 <StartOutput+0x8c>)
 800180e:	705a      	strb	r2, [r3, #1]
	  Output_1[2] = Output_1_Sum & 0x00ff;
 8001810:	4b12      	ldr	r3, [pc, #72]	@ (800185c <StartOutput+0x88>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4b12      	ldr	r3, [pc, #72]	@ (8001860 <StartOutput+0x8c>)
 8001818:	709a      	strb	r2, [r3, #2]
	  HAL_I2C_Master_Transmit(&hi2c1, OUTPUT_MODULE_ADDR_1, Output_1, 3, 10);
 800181a:	230a      	movs	r3, #10
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	2303      	movs	r3, #3
 8001820:	4a0f      	ldr	r2, [pc, #60]	@ (8001860 <StartOutput+0x8c>)
 8001822:	2148      	movs	r1, #72	@ 0x48
 8001824:	480f      	ldr	r0, [pc, #60]	@ (8001864 <StartOutput+0x90>)
 8001826:	f003 f895 	bl	8004954 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Transmit(&hi2c1, OUTPUT_MODULE_ADDR_2, Output_2, 3, 10);
 800182a:	230a      	movs	r3, #10
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	2303      	movs	r3, #3
 8001830:	4a09      	ldr	r2, [pc, #36]	@ (8001858 <StartOutput+0x84>)
 8001832:	2146      	movs	r1, #70	@ 0x46
 8001834:	480b      	ldr	r0, [pc, #44]	@ (8001864 <StartOutput+0x90>)
 8001836:	f003 f88d 	bl	8004954 <HAL_I2C_Master_Transmit>
	  //UpdateLCDDisplay();
	  osSemaphoreRelease(InOutSemHandle);
 800183a:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <StartOutput+0x7c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f005 fc40 	bl	80070c4 <osSemaphoreRelease>
	  osDelay(OS_DELAY);
 8001844:	2014      	movs	r0, #20
 8001846:	f005 faf4 	bl	8006e32 <osDelay>
	  osSemaphoreWait(InOutSemHandle, 1000);
 800184a:	bf00      	nop
 800184c:	e7c6      	b.n	80017dc <StartOutput+0x8>
 800184e:	bf00      	nop
 8001850:	200002f0 	.word	0x200002f0
 8001854:	200002ac 	.word	0x200002ac
 8001858:	20000008 	.word	0x20000008
 800185c:	200002aa 	.word	0x200002aa
 8001860:	20000004 	.word	0x20000004
 8001864:	20000a34 	.word	0x20000a34

08001868 <StartAuto>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAuto */
void StartAuto(void const * argument)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

	  	/*Start automatic cycle, hydraulic pump has to be on, stop button NOT pressed, saw position up (up limit switch)*/
	if (IN_0_15_HPUMP && IN_0_14_START && IN_0_13_STOP && IN_1_13_SAFETY && !(/*IN_1_14_SAWUP_LS*/IN_1_9_SAWDOWN_LS))
 8001870:	4b64      	ldr	r3, [pc, #400]	@ (8001a04 <StartAuto+0x19c>)
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d124      	bne.n	80018c6 <StartAuto+0x5e>
 800187c:	4b61      	ldr	r3, [pc, #388]	@ (8001a04 <StartAuto+0x19c>)
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d11e      	bne.n	80018c6 <StartAuto+0x5e>
 8001888:	4b5e      	ldr	r3, [pc, #376]	@ (8001a04 <StartAuto+0x19c>)
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d118      	bne.n	80018c6 <StartAuto+0x5e>
 8001894:	4b5c      	ldr	r3, [pc, #368]	@ (8001a08 <StartAuto+0x1a0>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d112      	bne.n	80018c6 <StartAuto+0x5e>
 80018a0:	4b59      	ldr	r3, [pc, #356]	@ (8001a08 <StartAuto+0x1a0>)
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00c      	beq.n	80018c6 <StartAuto+0x5e>
	{
		/*Set the first step. Steps in increments of 10 for easy code modification and updates*/
		EmergencyStop = 0;
 80018ac:	4b57      	ldr	r3, [pc, #348]	@ (8001a0c <StartAuto+0x1a4>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
		BrokenBlade = 0;
 80018b2:	4b57      	ldr	r3, [pc, #348]	@ (8001a10 <StartAuto+0x1a8>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
		IsRunning = 1;
 80018b8:	4b56      	ldr	r3, [pc, #344]	@ (8001a14 <StartAuto+0x1ac>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	701a      	strb	r2, [r3, #0]
		Step = 10;
 80018be:	4b56      	ldr	r3, [pc, #344]	@ (8001a18 <StartAuto+0x1b0>)
 80018c0:	220a      	movs	r2, #10
 80018c2:	701a      	strb	r2, [r3, #0]
 80018c4:	e010      	b.n	80018e8 <StartAuto+0x80>
	}

	else if (!IsRunning)
 80018c6:	4b53      	ldr	r3, [pc, #332]	@ (8001a14 <StartAuto+0x1ac>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10c      	bne.n	80018e8 <StartAuto+0x80>
	{
		if (IN_1_9_SAWDOWN_LS)
 80018ce:	4b4e      	ldr	r3, [pc, #312]	@ (8001a08 <StartAuto+0x1a0>)
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d103      	bne.n	80018e2 <StartAuto+0x7a>
		{
			EmergencyStop = 1;
 80018da:	4b4c      	ldr	r3, [pc, #304]	@ (8001a0c <StartAuto+0x1a4>)
 80018dc:	2201      	movs	r2, #1
 80018de:	701a      	strb	r2, [r3, #0]
 80018e0:	e002      	b.n	80018e8 <StartAuto+0x80>
		}
		else
		{
			EmergencyStop = 0;
 80018e2:	4b4a      	ldr	r3, [pc, #296]	@ (8001a0c <StartAuto+0x1a4>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]
		}
	}


		/*Anytime if STOP is pressed, either hood open (safety latch), Hydraulic Pump turned off or either fuses blown (10 and 11), stop AUTO*/
	if(!(IN_0_13_STOP) || !(IN_1_13_SAFETY) || !(IN_0_15_HPUMP) || IN_1_16_FUSE10 || IN_1_15_FUSE11)
 80018e8:	4b46      	ldr	r3, [pc, #280]	@ (8001a04 <StartAuto+0x19c>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d116      	bne.n	8001922 <StartAuto+0xba>
 80018f4:	4b44      	ldr	r3, [pc, #272]	@ (8001a08 <StartAuto+0x1a0>)
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d110      	bne.n	8001922 <StartAuto+0xba>
 8001900:	4b40      	ldr	r3, [pc, #256]	@ (8001a04 <StartAuto+0x19c>)
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d10a      	bne.n	8001922 <StartAuto+0xba>
 800190c:	4b3e      	ldr	r3, [pc, #248]	@ (8001a08 <StartAuto+0x1a0>)
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	b21b      	sxth	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	da05      	bge.n	8001922 <StartAuto+0xba>
 8001916:	4b3c      	ldr	r3, [pc, #240]	@ (8001a08 <StartAuto+0x1a0>)
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d108      	bne.n	8001934 <StartAuto+0xcc>
	{
		/*Step 0 is the stop for all output and the AUTO cycle*/
		BacklightColor = RED;
 8001922:	4b3e      	ldr	r3, [pc, #248]	@ (8001a1c <StartAuto+0x1b4>)
 8001924:	2201      	movs	r2, #1
 8001926:	701a      	strb	r2, [r3, #0]
		EmergencyStop = 1;
 8001928:	4b38      	ldr	r3, [pc, #224]	@ (8001a0c <StartAuto+0x1a4>)
 800192a:	2201      	movs	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]
		Step = 0;
 800192e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a18 <StartAuto+0x1b0>)
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
	}
		/*Chip collector spiral ON/OFF. Can be toggled at any time in AUTO or MANUAL*/
	if(IN_0_2_CHIP)
 8001934:	4b33      	ldr	r3, [pc, #204]	@ (8001a04 <StartAuto+0x19c>)
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d107      	bne.n	8001950 <StartAuto+0xe8>
	{
		OUT_0_7_CHIP_ON;
 8001940:	4b37      	ldr	r3, [pc, #220]	@ (8001a20 <StartAuto+0x1b8>)
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001948:	b29a      	uxth	r2, r3
 800194a:	4b35      	ldr	r3, [pc, #212]	@ (8001a20 <StartAuto+0x1b8>)
 800194c:	801a      	strh	r2, [r3, #0]
 800194e:	e006      	b.n	800195e <StartAuto+0xf6>
	}
	else
	{
		OUT_0_7_CHIP_OFF;
 8001950:	4b33      	ldr	r3, [pc, #204]	@ (8001a20 <StartAuto+0x1b8>)
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001958:	b29a      	uxth	r2, r3
 800195a:	4b31      	ldr	r3, [pc, #196]	@ (8001a20 <StartAuto+0x1b8>)
 800195c:	801a      	strh	r2, [r3, #0]
	}
		/*Broken blade detection. Passive wheel stall detection - stall means broken blade. This particular check is for the positive signal*/
	if (IN_1_8_ROTATION && CheckForBrokenSaw)
 800195e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a08 <StartAuto+0x1a0>)
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10a      	bne.n	8001980 <StartAuto+0x118>
 800196a:	4b2e      	ldr	r3, [pc, #184]	@ (8001a24 <StartAuto+0x1bc>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d006      	beq.n	8001980 <StartAuto+0x118>
	{
		osTimerStart(OTimer7Handle, 3000);
 8001972:	4b2d      	ldr	r3, [pc, #180]	@ (8001a28 <StartAuto+0x1c0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800197a:	4618      	mov	r0, r3
 800197c:	f005 faa2 	bl	8006ec4 <osTimerStart>
	}
		/*Broken blade detection. Passive wheel stall detection - stall means broken blade. This particular check is for the negative signal*/
	if(!(IN_1_8_ROTATION) && CheckForBrokenSaw)
 8001980:	4b21      	ldr	r3, [pc, #132]	@ (8001a08 <StartAuto+0x1a0>)
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001988:	2b00      	cmp	r3, #0
 800198a:	d00a      	beq.n	80019a2 <StartAuto+0x13a>
 800198c:	4b25      	ldr	r3, [pc, #148]	@ (8001a24 <StartAuto+0x1bc>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d006      	beq.n	80019a2 <StartAuto+0x13a>
	{
		osTimerStart(OTimer8Handle, 4000);
 8001994:	4b25      	ldr	r3, [pc, #148]	@ (8001a2c <StartAuto+0x1c4>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 800199c:	4618      	mov	r0, r3
 800199e:	f005 fa91 	bl	8006ec4 <osTimerStart>
	}
		/*Hydraulic Pump can be turned ON/OFF any time in the cycle. Turning off the HPump will stop the AUTO cycle and return the Step count to 0*/
	if(IN_0_15_HPUMP)
 80019a2:	4b18      	ldr	r3, [pc, #96]	@ (8001a04 <StartAuto+0x19c>)
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d107      	bne.n	80019be <StartAuto+0x156>
	{
		OUT_0_12_HPUMP_ON;
 80019ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001a20 <StartAuto+0x1b8>)
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	4b19      	ldr	r3, [pc, #100]	@ (8001a20 <StartAuto+0x1b8>)
 80019ba:	801a      	strh	r2, [r3, #0]
 80019bc:	e006      	b.n	80019cc <StartAuto+0x164>
	}
	else
	{
		OUT_0_12_HPUMP_OFF;
 80019be:	4b18      	ldr	r3, [pc, #96]	@ (8001a20 <StartAuto+0x1b8>)
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	4b15      	ldr	r3, [pc, #84]	@ (8001a20 <StartAuto+0x1b8>)
 80019ca:	801a      	strh	r2, [r3, #0]
	}

	if(IsRunning)
 80019cc:	4b11      	ldr	r3, [pc, #68]	@ (8001a14 <StartAuto+0x1ac>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d03d      	beq.n	8001a50 <StartAuto+0x1e8>
	{
		BacklightColor = GREEN;
 80019d4:	4b11      	ldr	r3, [pc, #68]	@ (8001a1c <StartAuto+0x1b4>)
 80019d6:	2202      	movs	r2, #2
 80019d8:	701a      	strb	r2, [r3, #0]
		sprintf(LCDBufferLine1, "AUTO            ");
 80019da:	4915      	ldr	r1, [pc, #84]	@ (8001a30 <StartAuto+0x1c8>)
 80019dc:	4815      	ldr	r0, [pc, #84]	@ (8001a34 <StartAuto+0x1cc>)
 80019de:	f009 fd41 	bl	800b464 <siprintf>
		if(!(IN_1_4_SELECT_COUNTER))
 80019e2:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <StartAuto+0x1a0>)
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d02c      	beq.n	8001a48 <StartAuto+0x1e0>
			sprintf(LCDBufferLine2, "CIECIE %d/%d      ", CompletePartCount, NominalPartCount);
 80019ee:	4b12      	ldr	r3, [pc, #72]	@ (8001a38 <StartAuto+0x1d0>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <StartAuto+0x1d4>)
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	4911      	ldr	r1, [pc, #68]	@ (8001a40 <StartAuto+0x1d8>)
 80019fa:	4812      	ldr	r0, [pc, #72]	@ (8001a44 <StartAuto+0x1dc>)
 80019fc:	f009 fd32 	bl	800b464 <siprintf>
 8001a00:	e026      	b.n	8001a50 <StartAuto+0x1e8>
 8001a02:	bf00      	nop
 8001a04:	2000025e 	.word	0x2000025e
 8001a08:	20000260 	.word	0x20000260
 8001a0c:	2000026b 	.word	0x2000026b
 8001a10:	2000026c 	.word	0x2000026c
 8001a14:	2000026a 	.word	0x2000026a
 8001a18:	20000269 	.word	0x20000269
 8001a1c:	2000000b 	.word	0x2000000b
 8001a20:	200002ac 	.word	0x200002ac
 8001a24:	20000268 	.word	0x20000268
 8001a28:	200002e0 	.word	0x200002e0
 8001a2c:	200002e4 	.word	0x200002e4
 8001a30:	0800ee7c 	.word	0x0800ee7c
 8001a34:	20000274 	.word	0x20000274
 8001a38:	20000270 	.word	0x20000270
 8001a3c:	20000002 	.word	0x20000002
 8001a40:	0800ee90 	.word	0x0800ee90
 8001a44:	20000290 	.word	0x20000290
		else
			sprintf(LCDBufferLine2, "LICZ MECHANICZNY");
 8001a48:	49c1      	ldr	r1, [pc, #772]	@ (8001d50 <StartAuto+0x4e8>)
 8001a4a:	48c2      	ldr	r0, [pc, #776]	@ (8001d54 <StartAuto+0x4ec>)
 8001a4c:	f009 fd0a 	bl	800b464 <siprintf>
	}

	switch (Step)
 8001a50:	4bc1      	ldr	r3, [pc, #772]	@ (8001d58 <StartAuto+0x4f0>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b6e      	cmp	r3, #110	@ 0x6e
 8001a56:	f200 83c8 	bhi.w	80021ea <StartAuto+0x982>
 8001a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a60 <StartAuto+0x1f8>)
 8001a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a60:	08001c1d 	.word	0x08001c1d
 8001a64:	080021eb 	.word	0x080021eb
 8001a68:	080021eb 	.word	0x080021eb
 8001a6c:	080021eb 	.word	0x080021eb
 8001a70:	080021eb 	.word	0x080021eb
 8001a74:	080021eb 	.word	0x080021eb
 8001a78:	080021eb 	.word	0x080021eb
 8001a7c:	080021eb 	.word	0x080021eb
 8001a80:	080021eb 	.word	0x080021eb
 8001a84:	080021eb 	.word	0x080021eb
 8001a88:	08001d07 	.word	0x08001d07
 8001a8c:	08001dad 	.word	0x08001dad
 8001a90:	08001df7 	.word	0x08001df7
 8001a94:	08001e29 	.word	0x08001e29
 8001a98:	08001e55 	.word	0x08001e55
 8001a9c:	08001e81 	.word	0x08001e81
 8001aa0:	080021eb 	.word	0x080021eb
 8001aa4:	080021eb 	.word	0x080021eb
 8001aa8:	080021eb 	.word	0x080021eb
 8001aac:	080021eb 	.word	0x080021eb
 8001ab0:	08001eb3 	.word	0x08001eb3
 8001ab4:	08001ee1 	.word	0x08001ee1
 8001ab8:	080021eb 	.word	0x080021eb
 8001abc:	080021eb 	.word	0x080021eb
 8001ac0:	080021eb 	.word	0x080021eb
 8001ac4:	080021eb 	.word	0x080021eb
 8001ac8:	080021eb 	.word	0x080021eb
 8001acc:	080021eb 	.word	0x080021eb
 8001ad0:	080021eb 	.word	0x080021eb
 8001ad4:	080021eb 	.word	0x080021eb
 8001ad8:	08001f39 	.word	0x08001f39
 8001adc:	080021eb 	.word	0x080021eb
 8001ae0:	080021eb 	.word	0x080021eb
 8001ae4:	080021eb 	.word	0x080021eb
 8001ae8:	080021eb 	.word	0x080021eb
 8001aec:	080021eb 	.word	0x080021eb
 8001af0:	080021eb 	.word	0x080021eb
 8001af4:	080021eb 	.word	0x080021eb
 8001af8:	080021eb 	.word	0x080021eb
 8001afc:	080021eb 	.word	0x080021eb
 8001b00:	08001f6b 	.word	0x08001f6b
 8001b04:	080021eb 	.word	0x080021eb
 8001b08:	080021eb 	.word	0x080021eb
 8001b0c:	080021eb 	.word	0x080021eb
 8001b10:	080021eb 	.word	0x080021eb
 8001b14:	080021eb 	.word	0x080021eb
 8001b18:	080021eb 	.word	0x080021eb
 8001b1c:	080021eb 	.word	0x080021eb
 8001b20:	080021eb 	.word	0x080021eb
 8001b24:	080021eb 	.word	0x080021eb
 8001b28:	08001f99 	.word	0x08001f99
 8001b2c:	080021eb 	.word	0x080021eb
 8001b30:	080021eb 	.word	0x080021eb
 8001b34:	080021eb 	.word	0x080021eb
 8001b38:	080021eb 	.word	0x080021eb
 8001b3c:	080021eb 	.word	0x080021eb
 8001b40:	080021eb 	.word	0x080021eb
 8001b44:	080021eb 	.word	0x080021eb
 8001b48:	080021eb 	.word	0x080021eb
 8001b4c:	080021eb 	.word	0x080021eb
 8001b50:	08001fd1 	.word	0x08001fd1
 8001b54:	080021eb 	.word	0x080021eb
 8001b58:	080021eb 	.word	0x080021eb
 8001b5c:	080021eb 	.word	0x080021eb
 8001b60:	080021eb 	.word	0x080021eb
 8001b64:	080021eb 	.word	0x080021eb
 8001b68:	080021eb 	.word	0x080021eb
 8001b6c:	080021eb 	.word	0x080021eb
 8001b70:	080021eb 	.word	0x080021eb
 8001b74:	080021eb 	.word	0x080021eb
 8001b78:	080020cb 	.word	0x080020cb
 8001b7c:	080021eb 	.word	0x080021eb
 8001b80:	080021eb 	.word	0x080021eb
 8001b84:	080021eb 	.word	0x080021eb
 8001b88:	080021eb 	.word	0x080021eb
 8001b8c:	080021eb 	.word	0x080021eb
 8001b90:	080021eb 	.word	0x080021eb
 8001b94:	080021eb 	.word	0x080021eb
 8001b98:	080021eb 	.word	0x080021eb
 8001b9c:	080021eb 	.word	0x080021eb
 8001ba0:	08002111 	.word	0x08002111
 8001ba4:	080021eb 	.word	0x080021eb
 8001ba8:	080021eb 	.word	0x080021eb
 8001bac:	080021eb 	.word	0x080021eb
 8001bb0:	080021eb 	.word	0x080021eb
 8001bb4:	080021eb 	.word	0x080021eb
 8001bb8:	080021eb 	.word	0x080021eb
 8001bbc:	080021eb 	.word	0x080021eb
 8001bc0:	080021eb 	.word	0x080021eb
 8001bc4:	080021eb 	.word	0x080021eb
 8001bc8:	08002149 	.word	0x08002149
 8001bcc:	080021eb 	.word	0x080021eb
 8001bd0:	080021eb 	.word	0x080021eb
 8001bd4:	080021eb 	.word	0x080021eb
 8001bd8:	080021eb 	.word	0x080021eb
 8001bdc:	080021eb 	.word	0x080021eb
 8001be0:	080021eb 	.word	0x080021eb
 8001be4:	080021eb 	.word	0x080021eb
 8001be8:	080021eb 	.word	0x080021eb
 8001bec:	080021eb 	.word	0x080021eb
 8001bf0:	0800217b 	.word	0x0800217b
 8001bf4:	080021eb 	.word	0x080021eb
 8001bf8:	080021eb 	.word	0x080021eb
 8001bfc:	080021eb 	.word	0x080021eb
 8001c00:	080021eb 	.word	0x080021eb
 8001c04:	080021eb 	.word	0x080021eb
 8001c08:	080021eb 	.word	0x080021eb
 8001c0c:	080021eb 	.word	0x080021eb
 8001c10:	080021eb 	.word	0x080021eb
 8001c14:	080021eb 	.word	0x080021eb
 8001c18:	080021a7 	.word	0x080021a7
	{
		case 0: /*Stops all output and AUTO cycle*/
			AllOutputsOff();
 8001c1c:	f000 fe0a 	bl	8002834 <AllOutputsOff>
				/*Display information if open hatch limit switch or safety E-STOP*/
			if (EmergencyStop)
 8001c20:	4b4e      	ldr	r3, [pc, #312]	@ (8001d5c <StartAuto+0x4f4>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d052      	beq.n	8001cce <StartAuto+0x466>
			{
				if (!(IN_1_13_SAFETY)) 	//Hatch open/E-Stop active
 8001c28:	4b4d      	ldr	r3, [pc, #308]	@ (8001d60 <StartAuto+0x4f8>)
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <StartAuto+0x3de>
				{
					//BacklightColor = RED;
					sprintf(LCDBufferLine1, "E-STOP/KRANCOWKA");
 8001c34:	494b      	ldr	r1, [pc, #300]	@ (8001d64 <StartAuto+0x4fc>)
 8001c36:	484c      	ldr	r0, [pc, #304]	@ (8001d68 <StartAuto+0x500>)
 8001c38:	f009 fc14 	bl	800b464 <siprintf>
					sprintf(LCDBufferLine2, "KLAPA           ");
 8001c3c:	494b      	ldr	r1, [pc, #300]	@ (8001d6c <StartAuto+0x504>)
 8001c3e:	4845      	ldr	r0, [pc, #276]	@ (8001d54 <StartAuto+0x4ec>)
 8001c40:	f009 fc10 	bl	800b464 <siprintf>
				sprintf(LCDBufferLine2, "START!          ");
			}

				/*Display if broken blade detection worked*/

		break;
 8001c44:	e2be      	b.n	80021c4 <StartAuto+0x95c>
				else if (IN_1_16_FUSE10)		//Blown Resetable fuse 10F1
 8001c46:	4b46      	ldr	r3, [pc, #280]	@ (8001d60 <StartAuto+0x4f8>)
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	b21b      	sxth	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	db08      	blt.n	8001c62 <StartAuto+0x3fa>
					sprintf(LCDBufferLine1, "BEZPIECZNIK 10F1");
 8001c50:	4947      	ldr	r1, [pc, #284]	@ (8001d70 <StartAuto+0x508>)
 8001c52:	4845      	ldr	r0, [pc, #276]	@ (8001d68 <StartAuto+0x500>)
 8001c54:	f009 fc06 	bl	800b464 <siprintf>
					sprintf(LCDBufferLine2, "                ");
 8001c58:	4946      	ldr	r1, [pc, #280]	@ (8001d74 <StartAuto+0x50c>)
 8001c5a:	483e      	ldr	r0, [pc, #248]	@ (8001d54 <StartAuto+0x4ec>)
 8001c5c:	f009 fc02 	bl	800b464 <siprintf>
		break;
 8001c60:	e2b0      	b.n	80021c4 <StartAuto+0x95c>
				else if (IN_1_15_FUSE11)		//Blown Resetable fuse 11F1
 8001c62:	4b3f      	ldr	r3, [pc, #252]	@ (8001d60 <StartAuto+0x4f8>)
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d108      	bne.n	8001c80 <StartAuto+0x418>
					sprintf(LCDBufferLine1, "BEZPIECZNIK 11F1");
 8001c6e:	4942      	ldr	r1, [pc, #264]	@ (8001d78 <StartAuto+0x510>)
 8001c70:	483d      	ldr	r0, [pc, #244]	@ (8001d68 <StartAuto+0x500>)
 8001c72:	f009 fbf7 	bl	800b464 <siprintf>
					sprintf(LCDBufferLine2, "                ");
 8001c76:	493f      	ldr	r1, [pc, #252]	@ (8001d74 <StartAuto+0x50c>)
 8001c78:	4836      	ldr	r0, [pc, #216]	@ (8001d54 <StartAuto+0x4ec>)
 8001c7a:	f009 fbf3 	bl	800b464 <siprintf>
		break;
 8001c7e:	e2a1      	b.n	80021c4 <StartAuto+0x95c>
				else if (!(IN_0_15_HPUMP))		//Hydraulic pump turned off
 8001c80:	4b3e      	ldr	r3, [pc, #248]	@ (8001d7c <StartAuto+0x514>)
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d008      	beq.n	8001c9e <StartAuto+0x436>
					sprintf(LCDBufferLine1, "POMPA HYDR.     ");
 8001c8c:	493c      	ldr	r1, [pc, #240]	@ (8001d80 <StartAuto+0x518>)
 8001c8e:	4836      	ldr	r0, [pc, #216]	@ (8001d68 <StartAuto+0x500>)
 8001c90:	f009 fbe8 	bl	800b464 <siprintf>
					sprintf(LCDBufferLine2, "WYLACZONA!      ");
 8001c94:	493b      	ldr	r1, [pc, #236]	@ (8001d84 <StartAuto+0x51c>)
 8001c96:	482f      	ldr	r0, [pc, #188]	@ (8001d54 <StartAuto+0x4ec>)
 8001c98:	f009 fbe4 	bl	800b464 <siprintf>
		break;
 8001c9c:	e292      	b.n	80021c4 <StartAuto+0x95c>
				else if ((!IsRunning) && (IN_1_9_SAWDOWN_LS))
 8001c9e:	4b3a      	ldr	r3, [pc, #232]	@ (8001d88 <StartAuto+0x520>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f040 828e 	bne.w	80021c4 <StartAuto+0x95c>
 8001ca8:	4b2d      	ldr	r3, [pc, #180]	@ (8001d60 <StartAuto+0x4f8>)
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f040 8287 	bne.w	80021c4 <StartAuto+0x95c>
					BacklightColor = RED;
 8001cb6:	4b35      	ldr	r3, [pc, #212]	@ (8001d8c <StartAuto+0x524>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	701a      	strb	r2, [r3, #0]
					sprintf(LCDBufferLine1, "OPUSC PILE      ");
 8001cbc:	4934      	ldr	r1, [pc, #208]	@ (8001d90 <StartAuto+0x528>)
 8001cbe:	482a      	ldr	r0, [pc, #168]	@ (8001d68 <StartAuto+0x500>)
 8001cc0:	f009 fbd0 	bl	800b464 <siprintf>
					sprintf(LCDBufferLine2, "(TRYB RECZNY)   ");
 8001cc4:	4933      	ldr	r1, [pc, #204]	@ (8001d94 <StartAuto+0x52c>)
 8001cc6:	4823      	ldr	r0, [pc, #140]	@ (8001d54 <StartAuto+0x4ec>)
 8001cc8:	f009 fbcc 	bl	800b464 <siprintf>
		break;
 8001ccc:	e27a      	b.n	80021c4 <StartAuto+0x95c>
			else if(BrokenBlade)
 8001cce:	4b32      	ldr	r3, [pc, #200]	@ (8001d98 <StartAuto+0x530>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00b      	beq.n	8001cee <StartAuto+0x486>
				BacklightColor = RED;
 8001cd6:	4b2d      	ldr	r3, [pc, #180]	@ (8001d8c <StartAuto+0x524>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	701a      	strb	r2, [r3, #0]
				sprintf(LCDBufferLine1, "PILA ZERWANA    ");
 8001cdc:	492f      	ldr	r1, [pc, #188]	@ (8001d9c <StartAuto+0x534>)
 8001cde:	4822      	ldr	r0, [pc, #136]	@ (8001d68 <StartAuto+0x500>)
 8001ce0:	f009 fbc0 	bl	800b464 <siprintf>
				sprintf(LCDBufferLine2, "                ");
 8001ce4:	4923      	ldr	r1, [pc, #140]	@ (8001d74 <StartAuto+0x50c>)
 8001ce6:	481b      	ldr	r0, [pc, #108]	@ (8001d54 <StartAuto+0x4ec>)
 8001ce8:	f009 fbbc 	bl	800b464 <siprintf>
		break;
 8001cec:	e26a      	b.n	80021c4 <StartAuto+0x95c>
				BacklightColor = GREEN;
 8001cee:	4b27      	ldr	r3, [pc, #156]	@ (8001d8c <StartAuto+0x524>)
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	701a      	strb	r2, [r3, #0]
				sprintf(LCDBufferLine1, "WCISNIJ         ");
 8001cf4:	492a      	ldr	r1, [pc, #168]	@ (8001da0 <StartAuto+0x538>)
 8001cf6:	481c      	ldr	r0, [pc, #112]	@ (8001d68 <StartAuto+0x500>)
 8001cf8:	f009 fbb4 	bl	800b464 <siprintf>
				sprintf(LCDBufferLine2, "START!          ");
 8001cfc:	4929      	ldr	r1, [pc, #164]	@ (8001da4 <StartAuto+0x53c>)
 8001cfe:	4815      	ldr	r0, [pc, #84]	@ (8001d54 <StartAuto+0x4ec>)
 8001d00:	f009 fbb0 	bl	800b464 <siprintf>
		break;
 8001d04:	e25e      	b.n	80021c4 <StartAuto+0x95c>
		case 10: /*Raises the blade. Redundant action since the blade has to be raised for the cycle to start. Leaving it here. Try and stop me!*/
				/*prepare material for cutting, now the blade starts at the bottom*/
			if(IN_1_7_FEED)
 8001d06:	4b16      	ldr	r3, [pc, #88]	@ (8001d60 <StartAuto+0x4f8>)
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10e      	bne.n	8001d30 <StartAuto+0x4c8>
				{
				if (IN_1_14_SAWUP_LS)
 8001d12:	4b13      	ldr	r3, [pc, #76]	@ (8001d60 <StartAuto+0x4f8>)
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f040 8254 	bne.w	80021c8 <StartAuto+0x960>
					{
						OUT_0_3_SAWUP_ON;
 8001d20:	4b21      	ldr	r3, [pc, #132]	@ (8001da8 <StartAuto+0x540>)
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	f043 0304 	orr.w	r3, r3, #4
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001da8 <StartAuto+0x540>)
 8001d2c:	801a      	strh	r2, [r3, #0]
				{
					osDelay(500);
					OUT_0_3_SAW_UP_OFF;
					Step = 11;
				}
		break;
 8001d2e:	e24b      	b.n	80021c8 <StartAuto+0x960>
					osDelay(500);
 8001d30:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d34:	f005 f87d 	bl	8006e32 <osDelay>
					OUT_0_3_SAW_UP_OFF;
 8001d38:	4b1b      	ldr	r3, [pc, #108]	@ (8001da8 <StartAuto+0x540>)
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	f023 0304 	bic.w	r3, r3, #4
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	4b19      	ldr	r3, [pc, #100]	@ (8001da8 <StartAuto+0x540>)
 8001d44:	801a      	strh	r2, [r3, #0]
					Step = 11;
 8001d46:	4b04      	ldr	r3, [pc, #16]	@ (8001d58 <StartAuto+0x4f0>)
 8001d48:	220b      	movs	r2, #11
 8001d4a:	701a      	strb	r2, [r3, #0]
		break;
 8001d4c:	e23c      	b.n	80021c8 <StartAuto+0x960>
 8001d4e:	bf00      	nop
 8001d50:	0800eea4 	.word	0x0800eea4
 8001d54:	20000290 	.word	0x20000290
 8001d58:	20000269 	.word	0x20000269
 8001d5c:	2000026b 	.word	0x2000026b
 8001d60:	20000260 	.word	0x20000260
 8001d64:	0800eeb8 	.word	0x0800eeb8
 8001d68:	20000274 	.word	0x20000274
 8001d6c:	0800eecc 	.word	0x0800eecc
 8001d70:	0800eee0 	.word	0x0800eee0
 8001d74:	0800eef4 	.word	0x0800eef4
 8001d78:	0800ef08 	.word	0x0800ef08
 8001d7c:	2000025e 	.word	0x2000025e
 8001d80:	0800ef1c 	.word	0x0800ef1c
 8001d84:	0800ef30 	.word	0x0800ef30
 8001d88:	2000026a 	.word	0x2000026a
 8001d8c:	2000000b 	.word	0x2000000b
 8001d90:	0800ef44 	.word	0x0800ef44
 8001d94:	0800ef58 	.word	0x0800ef58
 8001d98:	2000026c 	.word	0x2000026c
 8001d9c:	0800ef6c 	.word	0x0800ef6c
 8001da0:	0800ef80 	.word	0x0800ef80
 8001da4:	0800ef94 	.word	0x0800ef94
 8001da8:	200002ac 	.word	0x200002ac
		case 11: /*Rear vice unclamp for reposition. Vice opening has no limit switch, timer based.*/
			if (IN_1_12_MAT_REV_LS)
 8001dac:	4b9e      	ldr	r3, [pc, #632]	@ (8002028 <StartAuto+0x7c0>)
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d112      	bne.n	8001dde <StartAuto+0x576>
			{

				OUT_0_9_MAT_CL_UNCLAMP_ON;
 8001db8:	4b9c      	ldr	r3, [pc, #624]	@ (800202c <StartAuto+0x7c4>)
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	4b9a      	ldr	r3, [pc, #616]	@ (800202c <StartAuto+0x7c4>)
 8001dc4:	801a      	strh	r2, [r3, #0]
				osDelay(500);
 8001dc6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001dca:	f005 f832 	bl	8006e32 <osDelay>
				OUT_0_9_MAT_CL_UNCLAMP_OFF;
 8001dce:	4b97      	ldr	r3, [pc, #604]	@ (800202c <StartAuto+0x7c4>)
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	4b94      	ldr	r3, [pc, #592]	@ (800202c <StartAuto+0x7c4>)
 8001dda:	801a      	strh	r2, [r3, #0]
 8001ddc:	e007      	b.n	8001dee <StartAuto+0x586>
			}
			else if (!SawMatClamp)
 8001dde:	4b94      	ldr	r3, [pc, #592]	@ (8002030 <StartAuto+0x7c8>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d103      	bne.n	8001dee <StartAuto+0x586>
			{

				osDelay(500);
 8001de6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001dea:	f005 f822 	bl	8006e32 <osDelay>
			}
				Step = 12;
 8001dee:	4b91      	ldr	r3, [pc, #580]	@ (8002034 <StartAuto+0x7cc>)
 8001df0:	220c      	movs	r2, #12
 8001df2:	701a      	strb	r2, [r3, #0]
		break;
 8001df4:	e1f9      	b.n	80021ea <StartAuto+0x982>

		case 12:/*Move the rear vice in to loading position. Limit switch based.*/
			if(IN_1_12_MAT_REV_LS)
 8001df6:	4b8c      	ldr	r3, [pc, #560]	@ (8002028 <StartAuto+0x7c0>)
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d107      	bne.n	8001e12 <StartAuto+0x5aa>
			{
				OUT_0_10_MAT_FWD_ON;
 8001e02:	4b8a      	ldr	r3, [pc, #552]	@ (800202c <StartAuto+0x7c4>)
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	4b87      	ldr	r3, [pc, #540]	@ (800202c <StartAuto+0x7c4>)
 8001e0e:	801a      	strh	r2, [r3, #0]
			else
			{
				OUT_0_10_MAT_FWD_OFF;
				Step = 13;
			}
		break;
 8001e10:	e1eb      	b.n	80021ea <StartAuto+0x982>
				OUT_0_10_MAT_FWD_OFF;
 8001e12:	4b86      	ldr	r3, [pc, #536]	@ (800202c <StartAuto+0x7c4>)
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	4b83      	ldr	r3, [pc, #524]	@ (800202c <StartAuto+0x7c4>)
 8001e1e:	801a      	strh	r2, [r3, #0]
				Step = 13;
 8001e20:	4b84      	ldr	r3, [pc, #528]	@ (8002034 <StartAuto+0x7cc>)
 8001e22:	220d      	movs	r2, #13
 8001e24:	701a      	strb	r2, [r3, #0]
		break;
 8001e26:	e1e0      	b.n	80021ea <StartAuto+0x982>

		case 13: /*Clamp rear vice. Timer based.*/


				OUT_0_8_MAT_CL_CLAMP_ON;
 8001e28:	4b80      	ldr	r3, [pc, #512]	@ (800202c <StartAuto+0x7c4>)
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	4b7e      	ldr	r3, [pc, #504]	@ (800202c <StartAuto+0x7c4>)
 8001e34:	801a      	strh	r2, [r3, #0]
				osDelay(1500);
 8001e36:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001e3a:	f004 fffa 	bl	8006e32 <osDelay>
				OUT_0_8_MAT_CL_CLAMP_OFF;
 8001e3e:	4b7b      	ldr	r3, [pc, #492]	@ (800202c <StartAuto+0x7c4>)
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	4b78      	ldr	r3, [pc, #480]	@ (800202c <StartAuto+0x7c4>)
 8001e4a:	801a      	strh	r2, [r3, #0]
				Step = 14;
 8001e4c:	4b79      	ldr	r3, [pc, #484]	@ (8002034 <StartAuto+0x7cc>)
 8001e4e:	220e      	movs	r2, #14
 8001e50:	701a      	strb	r2, [r3, #0]

		break;
 8001e52:	e1ca      	b.n	80021ea <StartAuto+0x982>

		case 14: /*Open the main vice slightly, release the cut material. No limit switches, timer based.*/

				OUT_0_6_SAW_CL_UNCLAMP_ON;
 8001e54:	4b75      	ldr	r3, [pc, #468]	@ (800202c <StartAuto+0x7c4>)
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	f043 0320 	orr.w	r3, r3, #32
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	4b73      	ldr	r3, [pc, #460]	@ (800202c <StartAuto+0x7c4>)
 8001e60:	801a      	strh	r2, [r3, #0]
				osDelay(700);
 8001e62:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001e66:	f004 ffe4 	bl	8006e32 <osDelay>
				OUT_0_6_SAW_CL_UNCLAMP_OFF;
 8001e6a:	4b70      	ldr	r3, [pc, #448]	@ (800202c <StartAuto+0x7c4>)
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	f023 0320 	bic.w	r3, r3, #32
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	4b6d      	ldr	r3, [pc, #436]	@ (800202c <StartAuto+0x7c4>)
 8001e76:	801a      	strh	r2, [r3, #0]
				Step = 15;
 8001e78:	4b6e      	ldr	r3, [pc, #440]	@ (8002034 <StartAuto+0x7cc>)
 8001e7a:	220f      	movs	r2, #15
 8001e7c:	701a      	strb	r2, [r3, #0]
		break;
 8001e7e:	e1b4      	b.n	80021ea <StartAuto+0x982>

		case 15: /*Move the material forward, prepare next cut. Limit switch based.*/
			if(IN_1_11_MAT_FWD_LS)
 8001e80:	4b69      	ldr	r3, [pc, #420]	@ (8002028 <StartAuto+0x7c0>)
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d107      	bne.n	8001e9c <StartAuto+0x634>
			{
				OUT_0_11_MAT_REV_ON;
 8001e8c:	4b67      	ldr	r3, [pc, #412]	@ (800202c <StartAuto+0x7c4>)
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	4b65      	ldr	r3, [pc, #404]	@ (800202c <StartAuto+0x7c4>)
 8001e98:	801a      	strh	r2, [r3, #0]
			else
			{
				OUT_0_11_MAT_REV_OFF;
				Step = 20;
			}
		break;
 8001e9a:	e1a6      	b.n	80021ea <StartAuto+0x982>
				OUT_0_11_MAT_REV_OFF;
 8001e9c:	4b63      	ldr	r3, [pc, #396]	@ (800202c <StartAuto+0x7c4>)
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	4b61      	ldr	r3, [pc, #388]	@ (800202c <StartAuto+0x7c4>)
 8001ea8:	801a      	strh	r2, [r3, #0]
				Step = 20;
 8001eaa:	4b62      	ldr	r3, [pc, #392]	@ (8002034 <StartAuto+0x7cc>)
 8001eac:	2214      	movs	r2, #20
 8001eae:	701a      	strb	r2, [r3, #0]
		break;
 8001eb0:	e19b      	b.n	80021ea <StartAuto+0x982>

		case 20: /*Clamp the main vice (front). No limit and pressure switch (yet). Clamping lasts 2sec. Manual material positioning requirement. Remove after installing a pressure switch.*/
			if (!SawMatClamp)
 8001eb2:	4b5f      	ldr	r3, [pc, #380]	@ (8002030 <StartAuto+0x7c8>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f040 8188 	bne.w	80021cc <StartAuto+0x964>
			{
				SawMatClamp = 1;
 8001ebc:	4b5c      	ldr	r3, [pc, #368]	@ (8002030 <StartAuto+0x7c8>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	701a      	strb	r2, [r3, #0]
				OUT_0_5_SAW_CL_CLAMP_ON;
 8001ec2:	4b5a      	ldr	r3, [pc, #360]	@ (800202c <StartAuto+0x7c4>)
 8001ec4:	881b      	ldrh	r3, [r3, #0]
 8001ec6:	f043 0310 	orr.w	r3, r3, #16
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	4b57      	ldr	r3, [pc, #348]	@ (800202c <StartAuto+0x7c4>)
 8001ece:	801a      	strh	r2, [r3, #0]
				osTimerStart(OTimer2Handle, 2000);
 8001ed0:	4b59      	ldr	r3, [pc, #356]	@ (8002038 <StartAuto+0x7d0>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f004 fff3 	bl	8006ec4 <osTimerStart>
			}
		break;
 8001ede:	e175      	b.n	80021cc <StartAuto+0x964>

		case 21: /*Rear vice unclamp for reposition. Vice opening has no limit switch, timer based.*/
			if (!(SawMatClamp) && IN_1_12_MAT_REV_LS)
 8001ee0:	4b53      	ldr	r3, [pc, #332]	@ (8002030 <StartAuto+0x7c8>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d117      	bne.n	8001f18 <StartAuto+0x6b0>
 8001ee8:	4b4f      	ldr	r3, [pc, #316]	@ (8002028 <StartAuto+0x7c0>)
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d111      	bne.n	8001f18 <StartAuto+0x6b0>
			{
				SawMatClamp = 1;
 8001ef4:	4b4e      	ldr	r3, [pc, #312]	@ (8002030 <StartAuto+0x7c8>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	701a      	strb	r2, [r3, #0]
				OUT_0_9_MAT_CL_UNCLAMP_ON;
 8001efa:	4b4c      	ldr	r3, [pc, #304]	@ (800202c <StartAuto+0x7c4>)
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	4b49      	ldr	r3, [pc, #292]	@ (800202c <StartAuto+0x7c4>)
 8001f06:	801a      	strh	r2, [r3, #0]
				osTimerStart(OTimer6Handle, 500);
 8001f08:	4b4c      	ldr	r3, [pc, #304]	@ (800203c <StartAuto+0x7d4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001f10:	4618      	mov	r0, r3
 8001f12:	f004 ffd7 	bl	8006ec4 <osTimerStart>
			else if (!SawMatClamp)
			{
				SawMatClamp = 1;
				osTimerStart(OTimer6Handle, 500);
			}
		break;
 8001f16:	e15b      	b.n	80021d0 <StartAuto+0x968>
			else if (!SawMatClamp)
 8001f18:	4b45      	ldr	r3, [pc, #276]	@ (8002030 <StartAuto+0x7c8>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f040 8157 	bne.w	80021d0 <StartAuto+0x968>
				SawMatClamp = 1;
 8001f22:	4b43      	ldr	r3, [pc, #268]	@ (8002030 <StartAuto+0x7c8>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	701a      	strb	r2, [r3, #0]
				osTimerStart(OTimer6Handle, 500);
 8001f28:	4b44      	ldr	r3, [pc, #272]	@ (800203c <StartAuto+0x7d4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001f30:	4618      	mov	r0, r3
 8001f32:	f004 ffc7 	bl	8006ec4 <osTimerStart>
		break;
 8001f36:	e14b      	b.n	80021d0 <StartAuto+0x968>

		case 30: /*Move the rear vice in to loading position. Limit switch based.*/
			if(IN_1_12_MAT_REV_LS)
 8001f38:	4b3b      	ldr	r3, [pc, #236]	@ (8002028 <StartAuto+0x7c0>)
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d107      	bne.n	8001f54 <StartAuto+0x6ec>
			{
				OUT_0_10_MAT_FWD_ON;
 8001f44:	4b39      	ldr	r3, [pc, #228]	@ (800202c <StartAuto+0x7c4>)
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	4b37      	ldr	r3, [pc, #220]	@ (800202c <StartAuto+0x7c4>)
 8001f50:	801a      	strh	r2, [r3, #0]
			else
			{
				OUT_0_10_MAT_FWD_OFF;
				Step = 40;
			}
		break;
 8001f52:	e14a      	b.n	80021ea <StartAuto+0x982>
				OUT_0_10_MAT_FWD_OFF;
 8001f54:	4b35      	ldr	r3, [pc, #212]	@ (800202c <StartAuto+0x7c4>)
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	4b33      	ldr	r3, [pc, #204]	@ (800202c <StartAuto+0x7c4>)
 8001f60:	801a      	strh	r2, [r3, #0]
				Step = 40;
 8001f62:	4b34      	ldr	r3, [pc, #208]	@ (8002034 <StartAuto+0x7cc>)
 8001f64:	2228      	movs	r2, #40	@ 0x28
 8001f66:	701a      	strb	r2, [r3, #0]
		break;
 8001f68:	e13f      	b.n	80021ea <StartAuto+0x982>

		case 40: /*Clamp rear vice. Timer based.*/
			if(!SawMatClamp)
 8001f6a:	4b31      	ldr	r3, [pc, #196]	@ (8002030 <StartAuto+0x7c8>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f040 8130 	bne.w	80021d4 <StartAuto+0x96c>
			{
				SawMatClamp = 1;
 8001f74:	4b2e      	ldr	r3, [pc, #184]	@ (8002030 <StartAuto+0x7c8>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	701a      	strb	r2, [r3, #0]
				OUT_0_8_MAT_CL_CLAMP_ON;
 8001f7a:	4b2c      	ldr	r3, [pc, #176]	@ (800202c <StartAuto+0x7c4>)
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	4b29      	ldr	r3, [pc, #164]	@ (800202c <StartAuto+0x7c4>)
 8001f86:	801a      	strh	r2, [r3, #0]
				osTimerStart(OTimer9Handle, 1000);
 8001f88:	4b2d      	ldr	r3, [pc, #180]	@ (8002040 <StartAuto+0x7d8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f90:	4618      	mov	r0, r3
 8001f92:	f004 ff97 	bl	8006ec4 <osTimerStart>
			}

		break;
 8001f96:	e11d      	b.n	80021d4 <StartAuto+0x96c>

		case 50: /*Start the saw and according broken blade detection timers*/
			OUT_0_1_SAW_ON;
 8001f98:	4b24      	ldr	r3, [pc, #144]	@ (800202c <StartAuto+0x7c4>)
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	4b22      	ldr	r3, [pc, #136]	@ (800202c <StartAuto+0x7c4>)
 8001fa4:	801a      	strh	r2, [r3, #0]
			/*This parameter starts the "Broken blade detection" feature. It starts after the blade is in motion. Otherwise it will stop preemptively.*/
			CheckForBrokenSaw = 1;
 8001fa6:	4b27      	ldr	r3, [pc, #156]	@ (8002044 <StartAuto+0x7dc>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	701a      	strb	r2, [r3, #0]
			osTimerStart(OTimer7Handle, 1000);
 8001fac:	4b26      	ldr	r3, [pc, #152]	@ (8002048 <StartAuto+0x7e0>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f004 ff85 	bl	8006ec4 <osTimerStart>
			osTimerStart(OTimer8Handle, 2000);
 8001fba:	4b24      	ldr	r3, [pc, #144]	@ (800204c <StartAuto+0x7e4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f004 ff7e 	bl	8006ec4 <osTimerStart>
			Step = 60;
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002034 <StartAuto+0x7cc>)
 8001fca:	223c      	movs	r2, #60	@ 0x3c
 8001fcc:	701a      	strb	r2, [r3, #0]
		break;
 8001fce:	e10c      	b.n	80021ea <StartAuto+0x982>

		case 60: /*Lower the saw. Start the cutting process. Limit switch based.*/
			if (IN_1_9_SAWDOWN_LS)
 8001fd0:	4b15      	ldr	r3, [pc, #84]	@ (8002028 <StartAuto+0x7c0>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d141      	bne.n	8002060 <StartAuto+0x7f8>
			{
				OUT_0_4_SAWDOWN_ON;
 8001fdc:	4b13      	ldr	r3, [pc, #76]	@ (800202c <StartAuto+0x7c4>)
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	f043 0308 	orr.w	r3, r3, #8
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	4b11      	ldr	r3, [pc, #68]	@ (800202c <StartAuto+0x7c4>)
 8001fe8:	801a      	strh	r2, [r3, #0]
				OUT_0_7_CHIP_ON;
 8001fea:	4b10      	ldr	r3, [pc, #64]	@ (800202c <StartAuto+0x7c4>)
 8001fec:	881b      	ldrh	r3, [r3, #0]
 8001fee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800202c <StartAuto+0x7c4>)
 8001ff6:	801a      	strh	r2, [r3, #0]
				OUT_0_16_3PHASE_BACK_ON;
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800202c <StartAuto+0x7c4>)
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002000:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002004:	b29a      	uxth	r2, r3
 8002006:	4b09      	ldr	r3, [pc, #36]	@ (800202c <StartAuto+0x7c4>)
 8002008:	801a      	strh	r2, [r3, #0]
				if(IN_1_7_FEED)
 800200a:	4b07      	ldr	r3, [pc, #28]	@ (8002028 <StartAuto+0x7c0>)
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002012:	2b00      	cmp	r3, #0
 8002014:	d11c      	bne.n	8002050 <StartAuto+0x7e8>
				{
					OUT_0_13_FAST_FEED_OFF;
 8002016:	4b05      	ldr	r3, [pc, #20]	@ (800202c <StartAuto+0x7c4>)
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800201e:	b29a      	uxth	r2, r3
 8002020:	4b02      	ldr	r3, [pc, #8]	@ (800202c <StartAuto+0x7c4>)
 8002022:	801a      	strh	r2, [r3, #0]
						OUT_0_2_COUNTER_OFF;
					}
					osTimerStart(OTimer3Handle, 1000);
				}
			}
		break;
 8002024:	e0d8      	b.n	80021d8 <StartAuto+0x970>
 8002026:	bf00      	nop
 8002028:	20000260 	.word	0x20000260
 800202c:	200002ac 	.word	0x200002ac
 8002030:	20000265 	.word	0x20000265
 8002034:	20000269 	.word	0x20000269
 8002038:	200002cc 	.word	0x200002cc
 800203c:	200002dc 	.word	0x200002dc
 8002040:	200002e8 	.word	0x200002e8
 8002044:	20000268 	.word	0x20000268
 8002048:	200002e0 	.word	0x200002e0
 800204c:	200002e4 	.word	0x200002e4
					OUT_0_13_FAST_FEED_ON;
 8002050:	4b68      	ldr	r3, [pc, #416]	@ (80021f4 <StartAuto+0x98c>)
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002058:	b29a      	uxth	r2, r3
 800205a:	4b66      	ldr	r3, [pc, #408]	@ (80021f4 <StartAuto+0x98c>)
 800205c:	801a      	strh	r2, [r3, #0]
		break;
 800205e:	e0bb      	b.n	80021d8 <StartAuto+0x970>
				OUT_0_13_FAST_FEED_OFF;
 8002060:	4b64      	ldr	r3, [pc, #400]	@ (80021f4 <StartAuto+0x98c>)
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002068:	b29a      	uxth	r2, r3
 800206a:	4b62      	ldr	r3, [pc, #392]	@ (80021f4 <StartAuto+0x98c>)
 800206c:	801a      	strh	r2, [r3, #0]
				if(!(SawDownDelay))
 800206e:	4b62      	ldr	r3, [pc, #392]	@ (80021f8 <StartAuto+0x990>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	f040 80b0 	bne.w	80021d8 <StartAuto+0x970>
					SawDownDelay = 1;
 8002078:	4b5f      	ldr	r3, [pc, #380]	@ (80021f8 <StartAuto+0x990>)
 800207a:	2201      	movs	r2, #1
 800207c:	701a      	strb	r2, [r3, #0]
					if(!(IN_1_4_SELECT_COUNTER))
 800207e:	4b5f      	ldr	r3, [pc, #380]	@ (80021fc <StartAuto+0x994>)
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d006      	beq.n	8002098 <StartAuto+0x830>
						CompletePartCount++;
 800208a:	4b5d      	ldr	r3, [pc, #372]	@ (8002200 <StartAuto+0x998>)
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	3301      	adds	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	4b5b      	ldr	r3, [pc, #364]	@ (8002200 <StartAuto+0x998>)
 8002094:	801a      	strh	r2, [r3, #0]
 8002096:	e010      	b.n	80020ba <StartAuto+0x852>
						OUT_0_2_COUNTER_ON;
 8002098:	4b56      	ldr	r3, [pc, #344]	@ (80021f4 <StartAuto+0x98c>)
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	f043 0302 	orr.w	r3, r3, #2
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	4b54      	ldr	r3, [pc, #336]	@ (80021f4 <StartAuto+0x98c>)
 80020a4:	801a      	strh	r2, [r3, #0]
						osDelay(100);
 80020a6:	2064      	movs	r0, #100	@ 0x64
 80020a8:	f004 fec3 	bl	8006e32 <osDelay>
						OUT_0_2_COUNTER_OFF;
 80020ac:	4b51      	ldr	r3, [pc, #324]	@ (80021f4 <StartAuto+0x98c>)
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	f023 0302 	bic.w	r3, r3, #2
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	4b4f      	ldr	r3, [pc, #316]	@ (80021f4 <StartAuto+0x98c>)
 80020b8:	801a      	strh	r2, [r3, #0]
					osTimerStart(OTimer3Handle, 1000);
 80020ba:	4b52      	ldr	r3, [pc, #328]	@ (8002204 <StartAuto+0x99c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80020c2:	4618      	mov	r0, r3
 80020c4:	f004 fefe 	bl	8006ec4 <osTimerStart>
		break;
 80020c8:	e086      	b.n	80021d8 <StartAuto+0x970>

		case 70: /*Raise the blade again to the feed limit switch. Limit switch based. You know the drill... saw...*/
			if(IN_1_7_FEED)
 80020ca:	4b4c      	ldr	r3, [pc, #304]	@ (80021fc <StartAuto+0x994>)
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10d      	bne.n	80020f2 <StartAuto+0x88a>
				{
				if (IN_1_14_SAWUP_LS)
 80020d6:	4b49      	ldr	r3, [pc, #292]	@ (80021fc <StartAuto+0x994>)
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d17c      	bne.n	80021dc <StartAuto+0x974>
					{
						OUT_0_3_SAWUP_ON;
 80020e2:	4b44      	ldr	r3, [pc, #272]	@ (80021f4 <StartAuto+0x98c>)
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	f043 0304 	orr.w	r3, r3, #4
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	4b41      	ldr	r3, [pc, #260]	@ (80021f4 <StartAuto+0x98c>)
 80020ee:	801a      	strh	r2, [r3, #0]
				{
					osDelay(500);
					OUT_0_3_SAW_UP_OFF;
					Step = 80;
				}
		break;
 80020f0:	e074      	b.n	80021dc <StartAuto+0x974>
					osDelay(500);
 80020f2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80020f6:	f004 fe9c 	bl	8006e32 <osDelay>
					OUT_0_3_SAW_UP_OFF;
 80020fa:	4b3e      	ldr	r3, [pc, #248]	@ (80021f4 <StartAuto+0x98c>)
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	f023 0304 	bic.w	r3, r3, #4
 8002102:	b29a      	uxth	r2, r3
 8002104:	4b3b      	ldr	r3, [pc, #236]	@ (80021f4 <StartAuto+0x98c>)
 8002106:	801a      	strh	r2, [r3, #0]
					Step = 80;
 8002108:	4b3f      	ldr	r3, [pc, #252]	@ (8002208 <StartAuto+0x9a0>)
 800210a:	2250      	movs	r2, #80	@ 0x50
 800210c:	701a      	strb	r2, [r3, #0]
		break;
 800210e:	e065      	b.n	80021dc <StartAuto+0x974>

		case 80: /*Open the main vice slightly, release the cut material. No limit switches, timer based.*/
			if (!(SawMatClamp) && IN_1_5_SAW_CL_UNCLAMP_LS)
 8002110:	4b3e      	ldr	r3, [pc, #248]	@ (800220c <StartAuto+0x9a4>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d163      	bne.n	80021e0 <StartAuto+0x978>
 8002118:	4b38      	ldr	r3, [pc, #224]	@ (80021fc <StartAuto+0x994>)
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	f003 0310 	and.w	r3, r3, #16
 8002120:	2b00      	cmp	r3, #0
 8002122:	d15d      	bne.n	80021e0 <StartAuto+0x978>
			{
				SawMatClamp = 1;
 8002124:	4b39      	ldr	r3, [pc, #228]	@ (800220c <StartAuto+0x9a4>)
 8002126:	2201      	movs	r2, #1
 8002128:	701a      	strb	r2, [r3, #0]
				OUT_0_6_SAW_CL_UNCLAMP_ON;
 800212a:	4b32      	ldr	r3, [pc, #200]	@ (80021f4 <StartAuto+0x98c>)
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	f043 0320 	orr.w	r3, r3, #32
 8002132:	b29a      	uxth	r2, r3
 8002134:	4b2f      	ldr	r3, [pc, #188]	@ (80021f4 <StartAuto+0x98c>)
 8002136:	801a      	strh	r2, [r3, #0]
				osTimerStart(OTimer4Handle, 700);
 8002138:	4b35      	ldr	r3, [pc, #212]	@ (8002210 <StartAuto+0x9a8>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
 8002140:	4618      	mov	r0, r3
 8002142:	f004 febf 	bl	8006ec4 <osTimerStart>
			}
		break;
 8002146:	e04b      	b.n	80021e0 <StartAuto+0x978>

		case 90: /*Move the material forward, prepare next cut. Limit switch based.*/
			if(IN_1_11_MAT_FWD_LS)
 8002148:	4b2c      	ldr	r3, [pc, #176]	@ (80021fc <StartAuto+0x994>)
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002150:	2b00      	cmp	r3, #0
 8002152:	d107      	bne.n	8002164 <StartAuto+0x8fc>
			{
				OUT_0_11_MAT_REV_ON;
 8002154:	4b27      	ldr	r3, [pc, #156]	@ (80021f4 <StartAuto+0x98c>)
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800215c:	b29a      	uxth	r2, r3
 800215e:	4b25      	ldr	r3, [pc, #148]	@ (80021f4 <StartAuto+0x98c>)
 8002160:	801a      	strh	r2, [r3, #0]
			else
			{
				OUT_0_11_MAT_REV_OFF;
				Step = 100;
			}
		break;
 8002162:	e042      	b.n	80021ea <StartAuto+0x982>
				OUT_0_11_MAT_REV_OFF;
 8002164:	4b23      	ldr	r3, [pc, #140]	@ (80021f4 <StartAuto+0x98c>)
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800216c:	b29a      	uxth	r2, r3
 800216e:	4b21      	ldr	r3, [pc, #132]	@ (80021f4 <StartAuto+0x98c>)
 8002170:	801a      	strh	r2, [r3, #0]
				Step = 100;
 8002172:	4b25      	ldr	r3, [pc, #148]	@ (8002208 <StartAuto+0x9a0>)
 8002174:	2264      	movs	r2, #100	@ 0x64
 8002176:	701a      	strb	r2, [r3, #0]
		break;
 8002178:	e037      	b.n	80021ea <StartAuto+0x982>

		case 100: /*Reclamp the main vice. No limit switches, timer based.*/
			if (!SawMatClamp)
 800217a:	4b24      	ldr	r3, [pc, #144]	@ (800220c <StartAuto+0x9a4>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d130      	bne.n	80021e4 <StartAuto+0x97c>
			{
				SawMatClamp = 1;
 8002182:	4b22      	ldr	r3, [pc, #136]	@ (800220c <StartAuto+0x9a4>)
 8002184:	2201      	movs	r2, #1
 8002186:	701a      	strb	r2, [r3, #0]
				OUT_0_5_SAW_CL_CLAMP_ON;
 8002188:	4b1a      	ldr	r3, [pc, #104]	@ (80021f4 <StartAuto+0x98c>)
 800218a:	881b      	ldrh	r3, [r3, #0]
 800218c:	f043 0310 	orr.w	r3, r3, #16
 8002190:	b29a      	uxth	r2, r3
 8002192:	4b18      	ldr	r3, [pc, #96]	@ (80021f4 <StartAuto+0x98c>)
 8002194:	801a      	strh	r2, [r3, #0]
				osTimerStart(OTimer5Handle, 2000);
 8002196:	4b1f      	ldr	r3, [pc, #124]	@ (8002214 <StartAuto+0x9ac>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800219e:	4618      	mov	r0, r3
 80021a0:	f004 fe90 	bl	8006ec4 <osTimerStart>
			}
		break;
 80021a4:	e01e      	b.n	80021e4 <StartAuto+0x97c>

		case 110: /*Loosen the rear vice slightly. Timer based. Repeat the cutting cycle. Jump to Step 21*/
			if(!(MatClamp))
 80021a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002218 <StartAuto+0x9b0>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d11c      	bne.n	80021e8 <StartAuto+0x980>
			{
				MatClamp = 1;
 80021ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002218 <StartAuto+0x9b0>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	701a      	strb	r2, [r3, #0]
				//OUT_0_9_MAT_CL_UNCLAMP_ON;
				osTimerStart(OTimer2Handle, 300);
 80021b4:	4b19      	ldr	r3, [pc, #100]	@ (800221c <StartAuto+0x9b4>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80021bc:	4618      	mov	r0, r3
 80021be:	f004 fe81 	bl	8006ec4 <osTimerStart>
			}
		break;
 80021c2:	e011      	b.n	80021e8 <StartAuto+0x980>
		break;
 80021c4:	bf00      	nop
 80021c6:	e010      	b.n	80021ea <StartAuto+0x982>
		break;
 80021c8:	bf00      	nop
 80021ca:	e00e      	b.n	80021ea <StartAuto+0x982>
		break;
 80021cc:	bf00      	nop
 80021ce:	e00c      	b.n	80021ea <StartAuto+0x982>
		break;
 80021d0:	bf00      	nop
 80021d2:	e00a      	b.n	80021ea <StartAuto+0x982>
		break;
 80021d4:	bf00      	nop
 80021d6:	e008      	b.n	80021ea <StartAuto+0x982>
		break;
 80021d8:	bf00      	nop
 80021da:	e006      	b.n	80021ea <StartAuto+0x982>
		break;
 80021dc:	bf00      	nop
 80021de:	e004      	b.n	80021ea <StartAuto+0x982>
		break;
 80021e0:	bf00      	nop
 80021e2:	e002      	b.n	80021ea <StartAuto+0x982>
		break;
 80021e4:	bf00      	nop
 80021e6:	e000      	b.n	80021ea <StartAuto+0x982>
		break;
 80021e8:	bf00      	nop

	}
    osDelay(OS_DELAY);
 80021ea:	2014      	movs	r0, #20
 80021ec:	f004 fe21 	bl	8006e32 <osDelay>
	if (IN_0_15_HPUMP && IN_0_14_START && IN_0_13_STOP && IN_1_13_SAFETY && !(/*IN_1_14_SAWUP_LS*/IN_1_9_SAWDOWN_LS))
 80021f0:	f7ff bb3e 	b.w	8001870 <StartAuto+0x8>
 80021f4:	200002ac 	.word	0x200002ac
 80021f8:	20000267 	.word	0x20000267
 80021fc:	20000260 	.word	0x20000260
 8002200:	20000270 	.word	0x20000270
 8002204:	200002d0 	.word	0x200002d0
 8002208:	20000269 	.word	0x20000269
 800220c:	20000265 	.word	0x20000265
 8002210:	200002d4 	.word	0x200002d4
 8002214:	200002d8 	.word	0x200002d8
 8002218:	20000266 	.word	0x20000266
 800221c:	200002cc 	.word	0x200002cc

08002220 <StartManual>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartManual */
void StartManual(void const * argument)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]



  for(;;)
  {
	  if (IsRunning == 1)
 8002228:	4b8a      	ldr	r3, [pc, #552]	@ (8002454 <StartManual+0x234>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d104      	bne.n	800223a <StartManual+0x1a>
	  {
		  AllOutputsOff();
 8002230:	f000 fb00 	bl	8002834 <AllOutputsOff>
		  IsRunning = 0;
 8002234:	4b87      	ldr	r3, [pc, #540]	@ (8002454 <StartManual+0x234>)
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
	  }
	  /*Reset the broken saw check, so that it works correctly when the machine is switched back to AUTO.*/
	  CheckForBrokenSaw = 0;
 800223a:	4b87      	ldr	r3, [pc, #540]	@ (8002458 <StartManual+0x238>)
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
	  EmergencyStop = 0;
 8002240:	4b86      	ldr	r3, [pc, #536]	@ (800245c <StartManual+0x23c>)
 8002242:	2200      	movs	r2, #0
 8002244:	701a      	strb	r2, [r3, #0]
	  BrokenBlade = 0;
 8002246:	4b86      	ldr	r3, [pc, #536]	@ (8002460 <StartManual+0x240>)
 8002248:	2200      	movs	r2, #0
 800224a:	701a      	strb	r2, [r3, #0]

	  /*Use this function to set the status and part counter*/
	  ButtonRoutine();
 800224c:	f000 fb98 	bl	8002980 <ButtonRoutine>
	  BacklightColor = WHITE;
 8002250:	4b84      	ldr	r3, [pc, #528]	@ (8002464 <StartManual+0x244>)
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]
	  sprintf(LCDBufferLine1, "Wprowadz ilosc  ");
 8002256:	4984      	ldr	r1, [pc, #528]	@ (8002468 <StartManual+0x248>)
 8002258:	4884      	ldr	r0, [pc, #528]	@ (800246c <StartManual+0x24c>)
 800225a:	f009 f903 	bl	800b464 <siprintf>
	  sprintf(LCDBufferLine2, "           %d    ", NominalPartCount);
 800225e:	4b84      	ldr	r3, [pc, #528]	@ (8002470 <StartManual+0x250>)
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	4983      	ldr	r1, [pc, #524]	@ (8002474 <StartManual+0x254>)
 8002266:	4884      	ldr	r0, [pc, #528]	@ (8002478 <StartManual+0x258>)
 8002268:	f009 f8fc 	bl	800b464 <siprintf>

	if (IN_0_15_HPUMP)
 800226c:	4b83      	ldr	r3, [pc, #524]	@ (800247c <StartManual+0x25c>)
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d107      	bne.n	8002288 <StartManual+0x68>
	{
		OUT_0_12_HPUMP_ON;
 8002278:	4b81      	ldr	r3, [pc, #516]	@ (8002480 <StartManual+0x260>)
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002280:	b29a      	uxth	r2, r3
 8002282:	4b7f      	ldr	r3, [pc, #508]	@ (8002480 <StartManual+0x260>)
 8002284:	801a      	strh	r2, [r3, #0]
 8002286:	e006      	b.n	8002296 <StartManual+0x76>
	}
	else
	{
		OUT_0_12_HPUMP_OFF;
 8002288:	4b7d      	ldr	r3, [pc, #500]	@ (8002480 <StartManual+0x260>)
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002290:	b29a      	uxth	r2, r3
 8002292:	4b7b      	ldr	r3, [pc, #492]	@ (8002480 <StartManual+0x260>)
 8002294:	801a      	strh	r2, [r3, #0]
	}

	if (IN_0_14_START && IN_0_13_STOP)
 8002296:	4b79      	ldr	r3, [pc, #484]	@ (800247c <StartManual+0x25c>)
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10c      	bne.n	80022bc <StartManual+0x9c>
 80022a2:	4b76      	ldr	r3, [pc, #472]	@ (800247c <StartManual+0x25c>)
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d106      	bne.n	80022bc <StartManual+0x9c>
		{
			OUT_0_1_SAW_ON;
 80022ae:	4b74      	ldr	r3, [pc, #464]	@ (8002480 <StartManual+0x260>)
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	4b71      	ldr	r3, [pc, #452]	@ (8002480 <StartManual+0x260>)
 80022ba:	801a      	strh	r2, [r3, #0]
		}

	if(!(IN_0_13_STOP))
 80022bc:	4b6f      	ldr	r3, [pc, #444]	@ (800247c <StartManual+0x25c>)
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d006      	beq.n	80022d6 <StartManual+0xb6>
	{
		OUT_0_1_SAW_OFF;
 80022c8:	4b6d      	ldr	r3, [pc, #436]	@ (8002480 <StartManual+0x260>)
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	f023 0301 	bic.w	r3, r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	4b6b      	ldr	r3, [pc, #428]	@ (8002480 <StartManual+0x260>)
 80022d4:	801a      	strh	r2, [r3, #0]
	}

	if(IN_0_12_SAWUP && IN_1_14_SAWUP_LS)
 80022d6:	4b69      	ldr	r3, [pc, #420]	@ (800247c <StartManual+0x25c>)
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10d      	bne.n	80022fe <StartManual+0xde>
 80022e2:	4b68      	ldr	r3, [pc, #416]	@ (8002484 <StartManual+0x264>)
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d107      	bne.n	80022fe <StartManual+0xde>
	{
		OUT_0_3_SAWUP_ON;
 80022ee:	4b64      	ldr	r3, [pc, #400]	@ (8002480 <StartManual+0x260>)
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	f043 0304 	orr.w	r3, r3, #4
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	4b61      	ldr	r3, [pc, #388]	@ (8002480 <StartManual+0x260>)
 80022fa:	801a      	strh	r2, [r3, #0]
 80022fc:	e006      	b.n	800230c <StartManual+0xec>
	}
	else
	{
		OUT_0_3_SAW_UP_OFF;
 80022fe:	4b60      	ldr	r3, [pc, #384]	@ (8002480 <StartManual+0x260>)
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	f023 0304 	bic.w	r3, r3, #4
 8002306:	b29a      	uxth	r2, r3
 8002308:	4b5d      	ldr	r3, [pc, #372]	@ (8002480 <StartManual+0x260>)
 800230a:	801a      	strh	r2, [r3, #0]
	}

	if(IN_0_11_SDOWN && IN_1_9_SAWDOWN_LS)
 800230c:	4b5b      	ldr	r3, [pc, #364]	@ (800247c <StartManual+0x25c>)
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10d      	bne.n	8002334 <StartManual+0x114>
 8002318:	4b5a      	ldr	r3, [pc, #360]	@ (8002484 <StartManual+0x264>)
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d107      	bne.n	8002334 <StartManual+0x114>
	{
		OUT_0_4_SAWDOWN_ON;
 8002324:	4b56      	ldr	r3, [pc, #344]	@ (8002480 <StartManual+0x260>)
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	f043 0308 	orr.w	r3, r3, #8
 800232c:	b29a      	uxth	r2, r3
 800232e:	4b54      	ldr	r3, [pc, #336]	@ (8002480 <StartManual+0x260>)
 8002330:	801a      	strh	r2, [r3, #0]
 8002332:	e006      	b.n	8002342 <StartManual+0x122>
	}
	else
	{
		OUT_0_4_SAW_DOWN_OFF;
 8002334:	4b52      	ldr	r3, [pc, #328]	@ (8002480 <StartManual+0x260>)
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	f023 0308 	bic.w	r3, r3, #8
 800233c:	b29a      	uxth	r2, r3
 800233e:	4b50      	ldr	r3, [pc, #320]	@ (8002480 <StartManual+0x260>)
 8002340:	801a      	strh	r2, [r3, #0]
	}

	if(IN_0_10_MAT_CL_UNCLAMP)
 8002342:	4b4e      	ldr	r3, [pc, #312]	@ (800247c <StartManual+0x25c>)
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800234a:	2b00      	cmp	r3, #0
 800234c:	d107      	bne.n	800235e <StartManual+0x13e>
	{
		OUT_0_9_MAT_CL_UNCLAMP_ON;
 800234e:	4b4c      	ldr	r3, [pc, #304]	@ (8002480 <StartManual+0x260>)
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002356:	b29a      	uxth	r2, r3
 8002358:	4b49      	ldr	r3, [pc, #292]	@ (8002480 <StartManual+0x260>)
 800235a:	801a      	strh	r2, [r3, #0]
 800235c:	e006      	b.n	800236c <StartManual+0x14c>
	}
	else
	{
		OUT_0_9_MAT_CL_UNCLAMP_OFF;
 800235e:	4b48      	ldr	r3, [pc, #288]	@ (8002480 <StartManual+0x260>)
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002366:	b29a      	uxth	r2, r3
 8002368:	4b45      	ldr	r3, [pc, #276]	@ (8002480 <StartManual+0x260>)
 800236a:	801a      	strh	r2, [r3, #0]
	}

	if(IN_0_9_MAT_CL_CLAMP)
 800236c:	4b43      	ldr	r3, [pc, #268]	@ (800247c <StartManual+0x25c>)
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002374:	2b00      	cmp	r3, #0
 8002376:	d107      	bne.n	8002388 <StartManual+0x168>
	{
		OUT_0_8_MAT_CL_CLAMP_ON;
 8002378:	4b41      	ldr	r3, [pc, #260]	@ (8002480 <StartManual+0x260>)
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002380:	b29a      	uxth	r2, r3
 8002382:	4b3f      	ldr	r3, [pc, #252]	@ (8002480 <StartManual+0x260>)
 8002384:	801a      	strh	r2, [r3, #0]
 8002386:	e006      	b.n	8002396 <StartManual+0x176>
	}
	else
	{
		OUT_0_8_MAT_CL_CLAMP_OFF;
 8002388:	4b3d      	ldr	r3, [pc, #244]	@ (8002480 <StartManual+0x260>)
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002390:	b29a      	uxth	r2, r3
 8002392:	4b3b      	ldr	r3, [pc, #236]	@ (8002480 <StartManual+0x260>)
 8002394:	801a      	strh	r2, [r3, #0]
	}

	if(IN_0_8_MAT_REV && IN_1_11_MAT_FWD_LS)
 8002396:	4b39      	ldr	r3, [pc, #228]	@ (800247c <StartManual+0x25c>)
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10d      	bne.n	80023be <StartManual+0x19e>
 80023a2:	4b38      	ldr	r3, [pc, #224]	@ (8002484 <StartManual+0x264>)
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d107      	bne.n	80023be <StartManual+0x19e>
	{
		OUT_0_11_MAT_REV_ON;
 80023ae:	4b34      	ldr	r3, [pc, #208]	@ (8002480 <StartManual+0x260>)
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	4b31      	ldr	r3, [pc, #196]	@ (8002480 <StartManual+0x260>)
 80023ba:	801a      	strh	r2, [r3, #0]
 80023bc:	e006      	b.n	80023cc <StartManual+0x1ac>
	}
	else
	{
		OUT_0_11_MAT_REV_OFF;
 80023be:	4b30      	ldr	r3, [pc, #192]	@ (8002480 <StartManual+0x260>)
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002480 <StartManual+0x260>)
 80023ca:	801a      	strh	r2, [r3, #0]
	}

	if(IN_0_7_MAT_FWD && IN_1_12_MAT_REV_LS)
 80023cc:	4b2b      	ldr	r3, [pc, #172]	@ (800247c <StartManual+0x25c>)
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10d      	bne.n	80023f4 <StartManual+0x1d4>
 80023d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002484 <StartManual+0x264>)
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d107      	bne.n	80023f4 <StartManual+0x1d4>
	{
		OUT_0_10_MAT_FWD_ON;
 80023e4:	4b26      	ldr	r3, [pc, #152]	@ (8002480 <StartManual+0x260>)
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	4b24      	ldr	r3, [pc, #144]	@ (8002480 <StartManual+0x260>)
 80023f0:	801a      	strh	r2, [r3, #0]
 80023f2:	e006      	b.n	8002402 <StartManual+0x1e2>
	}
	else
	{
		OUT_0_10_MAT_FWD_OFF;
 80023f4:	4b22      	ldr	r3, [pc, #136]	@ (8002480 <StartManual+0x260>)
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	4b20      	ldr	r3, [pc, #128]	@ (8002480 <StartManual+0x260>)
 8002400:	801a      	strh	r2, [r3, #0]
	}

	if(IN_0_6_SAW_CL_UNCLAMP && IN_1_5_SAW_CL_UNCLAMP_LS)
 8002402:	4b1e      	ldr	r3, [pc, #120]	@ (800247c <StartManual+0x25c>)
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	f003 0320 	and.w	r3, r3, #32
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10d      	bne.n	800242a <StartManual+0x20a>
 800240e:	4b1d      	ldr	r3, [pc, #116]	@ (8002484 <StartManual+0x264>)
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	f003 0310 	and.w	r3, r3, #16
 8002416:	2b00      	cmp	r3, #0
 8002418:	d107      	bne.n	800242a <StartManual+0x20a>
	{
		OUT_0_6_SAW_CL_UNCLAMP_ON;
 800241a:	4b19      	ldr	r3, [pc, #100]	@ (8002480 <StartManual+0x260>)
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	f043 0320 	orr.w	r3, r3, #32
 8002422:	b29a      	uxth	r2, r3
 8002424:	4b16      	ldr	r3, [pc, #88]	@ (8002480 <StartManual+0x260>)
 8002426:	801a      	strh	r2, [r3, #0]
 8002428:	e006      	b.n	8002438 <StartManual+0x218>
	}
	else
	{
		OUT_0_6_SAW_CL_UNCLAMP_OFF;
 800242a:	4b15      	ldr	r3, [pc, #84]	@ (8002480 <StartManual+0x260>)
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	f023 0320 	bic.w	r3, r3, #32
 8002432:	b29a      	uxth	r2, r3
 8002434:	4b12      	ldr	r3, [pc, #72]	@ (8002480 <StartManual+0x260>)
 8002436:	801a      	strh	r2, [r3, #0]
	}

	if(IN_0_5_SAW_CL_CLAMP)
 8002438:	4b10      	ldr	r3, [pc, #64]	@ (800247c <StartManual+0x25c>)
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	f003 0310 	and.w	r3, r3, #16
 8002440:	2b00      	cmp	r3, #0
 8002442:	d121      	bne.n	8002488 <StartManual+0x268>
	{
		OUT_0_5_SAW_CL_CLAMP_ON;
 8002444:	4b0e      	ldr	r3, [pc, #56]	@ (8002480 <StartManual+0x260>)
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	f043 0310 	orr.w	r3, r3, #16
 800244c:	b29a      	uxth	r2, r3
 800244e:	4b0c      	ldr	r3, [pc, #48]	@ (8002480 <StartManual+0x260>)
 8002450:	801a      	strh	r2, [r3, #0]
 8002452:	e020      	b.n	8002496 <StartManual+0x276>
 8002454:	2000026a 	.word	0x2000026a
 8002458:	20000268 	.word	0x20000268
 800245c:	2000026b 	.word	0x2000026b
 8002460:	2000026c 	.word	0x2000026c
 8002464:	2000000b 	.word	0x2000000b
 8002468:	0800efa8 	.word	0x0800efa8
 800246c:	20000274 	.word	0x20000274
 8002470:	20000002 	.word	0x20000002
 8002474:	0800efbc 	.word	0x0800efbc
 8002478:	20000290 	.word	0x20000290
 800247c:	2000025e 	.word	0x2000025e
 8002480:	200002ac 	.word	0x200002ac
 8002484:	20000260 	.word	0x20000260
	}
	else
	{
		OUT_0_5_SAW_CL_CLAMP_OFF;
 8002488:	4b2f      	ldr	r3, [pc, #188]	@ (8002548 <StartManual+0x328>)
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	f023 0310 	bic.w	r3, r3, #16
 8002490:	b29a      	uxth	r2, r3
 8002492:	4b2d      	ldr	r3, [pc, #180]	@ (8002548 <StartManual+0x328>)
 8002494:	801a      	strh	r2, [r3, #0]
	}

	if(IN_0_4_TENSION_UP)
 8002496:	4b2d      	ldr	r3, [pc, #180]	@ (800254c <StartManual+0x32c>)
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d115      	bne.n	80024ce <StartManual+0x2ae>
	{
		if (!(SawTension))
 80024a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002550 <StartManual+0x330>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d11d      	bne.n	80024e6 <StartManual+0x2c6>
		{
		SawTension = 1;
 80024aa:	4b29      	ldr	r3, [pc, #164]	@ (8002550 <StartManual+0x330>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	701a      	strb	r2, [r3, #0]
		OUT_0_14_TENSION_UP_ON;
 80024b0:	4b25      	ldr	r3, [pc, #148]	@ (8002548 <StartManual+0x328>)
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	4b23      	ldr	r3, [pc, #140]	@ (8002548 <StartManual+0x328>)
 80024bc:	801a      	strh	r2, [r3, #0]
		osTimerStart(OTimer1Handle, 5000);
 80024be:	4b25      	ldr	r3, [pc, #148]	@ (8002554 <StartManual+0x334>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f241 3188 	movw	r1, #5000	@ 0x1388
 80024c6:	4618      	mov	r0, r3
 80024c8:	f004 fcfc 	bl	8006ec4 <osTimerStart>
 80024cc:	e00b      	b.n	80024e6 <StartManual+0x2c6>
		}
	}
	else
	{
		OUT_0_14_TENSION_UP_OFF;
 80024ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002548 <StartManual+0x328>)
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002548 <StartManual+0x328>)
 80024da:	801a      	strh	r2, [r3, #0]
		osTimerStop(OTimer1Handle);
 80024dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002554 <StartManual+0x334>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f004 fd33 	bl	8006f4c <osTimerStop>
	}

	if(IN_0_3_TENSION_DOWN)
 80024e6:	4b19      	ldr	r3, [pc, #100]	@ (800254c <StartManual+0x32c>)
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10a      	bne.n	8002508 <StartManual+0x2e8>
	{
		SawTension = 0;
 80024f2:	4b17      	ldr	r3, [pc, #92]	@ (8002550 <StartManual+0x330>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]
		OUT_0_15_TENSION_DOWN_ON;
 80024f8:	4b13      	ldr	r3, [pc, #76]	@ (8002548 <StartManual+0x328>)
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002500:	b29a      	uxth	r2, r3
 8002502:	4b11      	ldr	r3, [pc, #68]	@ (8002548 <StartManual+0x328>)
 8002504:	801a      	strh	r2, [r3, #0]
 8002506:	e006      	b.n	8002516 <StartManual+0x2f6>
	}
	else
	{
		OUT_0_15_TENSION_DOWN_OFF;
 8002508:	4b0f      	ldr	r3, [pc, #60]	@ (8002548 <StartManual+0x328>)
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002510:	b29a      	uxth	r2, r3
 8002512:	4b0d      	ldr	r3, [pc, #52]	@ (8002548 <StartManual+0x328>)
 8002514:	801a      	strh	r2, [r3, #0]
	}

	if(IN_0_2_CHIP)
 8002516:	4b0d      	ldr	r3, [pc, #52]	@ (800254c <StartManual+0x32c>)
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d107      	bne.n	8002532 <StartManual+0x312>
	{
		OUT_0_7_CHIP_ON;
 8002522:	4b09      	ldr	r3, [pc, #36]	@ (8002548 <StartManual+0x328>)
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800252a:	b29a      	uxth	r2, r3
 800252c:	4b06      	ldr	r3, [pc, #24]	@ (8002548 <StartManual+0x328>)
 800252e:	801a      	strh	r2, [r3, #0]
 8002530:	e006      	b.n	8002540 <StartManual+0x320>
	}
	else
	{
		OUT_0_7_CHIP_OFF;
 8002532:	4b05      	ldr	r3, [pc, #20]	@ (8002548 <StartManual+0x328>)
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800253a:	b29a      	uxth	r2, r3
 800253c:	4b02      	ldr	r3, [pc, #8]	@ (8002548 <StartManual+0x328>)
 800253e:	801a      	strh	r2, [r3, #0]
	}

    osDelay(OS_DELAY);
 8002540:	2014      	movs	r0, #20
 8002542:	f004 fc76 	bl	8006e32 <osDelay>
	  if (IsRunning == 1)
 8002546:	e66f      	b.n	8002228 <StartManual+0x8>
 8002548:	200002ac 	.word	0x200002ac
 800254c:	2000025e 	.word	0x2000025e
 8002550:	20000264 	.word	0x20000264
 8002554:	200002c8 	.word	0x200002c8

08002558 <StartLCDUpdate>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLCDUpdate */
void StartLCDUpdate(void const * argument)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLCDUpdate */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(InOutSemHandle, 1000);
 8002560:	4b09      	ldr	r3, [pc, #36]	@ (8002588 <StartLCDUpdate+0x30>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002568:	4618      	mov	r0, r3
 800256a:	f004 fd5d 	bl	8007028 <osSemaphoreWait>
	  UpdateLCDDisplay();
 800256e:	f000 fa8d 	bl	8002a8c <UpdateLCDDisplay>
	  osSemaphoreRelease(InOutSemHandle);
 8002572:	4b05      	ldr	r3, [pc, #20]	@ (8002588 <StartLCDUpdate+0x30>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f004 fda4 	bl	80070c4 <osSemaphoreRelease>
	  osDelay(LCD_DELAY);
 800257c:	203c      	movs	r0, #60	@ 0x3c
 800257e:	f004 fc58 	bl	8006e32 <osDelay>
	  osSemaphoreWait(InOutSemHandle, 1000);
 8002582:	bf00      	nop
 8002584:	e7ec      	b.n	8002560 <StartLCDUpdate+0x8>
 8002586:	bf00      	nop
 8002588:	200002f0 	.word	0x200002f0

0800258c <OTimer1Callback>:
  /* USER CODE END StartLCDUpdate */
}

/* OTimer1Callback function */
void OTimer1Callback(void const * argument)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OTimer1Callback */
	OUT_0_14_TENSION_UP_OFF;
 8002594:	4b06      	ldr	r3, [pc, #24]	@ (80025b0 <OTimer1Callback+0x24>)
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800259c:	b29a      	uxth	r2, r3
 800259e:	4b04      	ldr	r3, [pc, #16]	@ (80025b0 <OTimer1Callback+0x24>)
 80025a0:	801a      	strh	r2, [r3, #0]
  /* USER CODE END OTimer1Callback */
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	200002ac 	.word	0x200002ac

080025b4 <OTimer2Callback>:

/* OTimer2Callback function */
void OTimer2Callback(void const * argument)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OTimer2Callback */
	MatClamp = 0;
 80025bc:	4b0e      	ldr	r3, [pc, #56]	@ (80025f8 <OTimer2Callback+0x44>)
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]
	SawMatClamp = 0;
 80025c2:	4b0e      	ldr	r3, [pc, #56]	@ (80025fc <OTimer2Callback+0x48>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	701a      	strb	r2, [r3, #0]
	OUT_0_5_SAW_CL_CLAMP_OFF;
 80025c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002600 <OTimer2Callback+0x4c>)
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	f023 0310 	bic.w	r3, r3, #16
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002600 <OTimer2Callback+0x4c>)
 80025d4:	801a      	strh	r2, [r3, #0]
	OUT_0_9_MAT_CL_UNCLAMP_OFF;
 80025d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002600 <OTimer2Callback+0x4c>)
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025de:	b29a      	uxth	r2, r3
 80025e0:	4b07      	ldr	r3, [pc, #28]	@ (8002600 <OTimer2Callback+0x4c>)
 80025e2:	801a      	strh	r2, [r3, #0]
	Step = 21;
 80025e4:	4b07      	ldr	r3, [pc, #28]	@ (8002604 <OTimer2Callback+0x50>)
 80025e6:	2215      	movs	r2, #21
 80025e8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END OTimer2Callback */
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	20000266 	.word	0x20000266
 80025fc:	20000265 	.word	0x20000265
 8002600:	200002ac 	.word	0x200002ac
 8002604:	20000269 	.word	0x20000269

08002608 <OTimer3Callback>:

/* OTimer3Callback function */
void OTimer3Callback(void const * argument)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OTimer3Callback */
	SawDownDelay = 0;
 8002610:	4b24      	ldr	r3, [pc, #144]	@ (80026a4 <OTimer3Callback+0x9c>)
 8002612:	2200      	movs	r2, #0
 8002614:	701a      	strb	r2, [r3, #0]
	OUT_0_4_SAW_DOWN_OFF;
 8002616:	4b24      	ldr	r3, [pc, #144]	@ (80026a8 <OTimer3Callback+0xa0>)
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	f023 0308 	bic.w	r3, r3, #8
 800261e:	b29a      	uxth	r2, r3
 8002620:	4b21      	ldr	r3, [pc, #132]	@ (80026a8 <OTimer3Callback+0xa0>)
 8002622:	801a      	strh	r2, [r3, #0]
	if(!(IN_1_4_SELECT_COUNTER))
 8002624:	4b21      	ldr	r3, [pc, #132]	@ (80026ac <OTimer3Callback+0xa4>)
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b00      	cmp	r3, #0
 800262e:	d019      	beq.n	8002664 <OTimer3Callback+0x5c>
	{
		if((CompletePartCount != NominalPartCount)/*!(IN_0_1_COUNTER)*/ && IN_1_10_MAT_CLAMP)		//TODO wyedytowany licznik fizyczny na licznik cyfrowy z LCD
 8002630:	4b1f      	ldr	r3, [pc, #124]	@ (80026b0 <OTimer3Callback+0xa8>)
 8002632:	881a      	ldrh	r2, [r3, #0]
 8002634:	4b1f      	ldr	r3, [pc, #124]	@ (80026b4 <OTimer3Callback+0xac>)
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d009      	beq.n	8002650 <OTimer3Callback+0x48>
 800263c:	4b1b      	ldr	r3, [pc, #108]	@ (80026ac <OTimer3Callback+0xa4>)
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002644:	2b00      	cmp	r3, #0
 8002646:	d103      	bne.n	8002650 <OTimer3Callback+0x48>
		{
			Step = 70;
 8002648:	4b1b      	ldr	r3, [pc, #108]	@ (80026b8 <OTimer3Callback+0xb0>)
 800264a:	2246      	movs	r2, #70	@ 0x46
 800264c:	701a      	strb	r2, [r3, #0]
 800264e:	e023      	b.n	8002698 <OTimer3Callback+0x90>
		}
		else
		{
			Step = 0;
 8002650:	4b19      	ldr	r3, [pc, #100]	@ (80026b8 <OTimer3Callback+0xb0>)
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]
			IsRunning = 0;
 8002656:	4b19      	ldr	r3, [pc, #100]	@ (80026bc <OTimer3Callback+0xb4>)
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
			CompletePartCount = 0;
 800265c:	4b14      	ldr	r3, [pc, #80]	@ (80026b0 <OTimer3Callback+0xa8>)
 800265e:	2200      	movs	r2, #0
 8002660:	801a      	strh	r2, [r3, #0]
					IsRunning = 0;
					CompletePartCount = 0;
				}
	}
  /* USER CODE END OTimer3Callback */
}
 8002662:	e019      	b.n	8002698 <OTimer3Callback+0x90>
		if(/*(CompletePartCount != NominalPartCount)*/!(IN_0_1_COUNTER) && IN_1_10_MAT_CLAMP)		//TODO wyedytowany licznik fizyczny na licznik cyfrowy z LCD
 8002664:	4b16      	ldr	r3, [pc, #88]	@ (80026c0 <OTimer3Callback+0xb8>)
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d009      	beq.n	8002684 <OTimer3Callback+0x7c>
 8002670:	4b0e      	ldr	r3, [pc, #56]	@ (80026ac <OTimer3Callback+0xa4>)
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002678:	2b00      	cmp	r3, #0
 800267a:	d103      	bne.n	8002684 <OTimer3Callback+0x7c>
					Step = 70;
 800267c:	4b0e      	ldr	r3, [pc, #56]	@ (80026b8 <OTimer3Callback+0xb0>)
 800267e:	2246      	movs	r2, #70	@ 0x46
 8002680:	701a      	strb	r2, [r3, #0]
 8002682:	e009      	b.n	8002698 <OTimer3Callback+0x90>
					Step = 0;
 8002684:	4b0c      	ldr	r3, [pc, #48]	@ (80026b8 <OTimer3Callback+0xb0>)
 8002686:	2200      	movs	r2, #0
 8002688:	701a      	strb	r2, [r3, #0]
					IsRunning = 0;
 800268a:	4b0c      	ldr	r3, [pc, #48]	@ (80026bc <OTimer3Callback+0xb4>)
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]
					CompletePartCount = 0;
 8002690:	4b07      	ldr	r3, [pc, #28]	@ (80026b0 <OTimer3Callback+0xa8>)
 8002692:	2200      	movs	r2, #0
 8002694:	801a      	strh	r2, [r3, #0]
}
 8002696:	e7ff      	b.n	8002698 <OTimer3Callback+0x90>
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	20000267 	.word	0x20000267
 80026a8:	200002ac 	.word	0x200002ac
 80026ac:	20000260 	.word	0x20000260
 80026b0:	20000270 	.word	0x20000270
 80026b4:	20000002 	.word	0x20000002
 80026b8:	20000269 	.word	0x20000269
 80026bc:	2000026a 	.word	0x2000026a
 80026c0:	2000025e 	.word	0x2000025e

080026c4 <OTimer4Callback>:

/* OTimer4Callback function */
void OTimer4Callback(void const * argument)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OTimer4Callback */
	SawMatClamp = 0;
 80026cc:	4b09      	ldr	r3, [pc, #36]	@ (80026f4 <OTimer4Callback+0x30>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]
	OUT_0_6_SAW_CL_UNCLAMP_OFF;
 80026d2:	4b09      	ldr	r3, [pc, #36]	@ (80026f8 <OTimer4Callback+0x34>)
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	f023 0320 	bic.w	r3, r3, #32
 80026da:	b29a      	uxth	r2, r3
 80026dc:	4b06      	ldr	r3, [pc, #24]	@ (80026f8 <OTimer4Callback+0x34>)
 80026de:	801a      	strh	r2, [r3, #0]
	Step = 90;
 80026e0:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <OTimer4Callback+0x38>)
 80026e2:	225a      	movs	r2, #90	@ 0x5a
 80026e4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END OTimer4Callback */
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	20000265 	.word	0x20000265
 80026f8:	200002ac 	.word	0x200002ac
 80026fc:	20000269 	.word	0x20000269

08002700 <OTimer5Callback>:

/* OTimer5Callback function */
void OTimer5Callback(void const * argument)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OTimer5Callback */
	SawMatClamp = 0;
 8002708:	4b09      	ldr	r3, [pc, #36]	@ (8002730 <OTimer5Callback+0x30>)
 800270a:	2200      	movs	r2, #0
 800270c:	701a      	strb	r2, [r3, #0]
	OUT_0_5_SAW_CL_CLAMP_ON;
 800270e:	4b09      	ldr	r3, [pc, #36]	@ (8002734 <OTimer5Callback+0x34>)
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	f043 0310 	orr.w	r3, r3, #16
 8002716:	b29a      	uxth	r2, r3
 8002718:	4b06      	ldr	r3, [pc, #24]	@ (8002734 <OTimer5Callback+0x34>)
 800271a:	801a      	strh	r2, [r3, #0]
	Step = 110;
 800271c:	4b06      	ldr	r3, [pc, #24]	@ (8002738 <OTimer5Callback+0x38>)
 800271e:	226e      	movs	r2, #110	@ 0x6e
 8002720:	701a      	strb	r2, [r3, #0]
  /* USER CODE END OTimer5Callback */
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	20000265 	.word	0x20000265
 8002734:	200002ac 	.word	0x200002ac
 8002738:	20000269 	.word	0x20000269

0800273c <OTimer6Callback>:

/* OTimer6Callback function */
void OTimer6Callback(void const * argument)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OTimer6Callback */
	SawMatClamp = 0;
 8002744:	4b09      	ldr	r3, [pc, #36]	@ (800276c <OTimer6Callback+0x30>)
 8002746:	2200      	movs	r2, #0
 8002748:	701a      	strb	r2, [r3, #0]
	OUT_0_9_MAT_CL_UNCLAMP_OFF;
 800274a:	4b09      	ldr	r3, [pc, #36]	@ (8002770 <OTimer6Callback+0x34>)
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002752:	b29a      	uxth	r2, r3
 8002754:	4b06      	ldr	r3, [pc, #24]	@ (8002770 <OTimer6Callback+0x34>)
 8002756:	801a      	strh	r2, [r3, #0]
	Step = 30;
 8002758:	4b06      	ldr	r3, [pc, #24]	@ (8002774 <OTimer6Callback+0x38>)
 800275a:	221e      	movs	r2, #30
 800275c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END OTimer6Callback */
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	20000265 	.word	0x20000265
 8002770:	200002ac 	.word	0x200002ac
 8002774:	20000269 	.word	0x20000269

08002778 <OTimer7Callback>:

/* OTimer7Callback function */
void OTimer7Callback(void const * argument)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OTimer7Callback */
	Step = 0;
 8002780:	4b05      	ldr	r3, [pc, #20]	@ (8002798 <OTimer7Callback+0x20>)
 8002782:	2200      	movs	r2, #0
 8002784:	701a      	strb	r2, [r3, #0]
	BrokenBlade = 1;
 8002786:	4b05      	ldr	r3, [pc, #20]	@ (800279c <OTimer7Callback+0x24>)
 8002788:	2201      	movs	r2, #1
 800278a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END OTimer7Callback */
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	20000269 	.word	0x20000269
 800279c:	2000026c 	.word	0x2000026c

080027a0 <OTimer8Callback>:

/* OTimer8Callback function */
void OTimer8Callback(void const * argument)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OTimer8Callback */
	Step = 0;
 80027a8:	4b05      	ldr	r3, [pc, #20]	@ (80027c0 <OTimer8Callback+0x20>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	701a      	strb	r2, [r3, #0]
	BrokenBlade = 2;
 80027ae:	4b05      	ldr	r3, [pc, #20]	@ (80027c4 <OTimer8Callback+0x24>)
 80027b0:	2202      	movs	r2, #2
 80027b2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END OTimer8Callback */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	20000269 	.word	0x20000269
 80027c4:	2000026c 	.word	0x2000026c

080027c8 <OTimer9Callback>:

/* OTimer9Callback function */
void OTimer9Callback(void const * argument)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OTimer9Callback */
	SawMatClamp = 0;
 80027d0:	4b09      	ldr	r3, [pc, #36]	@ (80027f8 <OTimer9Callback+0x30>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	701a      	strb	r2, [r3, #0]
	OUT_0_8_MAT_CL_CLAMP_OFF;
 80027d6:	4b09      	ldr	r3, [pc, #36]	@ (80027fc <OTimer9Callback+0x34>)
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027de:	b29a      	uxth	r2, r3
 80027e0:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <OTimer9Callback+0x34>)
 80027e2:	801a      	strh	r2, [r3, #0]
	Step = 50;
 80027e4:	4b06      	ldr	r3, [pc, #24]	@ (8002800 <OTimer9Callback+0x38>)
 80027e6:	2232      	movs	r2, #50	@ 0x32
 80027e8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END OTimer9Callback */
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000265 	.word	0x20000265
 80027fc:	200002ac 	.word	0x200002ac
 8002800:	20000269 	.word	0x20000269

08002804 <OTimer10Callback>:

/* OTimer10Callback function */
void OTimer10Callback(void const * argument)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OTimer10Callback */
	OUT_0_3_SAW_UP_OFF;
 800280c:	4b07      	ldr	r3, [pc, #28]	@ (800282c <OTimer10Callback+0x28>)
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	f023 0304 	bic.w	r3, r3, #4
 8002814:	b29a      	uxth	r2, r3
 8002816:	4b05      	ldr	r3, [pc, #20]	@ (800282c <OTimer10Callback+0x28>)
 8002818:	801a      	strh	r2, [r3, #0]
	Step = 80;
 800281a:	4b05      	ldr	r3, [pc, #20]	@ (8002830 <OTimer10Callback+0x2c>)
 800281c:	2250      	movs	r2, #80	@ 0x50
 800281e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END OTimer10Callback */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	200002ac 	.word	0x200002ac
 8002830:	20000269 	.word	0x20000269

08002834 <AllOutputsOff>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void AllOutputsOff(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
			OUT_0_16_3PHASE_BACK_OFF;	//Output_2_Sum &= ~			OUT_0_15_TENSION_DOWN_OFF;	Output_2_Sum &= ~0b0100000000000000
 8002838:	4b45      	ldr	r3, [pc, #276]	@ (8002950 <AllOutputsOff+0x11c>)
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002840:	b29a      	uxth	r2, r3
 8002842:	4b43      	ldr	r3, [pc, #268]	@ (8002950 <AllOutputsOff+0x11c>)
 8002844:	801a      	strh	r2, [r3, #0]
			//OUT_0_14_TENSION_UP_OFF;	//Output_2_Sum &= ~0b0010000000000000
			OUT_0_13_FAST_FEED_OFF;		//Output_2_Sum &= ~0b0001000000000000
 8002846:	4b42      	ldr	r3, [pc, #264]	@ (8002950 <AllOutputsOff+0x11c>)
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800284e:	b29a      	uxth	r2, r3
 8002850:	4b3f      	ldr	r3, [pc, #252]	@ (8002950 <AllOutputsOff+0x11c>)
 8002852:	801a      	strh	r2, [r3, #0]
			//OUT_0_12_HPUMP_OFF;		//Output_2_Sum &= ~0b0000100000000000
			OUT_0_11_MAT_REV_OFF;		//Output_2_Sum &= ~0b0000010000000000
 8002854:	4b3e      	ldr	r3, [pc, #248]	@ (8002950 <AllOutputsOff+0x11c>)
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800285c:	b29a      	uxth	r2, r3
 800285e:	4b3c      	ldr	r3, [pc, #240]	@ (8002950 <AllOutputsOff+0x11c>)
 8002860:	801a      	strh	r2, [r3, #0]
			OUT_0_10_MAT_FWD_OFF;		//Output_2_Sum &= ~0b0000001000000000
 8002862:	4b3b      	ldr	r3, [pc, #236]	@ (8002950 <AllOutputsOff+0x11c>)
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800286a:	b29a      	uxth	r2, r3
 800286c:	4b38      	ldr	r3, [pc, #224]	@ (8002950 <AllOutputsOff+0x11c>)
 800286e:	801a      	strh	r2, [r3, #0]
			OUT_0_9_MAT_CL_UNCLAMP_OFF;	//Output_2_Sum &= ~0b0000000100000000
 8002870:	4b37      	ldr	r3, [pc, #220]	@ (8002950 <AllOutputsOff+0x11c>)
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002878:	b29a      	uxth	r2, r3
 800287a:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <AllOutputsOff+0x11c>)
 800287c:	801a      	strh	r2, [r3, #0]
			OUT_0_8_MAT_CL_CLAMP_OFF;	//Output_2_Sum &= ~0b0000000010000000
 800287e:	4b34      	ldr	r3, [pc, #208]	@ (8002950 <AllOutputsOff+0x11c>)
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002886:	b29a      	uxth	r2, r3
 8002888:	4b31      	ldr	r3, [pc, #196]	@ (8002950 <AllOutputsOff+0x11c>)
 800288a:	801a      	strh	r2, [r3, #0]
			OUT_0_7_CHIP_OFF;			//Output_2_Sum &= ~0b0000000001000000
 800288c:	4b30      	ldr	r3, [pc, #192]	@ (8002950 <AllOutputsOff+0x11c>)
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002894:	b29a      	uxth	r2, r3
 8002896:	4b2e      	ldr	r3, [pc, #184]	@ (8002950 <AllOutputsOff+0x11c>)
 8002898:	801a      	strh	r2, [r3, #0]
			OUT_0_6_SAW_CL_UNCLAMP_OFF;	//Output_2_Sum &= ~0b0000000000100000
 800289a:	4b2d      	ldr	r3, [pc, #180]	@ (8002950 <AllOutputsOff+0x11c>)
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	f023 0320 	bic.w	r3, r3, #32
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002950 <AllOutputsOff+0x11c>)
 80028a6:	801a      	strh	r2, [r3, #0]
			OUT_0_5_SAW_CL_CLAMP_OFF;	//Output_2_Sum &= ~0b0000000000010000
 80028a8:	4b29      	ldr	r3, [pc, #164]	@ (8002950 <AllOutputsOff+0x11c>)
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	f023 0310 	bic.w	r3, r3, #16
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	4b27      	ldr	r3, [pc, #156]	@ (8002950 <AllOutputsOff+0x11c>)
 80028b4:	801a      	strh	r2, [r3, #0]
			OUT_0_4_SAW_DOWN_OFF;		//Output_2_Sum &= ~0b0000000000001000
 80028b6:	4b26      	ldr	r3, [pc, #152]	@ (8002950 <AllOutputsOff+0x11c>)
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	f023 0308 	bic.w	r3, r3, #8
 80028be:	b29a      	uxth	r2, r3
 80028c0:	4b23      	ldr	r3, [pc, #140]	@ (8002950 <AllOutputsOff+0x11c>)
 80028c2:	801a      	strh	r2, [r3, #0]
			OUT_0_3_SAW_UP_OFF;			//Output_2_Sum &= ~0b0000000000000100
 80028c4:	4b22      	ldr	r3, [pc, #136]	@ (8002950 <AllOutputsOff+0x11c>)
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	f023 0304 	bic.w	r3, r3, #4
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	4b20      	ldr	r3, [pc, #128]	@ (8002950 <AllOutputsOff+0x11c>)
 80028d0:	801a      	strh	r2, [r3, #0]
			//OUT_0_2_COUNTER_OFF;		//Output_2_Sum &= ~0b0000000000000010
			OUT_0_1_SAW_OFF;			//Output_2_Sum &= ~0b0000000000000001
 80028d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002950 <AllOutputsOff+0x11c>)
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	f023 0301 	bic.w	r3, r3, #1
 80028da:	b29a      	uxth	r2, r3
 80028dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002950 <AllOutputsOff+0x11c>)
 80028de:	801a      	strh	r2, [r3, #0]
			osTimerStop(OTimer1Handle);
 80028e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002954 <AllOutputsOff+0x120>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f004 fb31 	bl	8006f4c <osTimerStop>
			osTimerStop(OTimer2Handle);
 80028ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002958 <AllOutputsOff+0x124>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f004 fb2c 	bl	8006f4c <osTimerStop>
			osTimerStop(OTimer3Handle);
 80028f4:	4b19      	ldr	r3, [pc, #100]	@ (800295c <AllOutputsOff+0x128>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f004 fb27 	bl	8006f4c <osTimerStop>
			osTimerStop(OTimer4Handle);
 80028fe:	4b18      	ldr	r3, [pc, #96]	@ (8002960 <AllOutputsOff+0x12c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f004 fb22 	bl	8006f4c <osTimerStop>
			osTimerStop(OTimer5Handle);
 8002908:	4b16      	ldr	r3, [pc, #88]	@ (8002964 <AllOutputsOff+0x130>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f004 fb1d 	bl	8006f4c <osTimerStop>
			osTimerStop(OTimer6Handle);
 8002912:	4b15      	ldr	r3, [pc, #84]	@ (8002968 <AllOutputsOff+0x134>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f004 fb18 	bl	8006f4c <osTimerStop>
			osTimerStop(OTimer7Handle);
 800291c:	4b13      	ldr	r3, [pc, #76]	@ (800296c <AllOutputsOff+0x138>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f004 fb13 	bl	8006f4c <osTimerStop>
			osTimerStop(OTimer8Handle);
 8002926:	4b12      	ldr	r3, [pc, #72]	@ (8002970 <AllOutputsOff+0x13c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f004 fb0e 	bl	8006f4c <osTimerStop>
			osTimerStop(OTimer9Handle);
 8002930:	4b10      	ldr	r3, [pc, #64]	@ (8002974 <AllOutputsOff+0x140>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f004 fb09 	bl	8006f4c <osTimerStop>
			osTimerStop(OTimer10Handle);
 800293a:	4b0f      	ldr	r3, [pc, #60]	@ (8002978 <AllOutputsOff+0x144>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f004 fb04 	bl	8006f4c <osTimerStop>
			CheckForBrokenSaw = 0;
 8002944:	4b0d      	ldr	r3, [pc, #52]	@ (800297c <AllOutputsOff+0x148>)
 8002946:	2200      	movs	r2, #0
 8002948:	701a      	strb	r2, [r3, #0]

}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	200002ac 	.word	0x200002ac
 8002954:	200002c8 	.word	0x200002c8
 8002958:	200002cc 	.word	0x200002cc
 800295c:	200002d0 	.word	0x200002d0
 8002960:	200002d4 	.word	0x200002d4
 8002964:	200002d8 	.word	0x200002d8
 8002968:	200002dc 	.word	0x200002dc
 800296c:	200002e0 	.word	0x200002e0
 8002970:	200002e4 	.word	0x200002e4
 8002974:	200002e8 	.word	0x200002e8
 8002978:	200002ec 	.word	0x200002ec
 800297c:	20000268 	.word	0x20000268

08002980 <ButtonRoutine>:

void ButtonRoutine(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
///////////////////////////////////////LEFT BUTTON DECREMENT
	if (IN_1_3_HMI_LEFT && (NominalPartCount != 0))
 8002984:	4b3a      	ldr	r3, [pc, #232]	@ (8002a70 <ButtonRoutine+0xf0>)
 8002986:	881b      	ldrh	r3, [r3, #0]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d125      	bne.n	80029dc <ButtonRoutine+0x5c>
 8002990:	4b38      	ldr	r3, [pc, #224]	@ (8002a74 <ButtonRoutine+0xf4>)
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d021      	beq.n	80029dc <ButtonRoutine+0x5c>
	{
		if (!LeftButtonPressed)
 8002998:	4b37      	ldr	r3, [pc, #220]	@ (8002a78 <ButtonRoutine+0xf8>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d108      	bne.n	80029b2 <ButtonRoutine+0x32>
		{
			LeftButtonPressed = 1;
 80029a0:	4b35      	ldr	r3, [pc, #212]	@ (8002a78 <ButtonRoutine+0xf8>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	701a      	strb	r2, [r3, #0]
			NominalPartCount--;
 80029a6:	4b33      	ldr	r3, [pc, #204]	@ (8002a74 <ButtonRoutine+0xf4>)
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	4b31      	ldr	r3, [pc, #196]	@ (8002a74 <ButtonRoutine+0xf4>)
 80029b0:	801a      	strh	r2, [r3, #0]
		}

		if (LeftButtonPressDuration == 0)
 80029b2:	4b32      	ldr	r3, [pc, #200]	@ (8002a7c <ButtonRoutine+0xfc>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d109      	bne.n	80029ce <ButtonRoutine+0x4e>
		{
			NominalPartCount--;
 80029ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002a74 <ButtonRoutine+0xf4>)
 80029bc:	881b      	ldrh	r3, [r3, #0]
 80029be:	3b01      	subs	r3, #1
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	4b2c      	ldr	r3, [pc, #176]	@ (8002a74 <ButtonRoutine+0xf4>)
 80029c4:	801a      	strh	r2, [r3, #0]
			LeftButtonPressDuration = BUTTON_HOLD_DELAY;
 80029c6:	4b2d      	ldr	r3, [pc, #180]	@ (8002a7c <ButtonRoutine+0xfc>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	701a      	strb	r2, [r3, #0]
		if (LeftButtonPressDuration == 0)
 80029cc:	e00c      	b.n	80029e8 <ButtonRoutine+0x68>
		}
		else
		{
			LeftButtonPressDuration--;
 80029ce:	4b2b      	ldr	r3, [pc, #172]	@ (8002a7c <ButtonRoutine+0xfc>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	4b29      	ldr	r3, [pc, #164]	@ (8002a7c <ButtonRoutine+0xfc>)
 80029d8:	701a      	strb	r2, [r3, #0]
		if (LeftButtonPressDuration == 0)
 80029da:	e005      	b.n	80029e8 <ButtonRoutine+0x68>
		}

	}
	else
	{
		LeftButtonPressDuration = BUTTON_PRESS_DELAY;
 80029dc:	4b27      	ldr	r3, [pc, #156]	@ (8002a7c <ButtonRoutine+0xfc>)
 80029de:	220a      	movs	r2, #10
 80029e0:	701a      	strb	r2, [r3, #0]
		LeftButtonPressed = 0;
 80029e2:	4b25      	ldr	r3, [pc, #148]	@ (8002a78 <ButtonRoutine+0xf8>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	701a      	strb	r2, [r3, #0]
	}

///////////////////////////////////////RIGHT BUTTON INCREMENT
	if (IN_1_1_HMI_RIGHT)
 80029e8:	4b21      	ldr	r3, [pc, #132]	@ (8002a70 <ButtonRoutine+0xf0>)
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d126      	bne.n	8002a42 <ButtonRoutine+0xc2>
	{
		if (!RightButtonPressed && (NominalPartCount <= 999))
 80029f4:	4b22      	ldr	r3, [pc, #136]	@ (8002a80 <ButtonRoutine+0x100>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10d      	bne.n	8002a18 <ButtonRoutine+0x98>
 80029fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002a74 <ButtonRoutine+0xf4>)
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a04:	d208      	bcs.n	8002a18 <ButtonRoutine+0x98>
		{
			RightButtonPressed = 1;
 8002a06:	4b1e      	ldr	r3, [pc, #120]	@ (8002a80 <ButtonRoutine+0x100>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	701a      	strb	r2, [r3, #0]
			NominalPartCount++;
 8002a0c:	4b19      	ldr	r3, [pc, #100]	@ (8002a74 <ButtonRoutine+0xf4>)
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	3301      	adds	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	4b17      	ldr	r3, [pc, #92]	@ (8002a74 <ButtonRoutine+0xf4>)
 8002a16:	801a      	strh	r2, [r3, #0]
		}

		if (RightButtonPressDuration == 0)
 8002a18:	4b1a      	ldr	r3, [pc, #104]	@ (8002a84 <ButtonRoutine+0x104>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d109      	bne.n	8002a34 <ButtonRoutine+0xb4>
		{
			NominalPartCount++;
 8002a20:	4b14      	ldr	r3, [pc, #80]	@ (8002a74 <ButtonRoutine+0xf4>)
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	3301      	adds	r3, #1
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	4b12      	ldr	r3, [pc, #72]	@ (8002a74 <ButtonRoutine+0xf4>)
 8002a2a:	801a      	strh	r2, [r3, #0]
			RightButtonPressDuration = BUTTON_HOLD_DELAY;
 8002a2c:	4b15      	ldr	r3, [pc, #84]	@ (8002a84 <ButtonRoutine+0x104>)
 8002a2e:	2201      	movs	r2, #1
 8002a30:	701a      	strb	r2, [r3, #0]
 8002a32:	e00c      	b.n	8002a4e <ButtonRoutine+0xce>
		}
		else
		{
			RightButtonPressDuration--;
 8002a34:	4b13      	ldr	r3, [pc, #76]	@ (8002a84 <ButtonRoutine+0x104>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	4b11      	ldr	r3, [pc, #68]	@ (8002a84 <ButtonRoutine+0x104>)
 8002a3e:	701a      	strb	r2, [r3, #0]
 8002a40:	e005      	b.n	8002a4e <ButtonRoutine+0xce>
		}

	}
	else
	{
		RightButtonPressDuration = BUTTON_PRESS_DELAY;
 8002a42:	4b10      	ldr	r3, [pc, #64]	@ (8002a84 <ButtonRoutine+0x104>)
 8002a44:	220a      	movs	r2, #10
 8002a46:	701a      	strb	r2, [r3, #0]
		RightButtonPressed = 0;
 8002a48:	4b0d      	ldr	r3, [pc, #52]	@ (8002a80 <ButtonRoutine+0x100>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	701a      	strb	r2, [r3, #0]
	}

///////////////////////////////////////CENTER BUTTON APPROVE
	if (IN_1_2_HMI_CENTER)
 8002a4e:	4b08      	ldr	r3, [pc, #32]	@ (8002a70 <ButtonRoutine+0xf0>)
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d105      	bne.n	8002a66 <ButtonRoutine+0xe6>
	{
		CenterButtonPressed = 1;
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a88 <ButtonRoutine+0x108>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	701a      	strb	r2, [r3, #0]
		LCD_Init();
 8002a60:	f7fe fb9c 	bl	800119c <LCD_Init>
	}
	else
	{
		CenterButtonPressed = 0;
	}
}
 8002a64:	e002      	b.n	8002a6c <ButtonRoutine+0xec>
		CenterButtonPressed = 0;
 8002a66:	4b08      	ldr	r3, [pc, #32]	@ (8002a88 <ButtonRoutine+0x108>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
}
 8002a6c:	bf00      	nop
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20000260 	.word	0x20000260
 8002a74:	20000002 	.word	0x20000002
 8002a78:	2000026d 	.word	0x2000026d
 8002a7c:	20000000 	.word	0x20000000
 8002a80:	2000026e 	.word	0x2000026e
 8002a84:	20000001 	.word	0x20000001
 8002a88:	2000026f 	.word	0x2000026f

08002a8c <UpdateLCDDisplay>:

void UpdateLCDDisplay(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
	LCD_Set_Cursor(1, 1);
 8002a90:	2101      	movs	r1, #1
 8002a92:	2001      	movs	r0, #1
 8002a94:	f7fe faae 	bl	8000ff4 <LCD_Set_Cursor>
	LCD_Write((uint8_t*)LCDBufferLine1, 16);
 8002a98:	2110      	movs	r1, #16
 8002a9a:	481a      	ldr	r0, [pc, #104]	@ (8002b04 <UpdateLCDDisplay+0x78>)
 8002a9c:	f7fe fae2 	bl	8001064 <LCD_Write>
	LCD_Set_Cursor(1, 2);
 8002aa0:	2102      	movs	r1, #2
 8002aa2:	2001      	movs	r0, #1
 8002aa4:	f7fe faa6 	bl	8000ff4 <LCD_Set_Cursor>
	LCD_Write((uint8_t*)LCDBufferLine2, 16);
 8002aa8:	2110      	movs	r1, #16
 8002aaa:	4817      	ldr	r0, [pc, #92]	@ (8002b08 <UpdateLCDDisplay+0x7c>)
 8002aac:	f7fe fada 	bl	8001064 <LCD_Write>
	if (BacklightColor == GREEN) LCD_SetRGB(0, 29, 0);
 8002ab0:	4b16      	ldr	r3, [pc, #88]	@ (8002b0c <UpdateLCDDisplay+0x80>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d105      	bne.n	8002ac4 <UpdateLCDDisplay+0x38>
 8002ab8:	2200      	movs	r2, #0
 8002aba:	211d      	movs	r1, #29
 8002abc:	2000      	movs	r0, #0
 8002abe:	f7fe fb01 	bl	80010c4 <LCD_SetRGB>
	else if (BacklightColor == RED) LCD_SetRGB(29, 0, 0);
	else if (BacklightColor == BLUE) LCD_SetRGB(0, 0, 29);
	else if (BacklightColor == WHITE) LCD_SetRGB(29, 29, 29);
}
 8002ac2:	e01c      	b.n	8002afe <UpdateLCDDisplay+0x72>
	else if (BacklightColor == RED) LCD_SetRGB(29, 0, 0);
 8002ac4:	4b11      	ldr	r3, [pc, #68]	@ (8002b0c <UpdateLCDDisplay+0x80>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d105      	bne.n	8002ad8 <UpdateLCDDisplay+0x4c>
 8002acc:	2200      	movs	r2, #0
 8002ace:	2100      	movs	r1, #0
 8002ad0:	201d      	movs	r0, #29
 8002ad2:	f7fe faf7 	bl	80010c4 <LCD_SetRGB>
}
 8002ad6:	e012      	b.n	8002afe <UpdateLCDDisplay+0x72>
	else if (BacklightColor == BLUE) LCD_SetRGB(0, 0, 29);
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b0c <UpdateLCDDisplay+0x80>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d105      	bne.n	8002aec <UpdateLCDDisplay+0x60>
 8002ae0:	221d      	movs	r2, #29
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	f7fe faed 	bl	80010c4 <LCD_SetRGB>
}
 8002aea:	e008      	b.n	8002afe <UpdateLCDDisplay+0x72>
	else if (BacklightColor == WHITE) LCD_SetRGB(29, 29, 29);
 8002aec:	4b07      	ldr	r3, [pc, #28]	@ (8002b0c <UpdateLCDDisplay+0x80>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d104      	bne.n	8002afe <UpdateLCDDisplay+0x72>
 8002af4:	221d      	movs	r2, #29
 8002af6:	211d      	movs	r1, #29
 8002af8:	201d      	movs	r0, #29
 8002afa:	f7fe fae3 	bl	80010c4 <LCD_SetRGB>
}
 8002afe:	bf00      	nop
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20000274 	.word	0x20000274
 8002b08:	20000290 	.word	0x20000290
 8002b0c:	2000000b 	.word	0x2000000b

08002b10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08a      	sub	sp, #40	@ 0x28
 8002b14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b16:	f107 0314 	add.w	r3, r7, #20
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	605a      	str	r2, [r3, #4]
 8002b20:	609a      	str	r2, [r3, #8]
 8002b22:	60da      	str	r2, [r3, #12]
 8002b24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	4b42      	ldr	r3, [pc, #264]	@ (8002c34 <MX_GPIO_Init+0x124>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2e:	4a41      	ldr	r2, [pc, #260]	@ (8002c34 <MX_GPIO_Init+0x124>)
 8002b30:	f043 0304 	orr.w	r3, r3, #4
 8002b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b36:	4b3f      	ldr	r3, [pc, #252]	@ (8002c34 <MX_GPIO_Init+0x124>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	4b3b      	ldr	r3, [pc, #236]	@ (8002c34 <MX_GPIO_Init+0x124>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4a:	4a3a      	ldr	r2, [pc, #232]	@ (8002c34 <MX_GPIO_Init+0x124>)
 8002b4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b52:	4b38      	ldr	r3, [pc, #224]	@ (8002c34 <MX_GPIO_Init+0x124>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60bb      	str	r3, [r7, #8]
 8002b62:	4b34      	ldr	r3, [pc, #208]	@ (8002c34 <MX_GPIO_Init+0x124>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b66:	4a33      	ldr	r2, [pc, #204]	@ (8002c34 <MX_GPIO_Init+0x124>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b6e:	4b31      	ldr	r3, [pc, #196]	@ (8002c34 <MX_GPIO_Init+0x124>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	607b      	str	r3, [r7, #4]
 8002b7e:	4b2d      	ldr	r3, [pc, #180]	@ (8002c34 <MX_GPIO_Init+0x124>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b82:	4a2c      	ldr	r2, [pc, #176]	@ (8002c34 <MX_GPIO_Init+0x124>)
 8002b84:	f043 0302 	orr.w	r3, r3, #2
 8002b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b8a:	4b2a      	ldr	r3, [pc, #168]	@ (8002c34 <MX_GPIO_Init+0x124>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	607b      	str	r3, [r7, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_RESET);
 8002b96:	2200      	movs	r2, #0
 8002b98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b9c:	4826      	ldr	r0, [pc, #152]	@ (8002c38 <MX_GPIO_Init+0x128>)
 8002b9e:	f001 fd7b 	bl	8004698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_Reset_Pin|SPI1_CS_Pin, GPIO_PIN_SET);
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	2112      	movs	r1, #18
 8002ba6:	4825      	ldr	r0, [pc, #148]	@ (8002c3c <MX_GPIO_Init+0x12c>)
 8002ba8:	f001 fd76 	bl	8004698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PULSE_GPIO_Port, PULSE_Pin, GPIO_PIN_RESET);
 8002bac:	2200      	movs	r2, #0
 8002bae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002bb2:	4823      	ldr	r0, [pc, #140]	@ (8002c40 <MX_GPIO_Init+0x130>)
 8002bb4:	f001 fd70 	bl	8004698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Status_LED_Pin;
 8002bb8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Status_LED_GPIO_Port, &GPIO_InitStruct);
 8002bca:	f107 0314 	add.w	r3, r7, #20
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4819      	ldr	r0, [pc, #100]	@ (8002c38 <MX_GPIO_Init+0x128>)
 8002bd2:	f001 faf9 	bl	80041c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_Reset_Pin|SPI1_CS_Pin;
 8002bd6:	2312      	movs	r3, #18
 8002bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002be2:	2302      	movs	r3, #2
 8002be4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be6:	f107 0314 	add.w	r3, r7, #20
 8002bea:	4619      	mov	r1, r3
 8002bec:	4813      	ldr	r0, [pc, #76]	@ (8002c3c <MX_GPIO_Init+0x12c>)
 8002bee:	f001 faeb 	bl	80041c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bf6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c00:	f107 0314 	add.w	r3, r7, #20
 8002c04:	4619      	mov	r1, r3
 8002c06:	480e      	ldr	r0, [pc, #56]	@ (8002c40 <MX_GPIO_Init+0x130>)
 8002c08:	f001 fade 	bl	80041c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_Pin;
 8002c0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c12:	2301      	movs	r3, #1
 8002c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PULSE_GPIO_Port, &GPIO_InitStruct);
 8002c1e:	f107 0314 	add.w	r3, r7, #20
 8002c22:	4619      	mov	r1, r3
 8002c24:	4806      	ldr	r0, [pc, #24]	@ (8002c40 <MX_GPIO_Init+0x130>)
 8002c26:	f001 facf 	bl	80041c8 <HAL_GPIO_Init>

}
 8002c2a:	bf00      	nop
 8002c2c:	3728      	adds	r7, #40	@ 0x28
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40023800 	.word	0x40023800
 8002c38:	40020800 	.word	0x40020800
 8002c3c:	40020000 	.word	0x40020000
 8002c40:	40020400 	.word	0x40020400

08002c44 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c48:	4b12      	ldr	r3, [pc, #72]	@ (8002c94 <MX_I2C1_Init+0x50>)
 8002c4a:	4a13      	ldr	r2, [pc, #76]	@ (8002c98 <MX_I2C1_Init+0x54>)
 8002c4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002c4e:	4b11      	ldr	r3, [pc, #68]	@ (8002c94 <MX_I2C1_Init+0x50>)
 8002c50:	4a12      	ldr	r2, [pc, #72]	@ (8002c9c <MX_I2C1_Init+0x58>)
 8002c52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c54:	4b0f      	ldr	r3, [pc, #60]	@ (8002c94 <MX_I2C1_Init+0x50>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c94 <MX_I2C1_Init+0x50>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c60:	4b0c      	ldr	r3, [pc, #48]	@ (8002c94 <MX_I2C1_Init+0x50>)
 8002c62:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c68:	4b0a      	ldr	r3, [pc, #40]	@ (8002c94 <MX_I2C1_Init+0x50>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002c6e:	4b09      	ldr	r3, [pc, #36]	@ (8002c94 <MX_I2C1_Init+0x50>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c74:	4b07      	ldr	r3, [pc, #28]	@ (8002c94 <MX_I2C1_Init+0x50>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c7a:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <MX_I2C1_Init+0x50>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c80:	4804      	ldr	r0, [pc, #16]	@ (8002c94 <MX_I2C1_Init+0x50>)
 8002c82:	f001 fd23 	bl	80046cc <HAL_I2C_Init>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002c8c:	f000 f90c 	bl	8002ea8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c90:	bf00      	nop
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	20000a34 	.word	0x20000a34
 8002c98:	40005400 	.word	0x40005400
 8002c9c:	000186a0 	.word	0x000186a0

08002ca0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	@ 0x28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca8:	f107 0314 	add.w	r3, r7, #20
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a19      	ldr	r2, [pc, #100]	@ (8002d24 <HAL_I2C_MspInit+0x84>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d12b      	bne.n	8002d1a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	4b18      	ldr	r3, [pc, #96]	@ (8002d28 <HAL_I2C_MspInit+0x88>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cca:	4a17      	ldr	r2, [pc, #92]	@ (8002d28 <HAL_I2C_MspInit+0x88>)
 8002ccc:	f043 0302 	orr.w	r3, r3, #2
 8002cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cd2:	4b15      	ldr	r3, [pc, #84]	@ (8002d28 <HAL_I2C_MspInit+0x88>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	613b      	str	r3, [r7, #16]
 8002cdc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cde:	23c0      	movs	r3, #192	@ 0xc0
 8002ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ce2:	2312      	movs	r3, #18
 8002ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cea:	2303      	movs	r3, #3
 8002cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cee:	2304      	movs	r3, #4
 8002cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf2:	f107 0314 	add.w	r3, r7, #20
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	480c      	ldr	r0, [pc, #48]	@ (8002d2c <HAL_I2C_MspInit+0x8c>)
 8002cfa:	f001 fa65 	bl	80041c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	4b09      	ldr	r3, [pc, #36]	@ (8002d28 <HAL_I2C_MspInit+0x88>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d06:	4a08      	ldr	r2, [pc, #32]	@ (8002d28 <HAL_I2C_MspInit+0x88>)
 8002d08:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d0e:	4b06      	ldr	r3, [pc, #24]	@ (8002d28 <HAL_I2C_MspInit+0x88>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002d1a:	bf00      	nop
 8002d1c:	3728      	adds	r7, #40	@ 0x28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40005400 	.word	0x40005400
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	40020400 	.word	0x40020400

08002d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d36:	f000 fb55 	bl	80033e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d3a:	f000 f839 	bl	8002db0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d3e:	f7ff fee7 	bl	8002b10 <MX_GPIO_Init>
  MX_DMA_Init();
 8002d42:	f7fe fae9 	bl	8001318 <MX_DMA_Init>
  MX_ADC1_Init();
 8002d46:	f7fe fa51 	bl	80011ec <MX_ADC1_Init>
  MX_I2C1_Init();
 8002d4a:	f7ff ff7b 	bl	8002c44 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002d4e:	f000 fa57 	bl	8003200 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //Send configuration to PCA to output via I2C command (set to OUTPUT and output state to OFF)
  HAL_I2C_Master_Transmit(&hi2c1, OUTPUT_MODULE_ADDR_1, Config, 3, 10);
 8002d52:	230a      	movs	r3, #10
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	2303      	movs	r3, #3
 8002d58:	4a12      	ldr	r2, [pc, #72]	@ (8002da4 <main+0x74>)
 8002d5a:	2148      	movs	r1, #72	@ 0x48
 8002d5c:	4812      	ldr	r0, [pc, #72]	@ (8002da8 <main+0x78>)
 8002d5e:	f001 fdf9 	bl	8004954 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c1, OUTPUT_MODULE_ADDR_2, Config, 3, 10);
 8002d62:	230a      	movs	r3, #10
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	2303      	movs	r3, #3
 8002d68:	4a0e      	ldr	r2, [pc, #56]	@ (8002da4 <main+0x74>)
 8002d6a:	2146      	movs	r1, #70	@ 0x46
 8002d6c:	480e      	ldr	r0, [pc, #56]	@ (8002da8 <main+0x78>)
 8002d6e:	f001 fdf1 	bl	8004954 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c1, OUTPUT_MODULE_ADDR_1, Data, 3, 10);
 8002d72:	230a      	movs	r3, #10
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	2303      	movs	r3, #3
 8002d78:	4a0c      	ldr	r2, [pc, #48]	@ (8002dac <main+0x7c>)
 8002d7a:	2148      	movs	r1, #72	@ 0x48
 8002d7c:	480a      	ldr	r0, [pc, #40]	@ (8002da8 <main+0x78>)
 8002d7e:	f001 fde9 	bl	8004954 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c1, OUTPUT_MODULE_ADDR_2, Data, 3, 10);
 8002d82:	230a      	movs	r3, #10
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	2303      	movs	r3, #3
 8002d88:	4a08      	ldr	r2, [pc, #32]	@ (8002dac <main+0x7c>)
 8002d8a:	2146      	movs	r1, #70	@ 0x46
 8002d8c:	4806      	ldr	r0, [pc, #24]	@ (8002da8 <main+0x78>)
 8002d8e:	f001 fde1 	bl	8004954 <HAL_I2C_Master_Transmit>

  LCD_Init();
 8002d92:	f7fe fa03 	bl	800119c <LCD_Init>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002d96:	f7fe fb13 	bl	80013c0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002d9a:	f003 fff7 	bl	8006d8c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8002d9e:	bf00      	nop
 8002da0:	e7fd      	b.n	8002d9e <main+0x6e>
 8002da2:	bf00      	nop
 8002da4:	20000010 	.word	0x20000010
 8002da8:	20000a34 	.word	0x20000a34
 8002dac:	2000000c 	.word	0x2000000c

08002db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b094      	sub	sp, #80	@ 0x50
 8002db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002db6:	f107 0320 	add.w	r3, r7, #32
 8002dba:	2230      	movs	r2, #48	@ 0x30
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f008 fbb3 	bl	800b52a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dc4:	f107 030c 	add.w	r3, r7, #12
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	609a      	str	r2, [r3, #8]
 8002dd0:	60da      	str	r2, [r3, #12]
 8002dd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60bb      	str	r3, [r7, #8]
 8002dd8:	4b28      	ldr	r3, [pc, #160]	@ (8002e7c <SystemClock_Config+0xcc>)
 8002dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ddc:	4a27      	ldr	r2, [pc, #156]	@ (8002e7c <SystemClock_Config+0xcc>)
 8002dde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002de2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002de4:	4b25      	ldr	r3, [pc, #148]	@ (8002e7c <SystemClock_Config+0xcc>)
 8002de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002df0:	2300      	movs	r3, #0
 8002df2:	607b      	str	r3, [r7, #4]
 8002df4:	4b22      	ldr	r3, [pc, #136]	@ (8002e80 <SystemClock_Config+0xd0>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002dfc:	4a20      	ldr	r2, [pc, #128]	@ (8002e80 <SystemClock_Config+0xd0>)
 8002dfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e02:	6013      	str	r3, [r2, #0]
 8002e04:	4b1e      	ldr	r3, [pc, #120]	@ (8002e80 <SystemClock_Config+0xd0>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002e0c:	607b      	str	r3, [r7, #4]
 8002e0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e10:	2301      	movs	r3, #1
 8002e12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e18:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e1e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002e24:	2319      	movs	r3, #25
 8002e26:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002e28:	23a8      	movs	r3, #168	@ 0xa8
 8002e2a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002e30:	2307      	movs	r3, #7
 8002e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e34:	f107 0320 	add.w	r3, r7, #32
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f002 fc41 	bl	80056c0 <HAL_RCC_OscConfig>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002e44:	f000 f830 	bl	8002ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e48:	230f      	movs	r3, #15
 8002e4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e5e:	f107 030c 	add.w	r3, r7, #12
 8002e62:	2102      	movs	r1, #2
 8002e64:	4618      	mov	r0, r3
 8002e66:	f002 fea3 	bl	8005bb0 <HAL_RCC_ClockConfig>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002e70:	f000 f81a 	bl	8002ea8 <Error_Handler>
  }
}
 8002e74:	bf00      	nop
 8002e76:	3750      	adds	r7, #80	@ 0x50
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	40007000 	.word	0x40007000

08002e84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a04      	ldr	r2, [pc, #16]	@ (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d101      	bne.n	8002e9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002e96:	f000 fac7 	bl	8003428 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40010000 	.word	0x40010000

08002ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002eac:	b672      	cpsid	i
}
 8002eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002eb0:	bf00      	nop
 8002eb2:	e7fd      	b.n	8002eb0 <Error_Handler+0x8>

08002eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	607b      	str	r3, [r7, #4]
 8002ebe:	4b12      	ldr	r3, [pc, #72]	@ (8002f08 <HAL_MspInit+0x54>)
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec2:	4a11      	ldr	r2, [pc, #68]	@ (8002f08 <HAL_MspInit+0x54>)
 8002ec4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ec8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eca:	4b0f      	ldr	r3, [pc, #60]	@ (8002f08 <HAL_MspInit+0x54>)
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ece:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ed2:	607b      	str	r3, [r7, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	603b      	str	r3, [r7, #0]
 8002eda:	4b0b      	ldr	r3, [pc, #44]	@ (8002f08 <HAL_MspInit+0x54>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ede:	4a0a      	ldr	r2, [pc, #40]	@ (8002f08 <HAL_MspInit+0x54>)
 8002ee0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ee4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ee6:	4b08      	ldr	r3, [pc, #32]	@ (8002f08 <HAL_MspInit+0x54>)
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	210f      	movs	r1, #15
 8002ef6:	f06f 0001 	mvn.w	r0, #1
 8002efa:	f000 fdf3 	bl	8003ae4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40023800 	.word	0x40023800

08002f0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08c      	sub	sp, #48	@ 0x30
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	60bb      	str	r3, [r7, #8]
 8002f20:	4b2e      	ldr	r3, [pc, #184]	@ (8002fdc <HAL_InitTick+0xd0>)
 8002f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f24:	4a2d      	ldr	r2, [pc, #180]	@ (8002fdc <HAL_InitTick+0xd0>)
 8002f26:	f043 0301 	orr.w	r3, r3, #1
 8002f2a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f2c:	4b2b      	ldr	r3, [pc, #172]	@ (8002fdc <HAL_InitTick+0xd0>)
 8002f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002f38:	f107 020c 	add.w	r2, r7, #12
 8002f3c:	f107 0310 	add.w	r3, r7, #16
 8002f40:	4611      	mov	r1, r2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f003 f814 	bl	8005f70 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002f48:	f002 fffe 	bl	8005f48 <HAL_RCC_GetPCLK2Freq>
 8002f4c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f50:	4a23      	ldr	r2, [pc, #140]	@ (8002fe0 <HAL_InitTick+0xd4>)
 8002f52:	fba2 2303 	umull	r2, r3, r2, r3
 8002f56:	0c9b      	lsrs	r3, r3, #18
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002f5c:	4b21      	ldr	r3, [pc, #132]	@ (8002fe4 <HAL_InitTick+0xd8>)
 8002f5e:	4a22      	ldr	r2, [pc, #136]	@ (8002fe8 <HAL_InitTick+0xdc>)
 8002f60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002f62:	4b20      	ldr	r3, [pc, #128]	@ (8002fe4 <HAL_InitTick+0xd8>)
 8002f64:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002f68:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002f6a:	4a1e      	ldr	r2, [pc, #120]	@ (8002fe4 <HAL_InitTick+0xd8>)
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002f70:	4b1c      	ldr	r3, [pc, #112]	@ (8002fe4 <HAL_InitTick+0xd8>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f76:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe4 <HAL_InitTick+0xd8>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f7c:	4b19      	ldr	r3, [pc, #100]	@ (8002fe4 <HAL_InitTick+0xd8>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002f82:	4818      	ldr	r0, [pc, #96]	@ (8002fe4 <HAL_InitTick+0xd8>)
 8002f84:	f003 f826 	bl	8005fd4 <HAL_TIM_Base_Init>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002f8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d11b      	bne.n	8002fce <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002f96:	4813      	ldr	r0, [pc, #76]	@ (8002fe4 <HAL_InitTick+0xd8>)
 8002f98:	f003 f876 	bl	8006088 <HAL_TIM_Base_Start_IT>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002fa2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d111      	bne.n	8002fce <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002faa:	2019      	movs	r0, #25
 8002fac:	f000 fdb6 	bl	8003b1c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b0f      	cmp	r3, #15
 8002fb4:	d808      	bhi.n	8002fc8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	2019      	movs	r0, #25
 8002fbc:	f000 fd92 	bl	8003ae4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8002fec <HAL_InitTick+0xe0>)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	e002      	b.n	8002fce <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002fce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3730      	adds	r7, #48	@ 0x30
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	431bde83 	.word	0x431bde83
 8002fe4:	20000a88 	.word	0x20000a88
 8002fe8:	40010000 	.word	0x40010000
 8002fec:	20000018 	.word	0x20000018

08002ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ff4:	bf00      	nop
 8002ff6:	e7fd      	b.n	8002ff4 <NMI_Handler+0x4>

08002ff8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ffc:	bf00      	nop
 8002ffe:	e7fd      	b.n	8002ffc <HardFault_Handler+0x4>

08003000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003004:	bf00      	nop
 8003006:	e7fd      	b.n	8003004 <MemManage_Handler+0x4>

08003008 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800300c:	bf00      	nop
 800300e:	e7fd      	b.n	800300c <BusFault_Handler+0x4>

08003010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003014:	bf00      	nop
 8003016:	e7fd      	b.n	8003014 <UsageFault_Handler+0x4>

08003018 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800301c:	bf00      	nop
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
	...

08003028 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800302c:	4802      	ldr	r0, [pc, #8]	@ (8003038 <DMA1_Stream6_IRQHandler+0x10>)
 800302e:	f000 fe8f 	bl	8003d50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003032:	bf00      	nop
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	20000b1c 	.word	0x20000b1c

0800303c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003040:	4802      	ldr	r0, [pc, #8]	@ (800304c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003042:	f003 f883 	bl	800614c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20000a88 	.word	0x20000a88

08003050 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
	return 1;
 8003054:	2301      	movs	r3, #1
}
 8003056:	4618      	mov	r0, r3
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <_kill>:

int _kill(int pid, int sig)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800306a:	f008 fb07 	bl	800b67c <__errno>
 800306e:	4603      	mov	r3, r0
 8003070:	2216      	movs	r2, #22
 8003072:	601a      	str	r2, [r3, #0]
	return -1;
 8003074:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <_exit>:

void _exit (int status)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003088:	f04f 31ff 	mov.w	r1, #4294967295
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff ffe7 	bl	8003060 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003092:	bf00      	nop
 8003094:	e7fd      	b.n	8003092 <_exit+0x12>

08003096 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b086      	sub	sp, #24
 800309a:	af00      	add	r7, sp, #0
 800309c:	60f8      	str	r0, [r7, #12]
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030a2:	2300      	movs	r3, #0
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	e00a      	b.n	80030be <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80030a8:	f3af 8000 	nop.w
 80030ac:	4601      	mov	r1, r0
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	60ba      	str	r2, [r7, #8]
 80030b4:	b2ca      	uxtb	r2, r1
 80030b6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	3301      	adds	r3, #1
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	dbf0      	blt.n	80030a8 <_read+0x12>
	}

return len;
 80030c6:	687b      	ldr	r3, [r7, #4]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030dc:	2300      	movs	r3, #0
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	e009      	b.n	80030f6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	60ba      	str	r2, [r7, #8]
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	3301      	adds	r3, #1
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	dbf1      	blt.n	80030e2 <_write+0x12>
	}
	return len;
 80030fe:	687b      	ldr	r3, [r7, #4]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <_close>:

int _close(int file)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
	return -1;
 8003110:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003114:	4618      	mov	r0, r3
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003130:	605a      	str	r2, [r3, #4]
	return 0;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <_isatty>:

int _isatty(int file)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
	return 1;
 8003148:	2301      	movs	r3, #1
}
 800314a:	4618      	mov	r0, r3
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003156:	b480      	push	{r7}
 8003158:	b085      	sub	sp, #20
 800315a:	af00      	add	r7, sp, #0
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	607a      	str	r2, [r7, #4]
	return 0;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003178:	4a14      	ldr	r2, [pc, #80]	@ (80031cc <_sbrk+0x5c>)
 800317a:	4b15      	ldr	r3, [pc, #84]	@ (80031d0 <_sbrk+0x60>)
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003184:	4b13      	ldr	r3, [pc, #76]	@ (80031d4 <_sbrk+0x64>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d102      	bne.n	8003192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800318c:	4b11      	ldr	r3, [pc, #68]	@ (80031d4 <_sbrk+0x64>)
 800318e:	4a12      	ldr	r2, [pc, #72]	@ (80031d8 <_sbrk+0x68>)
 8003190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003192:	4b10      	ldr	r3, [pc, #64]	@ (80031d4 <_sbrk+0x64>)
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4413      	add	r3, r2
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	429a      	cmp	r2, r3
 800319e:	d207      	bcs.n	80031b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031a0:	f008 fa6c 	bl	800b67c <__errno>
 80031a4:	4603      	mov	r3, r0
 80031a6:	220c      	movs	r2, #12
 80031a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031aa:	f04f 33ff 	mov.w	r3, #4294967295
 80031ae:	e009      	b.n	80031c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031b0:	4b08      	ldr	r3, [pc, #32]	@ (80031d4 <_sbrk+0x64>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031b6:	4b07      	ldr	r3, [pc, #28]	@ (80031d4 <_sbrk+0x64>)
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4413      	add	r3, r2
 80031be:	4a05      	ldr	r2, [pc, #20]	@ (80031d4 <_sbrk+0x64>)
 80031c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031c2:	68fb      	ldr	r3, [r7, #12]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	20010000 	.word	0x20010000
 80031d0:	00000400 	.word	0x00000400
 80031d4:	20000ad0 	.word	0x20000ad0
 80031d8:	20004b60 	.word	0x20004b60

080031dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031e0:	4b06      	ldr	r3, [pc, #24]	@ (80031fc <SystemInit+0x20>)
 80031e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e6:	4a05      	ldr	r2, [pc, #20]	@ (80031fc <SystemInit+0x20>)
 80031e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031f0:	bf00      	nop
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003204:	4b11      	ldr	r3, [pc, #68]	@ (800324c <MX_USART2_UART_Init+0x4c>)
 8003206:	4a12      	ldr	r2, [pc, #72]	@ (8003250 <MX_USART2_UART_Init+0x50>)
 8003208:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800320a:	4b10      	ldr	r3, [pc, #64]	@ (800324c <MX_USART2_UART_Init+0x4c>)
 800320c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003210:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003212:	4b0e      	ldr	r3, [pc, #56]	@ (800324c <MX_USART2_UART_Init+0x4c>)
 8003214:	2200      	movs	r2, #0
 8003216:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003218:	4b0c      	ldr	r3, [pc, #48]	@ (800324c <MX_USART2_UART_Init+0x4c>)
 800321a:	2200      	movs	r2, #0
 800321c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800321e:	4b0b      	ldr	r3, [pc, #44]	@ (800324c <MX_USART2_UART_Init+0x4c>)
 8003220:	2200      	movs	r2, #0
 8003222:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003224:	4b09      	ldr	r3, [pc, #36]	@ (800324c <MX_USART2_UART_Init+0x4c>)
 8003226:	220c      	movs	r2, #12
 8003228:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800322a:	4b08      	ldr	r3, [pc, #32]	@ (800324c <MX_USART2_UART_Init+0x4c>)
 800322c:	2200      	movs	r2, #0
 800322e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003230:	4b06      	ldr	r3, [pc, #24]	@ (800324c <MX_USART2_UART_Init+0x4c>)
 8003232:	2200      	movs	r2, #0
 8003234:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003236:	4805      	ldr	r0, [pc, #20]	@ (800324c <MX_USART2_UART_Init+0x4c>)
 8003238:	f003 f940 	bl	80064bc <HAL_UART_Init>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003242:	f7ff fe31 	bl	8002ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003246:	bf00      	nop
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20000ad4 	.word	0x20000ad4
 8003250:	40004400 	.word	0x40004400

08003254 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08a      	sub	sp, #40	@ 0x28
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800325c:	f107 0314 	add.w	r3, r7, #20
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	60da      	str	r2, [r3, #12]
 800326a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a31      	ldr	r2, [pc, #196]	@ (8003338 <HAL_UART_MspInit+0xe4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d15b      	bne.n	800332e <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	4b30      	ldr	r3, [pc, #192]	@ (800333c <HAL_UART_MspInit+0xe8>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	4a2f      	ldr	r2, [pc, #188]	@ (800333c <HAL_UART_MspInit+0xe8>)
 8003280:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003284:	6413      	str	r3, [r2, #64]	@ 0x40
 8003286:	4b2d      	ldr	r3, [pc, #180]	@ (800333c <HAL_UART_MspInit+0xe8>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	4b29      	ldr	r3, [pc, #164]	@ (800333c <HAL_UART_MspInit+0xe8>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329a:	4a28      	ldr	r2, [pc, #160]	@ (800333c <HAL_UART_MspInit+0xe8>)
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032a2:	4b26      	ldr	r3, [pc, #152]	@ (800333c <HAL_UART_MspInit+0xe8>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80032ae:	230c      	movs	r3, #12
 80032b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b2:	2302      	movs	r3, #2
 80032b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032b6:	2301      	movs	r3, #1
 80032b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ba:	2303      	movs	r3, #3
 80032bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032be:	2307      	movs	r3, #7
 80032c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c2:	f107 0314 	add.w	r3, r7, #20
 80032c6:	4619      	mov	r1, r3
 80032c8:	481d      	ldr	r0, [pc, #116]	@ (8003340 <HAL_UART_MspInit+0xec>)
 80032ca:	f000 ff7d 	bl	80041c8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80032ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003344 <HAL_UART_MspInit+0xf0>)
 80032d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003348 <HAL_UART_MspInit+0xf4>)
 80032d2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80032d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003344 <HAL_UART_MspInit+0xf0>)
 80032d6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80032da:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032dc:	4b19      	ldr	r3, [pc, #100]	@ (8003344 <HAL_UART_MspInit+0xf0>)
 80032de:	2240      	movs	r2, #64	@ 0x40
 80032e0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032e2:	4b18      	ldr	r3, [pc, #96]	@ (8003344 <HAL_UART_MspInit+0xf0>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032e8:	4b16      	ldr	r3, [pc, #88]	@ (8003344 <HAL_UART_MspInit+0xf0>)
 80032ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032ee:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032f0:	4b14      	ldr	r3, [pc, #80]	@ (8003344 <HAL_UART_MspInit+0xf0>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032f6:	4b13      	ldr	r3, [pc, #76]	@ (8003344 <HAL_UART_MspInit+0xf0>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 80032fc:	4b11      	ldr	r3, [pc, #68]	@ (8003344 <HAL_UART_MspInit+0xf0>)
 80032fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003302:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003304:	4b0f      	ldr	r3, [pc, #60]	@ (8003344 <HAL_UART_MspInit+0xf0>)
 8003306:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800330a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800330c:	4b0d      	ldr	r3, [pc, #52]	@ (8003344 <HAL_UART_MspInit+0xf0>)
 800330e:	2200      	movs	r2, #0
 8003310:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003312:	480c      	ldr	r0, [pc, #48]	@ (8003344 <HAL_UART_MspInit+0xf0>)
 8003314:	f000 fc10 	bl	8003b38 <HAL_DMA_Init>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800331e:	f7ff fdc3 	bl	8002ea8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a07      	ldr	r2, [pc, #28]	@ (8003344 <HAL_UART_MspInit+0xf0>)
 8003326:	639a      	str	r2, [r3, #56]	@ 0x38
 8003328:	4a06      	ldr	r2, [pc, #24]	@ (8003344 <HAL_UART_MspInit+0xf0>)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800332e:	bf00      	nop
 8003330:	3728      	adds	r7, #40	@ 0x28
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40004400 	.word	0x40004400
 800333c:	40023800 	.word	0x40023800
 8003340:	40020000 	.word	0x40020000
 8003344:	20000b1c 	.word	0x20000b1c
 8003348:	400260a0 	.word	0x400260a0

0800334c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a0a      	ldr	r2, [pc, #40]	@ (8003384 <HAL_UART_MspDeInit+0x38>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d10e      	bne.n	800337c <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800335e:	4b0a      	ldr	r3, [pc, #40]	@ (8003388 <HAL_UART_MspDeInit+0x3c>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003362:	4a09      	ldr	r2, [pc, #36]	@ (8003388 <HAL_UART_MspDeInit+0x3c>)
 8003364:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003368:	6413      	str	r3, [r2, #64]	@ 0x40

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800336a:	210c      	movs	r1, #12
 800336c:	4807      	ldr	r0, [pc, #28]	@ (800338c <HAL_UART_MspDeInit+0x40>)
 800336e:	f001 f8af 	bl	80044d0 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003376:	4618      	mov	r0, r3
 8003378:	f000 fc8c 	bl	8003c94 <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 800337c:	bf00      	nop
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40004400 	.word	0x40004400
 8003388:	40023800 	.word	0x40023800
 800338c:	40020000 	.word	0x40020000

08003390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003390:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80033c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003394:	480d      	ldr	r0, [pc, #52]	@ (80033cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003396:	490e      	ldr	r1, [pc, #56]	@ (80033d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003398:	4a0e      	ldr	r2, [pc, #56]	@ (80033d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800339a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800339c:	e002      	b.n	80033a4 <LoopCopyDataInit>

0800339e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800339e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033a2:	3304      	adds	r3, #4

080033a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033a8:	d3f9      	bcc.n	800339e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033aa:	4a0b      	ldr	r2, [pc, #44]	@ (80033d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80033ac:	4c0b      	ldr	r4, [pc, #44]	@ (80033dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80033ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033b0:	e001      	b.n	80033b6 <LoopFillZerobss>

080033b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033b4:	3204      	adds	r2, #4

080033b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033b8:	d3fb      	bcc.n	80033b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80033ba:	f7ff ff0f 	bl	80031dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033be:	f008 f963 	bl	800b688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033c2:	f7ff fcb5 	bl	8002d30 <main>
  bx  lr    
 80033c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80033c8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80033cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033d0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80033d4:	0800f448 	.word	0x0800f448
  ldr r2, =_sbss
 80033d8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80033dc:	20004b5c 	.word	0x20004b5c

080033e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033e0:	e7fe      	b.n	80033e0 <ADC_IRQHandler>
	...

080033e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003424 <HAL_Init+0x40>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003424 <HAL_Init+0x40>)
 80033ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003424 <HAL_Init+0x40>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a0a      	ldr	r2, [pc, #40]	@ (8003424 <HAL_Init+0x40>)
 80033fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003400:	4b08      	ldr	r3, [pc, #32]	@ (8003424 <HAL_Init+0x40>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a07      	ldr	r2, [pc, #28]	@ (8003424 <HAL_Init+0x40>)
 8003406:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800340a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800340c:	2003      	movs	r0, #3
 800340e:	f000 fb5e 	bl	8003ace <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003412:	200f      	movs	r0, #15
 8003414:	f7ff fd7a 	bl	8002f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003418:	f7ff fd4c 	bl	8002eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40023c00 	.word	0x40023c00

08003428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800342c:	4b06      	ldr	r3, [pc, #24]	@ (8003448 <HAL_IncTick+0x20>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	461a      	mov	r2, r3
 8003432:	4b06      	ldr	r3, [pc, #24]	@ (800344c <HAL_IncTick+0x24>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4413      	add	r3, r2
 8003438:	4a04      	ldr	r2, [pc, #16]	@ (800344c <HAL_IncTick+0x24>)
 800343a:	6013      	str	r3, [r2, #0]
}
 800343c:	bf00      	nop
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	2000001c 	.word	0x2000001c
 800344c:	20000b7c 	.word	0x20000b7c

08003450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  return uwTick;
 8003454:	4b03      	ldr	r3, [pc, #12]	@ (8003464 <HAL_GetTick+0x14>)
 8003456:	681b      	ldr	r3, [r3, #0]
}
 8003458:	4618      	mov	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	20000b7c 	.word	0x20000b7c

08003468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003470:	f7ff ffee 	bl	8003450 <HAL_GetTick>
 8003474:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003480:	d005      	beq.n	800348e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003482:	4b0a      	ldr	r3, [pc, #40]	@ (80034ac <HAL_Delay+0x44>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	461a      	mov	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4413      	add	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800348e:	bf00      	nop
 8003490:	f7ff ffde 	bl	8003450 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	429a      	cmp	r2, r3
 800349e:	d8f7      	bhi.n	8003490 <HAL_Delay+0x28>
  {
  }
}
 80034a0:	bf00      	nop
 80034a2:	bf00      	nop
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	2000001c 	.word	0x2000001c

080034b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e033      	b.n	800352e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d109      	bne.n	80034e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fd fede 	bl	8001290 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e6:	f003 0310 	and.w	r3, r3, #16
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d118      	bne.n	8003520 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80034f6:	f023 0302 	bic.w	r3, r3, #2
 80034fa:	f043 0202 	orr.w	r2, r3, #2
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f93a 	bl	800377c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003512:	f023 0303 	bic.w	r3, r3, #3
 8003516:	f043 0201 	orr.w	r2, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	641a      	str	r2, [r3, #64]	@ 0x40
 800351e:	e001      	b.n	8003524 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800352c:	7bfb      	ldrb	r3, [r7, #15]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x1c>
 8003550:	2302      	movs	r3, #2
 8003552:	e105      	b.n	8003760 <HAL_ADC_ConfigChannel+0x228>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b09      	cmp	r3, #9
 8003562:	d925      	bls.n	80035b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68d9      	ldr	r1, [r3, #12]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	b29b      	uxth	r3, r3
 8003570:	461a      	mov	r2, r3
 8003572:	4613      	mov	r3, r2
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	4413      	add	r3, r2
 8003578:	3b1e      	subs	r3, #30
 800357a:	2207      	movs	r2, #7
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	43da      	mvns	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	400a      	ands	r2, r1
 8003588:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68d9      	ldr	r1, [r3, #12]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	b29b      	uxth	r3, r3
 800359a:	4618      	mov	r0, r3
 800359c:	4603      	mov	r3, r0
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	4403      	add	r3, r0
 80035a2:	3b1e      	subs	r3, #30
 80035a4:	409a      	lsls	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	60da      	str	r2, [r3, #12]
 80035ae:	e022      	b.n	80035f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6919      	ldr	r1, [r3, #16]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	461a      	mov	r2, r3
 80035be:	4613      	mov	r3, r2
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	4413      	add	r3, r2
 80035c4:	2207      	movs	r2, #7
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43da      	mvns	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	400a      	ands	r2, r1
 80035d2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6919      	ldr	r1, [r3, #16]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	4618      	mov	r0, r3
 80035e6:	4603      	mov	r3, r0
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	4403      	add	r3, r0
 80035ec:	409a      	lsls	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b06      	cmp	r3, #6
 80035fc:	d824      	bhi.n	8003648 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	3b05      	subs	r3, #5
 8003610:	221f      	movs	r2, #31
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43da      	mvns	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	400a      	ands	r2, r1
 800361e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	b29b      	uxth	r3, r3
 800362c:	4618      	mov	r0, r3
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	3b05      	subs	r3, #5
 800363a:	fa00 f203 	lsl.w	r2, r0, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	635a      	str	r2, [r3, #52]	@ 0x34
 8003646:	e04c      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b0c      	cmp	r3, #12
 800364e:	d824      	bhi.n	800369a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	4613      	mov	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	3b23      	subs	r3, #35	@ 0x23
 8003662:	221f      	movs	r2, #31
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	43da      	mvns	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	400a      	ands	r2, r1
 8003670:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	b29b      	uxth	r3, r3
 800367e:	4618      	mov	r0, r3
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	3b23      	subs	r3, #35	@ 0x23
 800368c:	fa00 f203 	lsl.w	r2, r0, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	631a      	str	r2, [r3, #48]	@ 0x30
 8003698:	e023      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	3b41      	subs	r3, #65	@ 0x41
 80036ac:	221f      	movs	r2, #31
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43da      	mvns	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	400a      	ands	r2, r1
 80036ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	4618      	mov	r0, r3
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	4613      	mov	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	3b41      	subs	r3, #65	@ 0x41
 80036d6:	fa00 f203 	lsl.w	r2, r0, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036e2:	4b22      	ldr	r3, [pc, #136]	@ (800376c <HAL_ADC_ConfigChannel+0x234>)
 80036e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a21      	ldr	r2, [pc, #132]	@ (8003770 <HAL_ADC_ConfigChannel+0x238>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d109      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x1cc>
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b12      	cmp	r3, #18
 80036f6:	d105      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a19      	ldr	r2, [pc, #100]	@ (8003770 <HAL_ADC_ConfigChannel+0x238>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d123      	bne.n	8003756 <HAL_ADC_ConfigChannel+0x21e>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b10      	cmp	r3, #16
 8003714:	d003      	beq.n	800371e <HAL_ADC_ConfigChannel+0x1e6>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b11      	cmp	r3, #17
 800371c:	d11b      	bne.n	8003756 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b10      	cmp	r3, #16
 8003730:	d111      	bne.n	8003756 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003732:	4b10      	ldr	r3, [pc, #64]	@ (8003774 <HAL_ADC_ConfigChannel+0x23c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a10      	ldr	r2, [pc, #64]	@ (8003778 <HAL_ADC_ConfigChannel+0x240>)
 8003738:	fba2 2303 	umull	r2, r3, r2, r3
 800373c:	0c9a      	lsrs	r2, r3, #18
 800373e:	4613      	mov	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003748:	e002      	b.n	8003750 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	3b01      	subs	r3, #1
 800374e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f9      	bne.n	800374a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	40012300 	.word	0x40012300
 8003770:	40012000 	.word	0x40012000
 8003774:	20000014 	.word	0x20000014
 8003778:	431bde83 	.word	0x431bde83

0800377c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003784:	4b79      	ldr	r3, [pc, #484]	@ (800396c <ADC_Init+0x1f0>)
 8003786:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	431a      	orrs	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6859      	ldr	r1, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	021a      	lsls	r2, r3, #8
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80037d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6859      	ldr	r1, [r3, #4]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6899      	ldr	r1, [r3, #8]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380e:	4a58      	ldr	r2, [pc, #352]	@ (8003970 <ADC_Init+0x1f4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d022      	beq.n	800385a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003822:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6899      	ldr	r1, [r3, #8]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003844:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6899      	ldr	r1, [r3, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	609a      	str	r2, [r3, #8]
 8003858:	e00f      	b.n	800387a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003868:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003878:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0202 	bic.w	r2, r2, #2
 8003888:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6899      	ldr	r1, [r3, #8]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	7e1b      	ldrb	r3, [r3, #24]
 8003894:	005a      	lsls	r2, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d01b      	beq.n	80038e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038b6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80038c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6859      	ldr	r1, [r3, #4]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d2:	3b01      	subs	r3, #1
 80038d4:	035a      	lsls	r2, r3, #13
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	605a      	str	r2, [r3, #4]
 80038de:	e007      	b.n	80038f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038ee:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80038fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	3b01      	subs	r3, #1
 800390c:	051a      	lsls	r2, r3, #20
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003924:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6899      	ldr	r1, [r3, #8]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003932:	025a      	lsls	r2, r3, #9
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800394a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6899      	ldr	r1, [r3, #8]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	029a      	lsls	r2, r3, #10
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	609a      	str	r2, [r3, #8]
}
 8003960:	bf00      	nop
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	40012300 	.word	0x40012300
 8003970:	0f000001 	.word	0x0f000001

08003974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003984:	4b0c      	ldr	r3, [pc, #48]	@ (80039b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003990:	4013      	ands	r3, r2
 8003992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800399c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039a6:	4a04      	ldr	r2, [pc, #16]	@ (80039b8 <__NVIC_SetPriorityGrouping+0x44>)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	60d3      	str	r3, [r2, #12]
}
 80039ac:	bf00      	nop
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	e000ed00 	.word	0xe000ed00

080039bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039c0:	4b04      	ldr	r3, [pc, #16]	@ (80039d4 <__NVIC_GetPriorityGrouping+0x18>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	0a1b      	lsrs	r3, r3, #8
 80039c6:	f003 0307 	and.w	r3, r3, #7
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	e000ed00 	.word	0xe000ed00

080039d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	4603      	mov	r3, r0
 80039e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	db0b      	blt.n	8003a02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ea:	79fb      	ldrb	r3, [r7, #7]
 80039ec:	f003 021f 	and.w	r2, r3, #31
 80039f0:	4907      	ldr	r1, [pc, #28]	@ (8003a10 <__NVIC_EnableIRQ+0x38>)
 80039f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f6:	095b      	lsrs	r3, r3, #5
 80039f8:	2001      	movs	r0, #1
 80039fa:	fa00 f202 	lsl.w	r2, r0, r2
 80039fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	e000e100 	.word	0xe000e100

08003a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	6039      	str	r1, [r7, #0]
 8003a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	db0a      	blt.n	8003a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	b2da      	uxtb	r2, r3
 8003a2c:	490c      	ldr	r1, [pc, #48]	@ (8003a60 <__NVIC_SetPriority+0x4c>)
 8003a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a32:	0112      	lsls	r2, r2, #4
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	440b      	add	r3, r1
 8003a38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a3c:	e00a      	b.n	8003a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	4908      	ldr	r1, [pc, #32]	@ (8003a64 <__NVIC_SetPriority+0x50>)
 8003a44:	79fb      	ldrb	r3, [r7, #7]
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	3b04      	subs	r3, #4
 8003a4c:	0112      	lsls	r2, r2, #4
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	440b      	add	r3, r1
 8003a52:	761a      	strb	r2, [r3, #24]
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	e000e100 	.word	0xe000e100
 8003a64:	e000ed00 	.word	0xe000ed00

08003a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b089      	sub	sp, #36	@ 0x24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	f1c3 0307 	rsb	r3, r3, #7
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	bf28      	it	cs
 8003a86:	2304      	movcs	r3, #4
 8003a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	2b06      	cmp	r3, #6
 8003a90:	d902      	bls.n	8003a98 <NVIC_EncodePriority+0x30>
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	3b03      	subs	r3, #3
 8003a96:	e000      	b.n	8003a9a <NVIC_EncodePriority+0x32>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	43da      	mvns	r2, r3
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	401a      	ands	r2, r3
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aba:	43d9      	mvns	r1, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ac0:	4313      	orrs	r3, r2
         );
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3724      	adds	r7, #36	@ 0x24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b082      	sub	sp, #8
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff ff4c 	bl	8003974 <__NVIC_SetPriorityGrouping>
}
 8003adc:	bf00      	nop
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003af6:	f7ff ff61 	bl	80039bc <__NVIC_GetPriorityGrouping>
 8003afa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	68b9      	ldr	r1, [r7, #8]
 8003b00:	6978      	ldr	r0, [r7, #20]
 8003b02:	f7ff ffb1 	bl	8003a68 <NVIC_EncodePriority>
 8003b06:	4602      	mov	r2, r0
 8003b08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b0c:	4611      	mov	r1, r2
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7ff ff80 	bl	8003a14 <__NVIC_SetPriority>
}
 8003b14:	bf00      	nop
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff ff54 	bl	80039d8 <__NVIC_EnableIRQ>
}
 8003b30:	bf00      	nop
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b44:	f7ff fc84 	bl	8003450 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e099      	b.n	8003c88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0201 	bic.w	r2, r2, #1
 8003b72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b74:	e00f      	b.n	8003b96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b76:	f7ff fc6b 	bl	8003450 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b05      	cmp	r3, #5
 8003b82:	d908      	bls.n	8003b96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2220      	movs	r2, #32
 8003b88:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2203      	movs	r2, #3
 8003b8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e078      	b.n	8003c88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1e8      	bne.n	8003b76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	4b38      	ldr	r3, [pc, #224]	@ (8003c90 <HAL_DMA_Init+0x158>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bec:	2b04      	cmp	r3, #4
 8003bee:	d107      	bne.n	8003c00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f023 0307 	bic.w	r3, r3, #7
 8003c16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d117      	bne.n	8003c5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00e      	beq.n	8003c5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 fa47 	bl	80040d0 <DMA_CheckFifoParam>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d008      	beq.n	8003c5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2240      	movs	r2, #64	@ 0x40
 8003c4c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003c56:	2301      	movs	r3, #1
 8003c58:	e016      	b.n	8003c88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f9fe 	bl	8004064 <DMA_CalcBaseAndBitshift>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c70:	223f      	movs	r2, #63	@ 0x3f
 8003c72:	409a      	lsls	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	f010803f 	.word	0xf010803f

08003c94 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e050      	b.n	8003d48 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d101      	bne.n	8003cb6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	e048      	b.n	8003d48 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 0201 	bic.w	r2, r2, #1
 8003cc4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2200      	movs	r2, #0
 8003cec:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2221      	movs	r2, #33	@ 0x21
 8003cf4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f9b4 	bl	8004064 <DMA_CalcBaseAndBitshift>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d28:	223f      	movs	r2, #63	@ 0x3f
 8003d2a:	409a      	lsls	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d5c:	4b8e      	ldr	r3, [pc, #568]	@ (8003f98 <HAL_DMA_IRQHandler+0x248>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a8e      	ldr	r2, [pc, #568]	@ (8003f9c <HAL_DMA_IRQHandler+0x24c>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	0a9b      	lsrs	r3, r3, #10
 8003d68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d7a:	2208      	movs	r2, #8
 8003d7c:	409a      	lsls	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	4013      	ands	r3, r2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d01a      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d013      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 0204 	bic.w	r2, r2, #4
 8003da2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da8:	2208      	movs	r2, #8
 8003daa:	409a      	lsls	r2, r3
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db4:	f043 0201 	orr.w	r2, r3, #1
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	409a      	lsls	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d012      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00b      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dde:	2201      	movs	r2, #1
 8003de0:	409a      	lsls	r2, r3
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dea:	f043 0202 	orr.w	r2, r3, #2
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df6:	2204      	movs	r2, #4
 8003df8:	409a      	lsls	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d012      	beq.n	8003e28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00b      	beq.n	8003e28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e14:	2204      	movs	r2, #4
 8003e16:	409a      	lsls	r2, r3
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e20:	f043 0204 	orr.w	r2, r3, #4
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2c:	2210      	movs	r2, #16
 8003e2e:	409a      	lsls	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4013      	ands	r3, r2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d043      	beq.n	8003ec0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d03c      	beq.n	8003ec0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e4a:	2210      	movs	r2, #16
 8003e4c:	409a      	lsls	r2, r3
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d018      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d108      	bne.n	8003e80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d024      	beq.n	8003ec0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	4798      	blx	r3
 8003e7e:	e01f      	b.n	8003ec0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d01b      	beq.n	8003ec0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	4798      	blx	r3
 8003e90:	e016      	b.n	8003ec0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d107      	bne.n	8003eb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0208 	bic.w	r2, r2, #8
 8003eae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	409a      	lsls	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 808f 	beq.w	8003ff0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0310 	and.w	r3, r3, #16
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 8087 	beq.w	8003ff0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	409a      	lsls	r2, r3
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b05      	cmp	r3, #5
 8003ef8:	d136      	bne.n	8003f68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0216 	bic.w	r2, r2, #22
 8003f08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695a      	ldr	r2, [r3, #20]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d103      	bne.n	8003f2a <HAL_DMA_IRQHandler+0x1da>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d007      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0208 	bic.w	r2, r2, #8
 8003f38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f3e:	223f      	movs	r2, #63	@ 0x3f
 8003f40:	409a      	lsls	r2, r3
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d07e      	beq.n	800405c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	4798      	blx	r3
        }
        return;
 8003f66:	e079      	b.n	800405c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d01d      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10d      	bne.n	8003fa0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d031      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	4798      	blx	r3
 8003f94:	e02c      	b.n	8003ff0 <HAL_DMA_IRQHandler+0x2a0>
 8003f96:	bf00      	nop
 8003f98:	20000014 	.word	0x20000014
 8003f9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d023      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	4798      	blx	r3
 8003fb0:	e01e      	b.n	8003ff0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10f      	bne.n	8003fe0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0210 	bic.w	r2, r2, #16
 8003fce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d032      	beq.n	800405e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	d022      	beq.n	800404a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2205      	movs	r2, #5
 8004008:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0201 	bic.w	r2, r2, #1
 800401a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	3301      	adds	r3, #1
 8004020:	60bb      	str	r3, [r7, #8]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	429a      	cmp	r2, r3
 8004026:	d307      	bcc.n	8004038 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f2      	bne.n	800401c <HAL_DMA_IRQHandler+0x2cc>
 8004036:	e000      	b.n	800403a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004038:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800404e:	2b00      	cmp	r3, #0
 8004050:	d005      	beq.n	800405e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	4798      	blx	r3
 800405a:	e000      	b.n	800405e <HAL_DMA_IRQHandler+0x30e>
        return;
 800405c:	bf00      	nop
    }
  }
}
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	b2db      	uxtb	r3, r3
 8004072:	3b10      	subs	r3, #16
 8004074:	4a14      	ldr	r2, [pc, #80]	@ (80040c8 <DMA_CalcBaseAndBitshift+0x64>)
 8004076:	fba2 2303 	umull	r2, r3, r2, r3
 800407a:	091b      	lsrs	r3, r3, #4
 800407c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800407e:	4a13      	ldr	r2, [pc, #76]	@ (80040cc <DMA_CalcBaseAndBitshift+0x68>)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4413      	add	r3, r2
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b03      	cmp	r3, #3
 8004090:	d909      	bls.n	80040a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800409a:	f023 0303 	bic.w	r3, r3, #3
 800409e:	1d1a      	adds	r2, r3, #4
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	659a      	str	r2, [r3, #88]	@ 0x58
 80040a4:	e007      	b.n	80040b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80040ae:	f023 0303 	bic.w	r3, r3, #3
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	aaaaaaab 	.word	0xaaaaaaab
 80040cc:	0800f004 	.word	0x0800f004

080040d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d11f      	bne.n	800412a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2b03      	cmp	r3, #3
 80040ee:	d856      	bhi.n	800419e <DMA_CheckFifoParam+0xce>
 80040f0:	a201      	add	r2, pc, #4	@ (adr r2, 80040f8 <DMA_CheckFifoParam+0x28>)
 80040f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f6:	bf00      	nop
 80040f8:	08004109 	.word	0x08004109
 80040fc:	0800411b 	.word	0x0800411b
 8004100:	08004109 	.word	0x08004109
 8004104:	0800419f 	.word	0x0800419f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d046      	beq.n	80041a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004118:	e043      	b.n	80041a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004122:	d140      	bne.n	80041a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004128:	e03d      	b.n	80041a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004132:	d121      	bne.n	8004178 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2b03      	cmp	r3, #3
 8004138:	d837      	bhi.n	80041aa <DMA_CheckFifoParam+0xda>
 800413a:	a201      	add	r2, pc, #4	@ (adr r2, 8004140 <DMA_CheckFifoParam+0x70>)
 800413c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004140:	08004151 	.word	0x08004151
 8004144:	08004157 	.word	0x08004157
 8004148:	08004151 	.word	0x08004151
 800414c:	08004169 	.word	0x08004169
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	73fb      	strb	r3, [r7, #15]
      break;
 8004154:	e030      	b.n	80041b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d025      	beq.n	80041ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004166:	e022      	b.n	80041ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004170:	d11f      	bne.n	80041b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004176:	e01c      	b.n	80041b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2b02      	cmp	r3, #2
 800417c:	d903      	bls.n	8004186 <DMA_CheckFifoParam+0xb6>
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2b03      	cmp	r3, #3
 8004182:	d003      	beq.n	800418c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004184:	e018      	b.n	80041b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	73fb      	strb	r3, [r7, #15]
      break;
 800418a:	e015      	b.n	80041b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004190:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00e      	beq.n	80041b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	73fb      	strb	r3, [r7, #15]
      break;
 800419c:	e00b      	b.n	80041b6 <DMA_CheckFifoParam+0xe6>
      break;
 800419e:	bf00      	nop
 80041a0:	e00a      	b.n	80041b8 <DMA_CheckFifoParam+0xe8>
      break;
 80041a2:	bf00      	nop
 80041a4:	e008      	b.n	80041b8 <DMA_CheckFifoParam+0xe8>
      break;
 80041a6:	bf00      	nop
 80041a8:	e006      	b.n	80041b8 <DMA_CheckFifoParam+0xe8>
      break;
 80041aa:	bf00      	nop
 80041ac:	e004      	b.n	80041b8 <DMA_CheckFifoParam+0xe8>
      break;
 80041ae:	bf00      	nop
 80041b0:	e002      	b.n	80041b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80041b2:	bf00      	nop
 80041b4:	e000      	b.n	80041b8 <DMA_CheckFifoParam+0xe8>
      break;
 80041b6:	bf00      	nop
    }
  } 
  
  return status; 
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop

080041c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b089      	sub	sp, #36	@ 0x24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041da:	2300      	movs	r3, #0
 80041dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041de:	2300      	movs	r3, #0
 80041e0:	61fb      	str	r3, [r7, #28]
 80041e2:	e159      	b.n	8004498 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041e4:	2201      	movs	r2, #1
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4013      	ands	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	f040 8148 	bne.w	8004492 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	2b01      	cmp	r3, #1
 800420c:	d005      	beq.n	800421a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004216:	2b02      	cmp	r3, #2
 8004218:	d130      	bne.n	800427c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	2203      	movs	r2, #3
 8004226:	fa02 f303 	lsl.w	r3, r2, r3
 800422a:	43db      	mvns	r3, r3
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	4013      	ands	r3, r2
 8004230:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	fa02 f303 	lsl.w	r3, r2, r3
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	4313      	orrs	r3, r2
 8004242:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004250:	2201      	movs	r2, #1
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	fa02 f303 	lsl.w	r3, r2, r3
 8004258:	43db      	mvns	r3, r3
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	4013      	ands	r3, r2
 800425e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	091b      	lsrs	r3, r3, #4
 8004266:	f003 0201 	and.w	r2, r3, #1
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	4313      	orrs	r3, r2
 8004274:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f003 0303 	and.w	r3, r3, #3
 8004284:	2b03      	cmp	r3, #3
 8004286:	d017      	beq.n	80042b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	2203      	movs	r2, #3
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	43db      	mvns	r3, r3
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	4013      	ands	r3, r2
 800429e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 0303 	and.w	r3, r3, #3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d123      	bne.n	800430c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	08da      	lsrs	r2, r3, #3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3208      	adds	r2, #8
 80042cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	220f      	movs	r2, #15
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	43db      	mvns	r3, r3
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	4013      	ands	r3, r2
 80042e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	08da      	lsrs	r2, r3, #3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3208      	adds	r2, #8
 8004306:	69b9      	ldr	r1, [r7, #24]
 8004308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	2203      	movs	r2, #3
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	43db      	mvns	r3, r3
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	4013      	ands	r3, r2
 8004322:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 0203 	and.w	r2, r3, #3
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	4313      	orrs	r3, r2
 8004338:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 80a2 	beq.w	8004492 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	4b57      	ldr	r3, [pc, #348]	@ (80044b0 <HAL_GPIO_Init+0x2e8>)
 8004354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004356:	4a56      	ldr	r2, [pc, #344]	@ (80044b0 <HAL_GPIO_Init+0x2e8>)
 8004358:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800435c:	6453      	str	r3, [r2, #68]	@ 0x44
 800435e:	4b54      	ldr	r3, [pc, #336]	@ (80044b0 <HAL_GPIO_Init+0x2e8>)
 8004360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004362:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800436a:	4a52      	ldr	r2, [pc, #328]	@ (80044b4 <HAL_GPIO_Init+0x2ec>)
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	089b      	lsrs	r3, r3, #2
 8004370:	3302      	adds	r3, #2
 8004372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004376:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	220f      	movs	r2, #15
 8004382:	fa02 f303 	lsl.w	r3, r2, r3
 8004386:	43db      	mvns	r3, r3
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	4013      	ands	r3, r2
 800438c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a49      	ldr	r2, [pc, #292]	@ (80044b8 <HAL_GPIO_Init+0x2f0>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d019      	beq.n	80043ca <HAL_GPIO_Init+0x202>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a48      	ldr	r2, [pc, #288]	@ (80044bc <HAL_GPIO_Init+0x2f4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d013      	beq.n	80043c6 <HAL_GPIO_Init+0x1fe>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a47      	ldr	r2, [pc, #284]	@ (80044c0 <HAL_GPIO_Init+0x2f8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00d      	beq.n	80043c2 <HAL_GPIO_Init+0x1fa>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a46      	ldr	r2, [pc, #280]	@ (80044c4 <HAL_GPIO_Init+0x2fc>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d007      	beq.n	80043be <HAL_GPIO_Init+0x1f6>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a45      	ldr	r2, [pc, #276]	@ (80044c8 <HAL_GPIO_Init+0x300>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d101      	bne.n	80043ba <HAL_GPIO_Init+0x1f2>
 80043b6:	2304      	movs	r3, #4
 80043b8:	e008      	b.n	80043cc <HAL_GPIO_Init+0x204>
 80043ba:	2307      	movs	r3, #7
 80043bc:	e006      	b.n	80043cc <HAL_GPIO_Init+0x204>
 80043be:	2303      	movs	r3, #3
 80043c0:	e004      	b.n	80043cc <HAL_GPIO_Init+0x204>
 80043c2:	2302      	movs	r3, #2
 80043c4:	e002      	b.n	80043cc <HAL_GPIO_Init+0x204>
 80043c6:	2301      	movs	r3, #1
 80043c8:	e000      	b.n	80043cc <HAL_GPIO_Init+0x204>
 80043ca:	2300      	movs	r3, #0
 80043cc:	69fa      	ldr	r2, [r7, #28]
 80043ce:	f002 0203 	and.w	r2, r2, #3
 80043d2:	0092      	lsls	r2, r2, #2
 80043d4:	4093      	lsls	r3, r2
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	4313      	orrs	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043dc:	4935      	ldr	r1, [pc, #212]	@ (80044b4 <HAL_GPIO_Init+0x2ec>)
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	089b      	lsrs	r3, r3, #2
 80043e2:	3302      	adds	r3, #2
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043ea:	4b38      	ldr	r3, [pc, #224]	@ (80044cc <HAL_GPIO_Init+0x304>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	43db      	mvns	r3, r3
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	4013      	ands	r3, r2
 80043f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800440e:	4a2f      	ldr	r2, [pc, #188]	@ (80044cc <HAL_GPIO_Init+0x304>)
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004414:	4b2d      	ldr	r3, [pc, #180]	@ (80044cc <HAL_GPIO_Init+0x304>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	43db      	mvns	r3, r3
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	4013      	ands	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	4313      	orrs	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004438:	4a24      	ldr	r2, [pc, #144]	@ (80044cc <HAL_GPIO_Init+0x304>)
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800443e:	4b23      	ldr	r3, [pc, #140]	@ (80044cc <HAL_GPIO_Init+0x304>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	43db      	mvns	r3, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4013      	ands	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004462:	4a1a      	ldr	r2, [pc, #104]	@ (80044cc <HAL_GPIO_Init+0x304>)
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004468:	4b18      	ldr	r3, [pc, #96]	@ (80044cc <HAL_GPIO_Init+0x304>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	43db      	mvns	r3, r3
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4013      	ands	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d003      	beq.n	800448c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800448c:	4a0f      	ldr	r2, [pc, #60]	@ (80044cc <HAL_GPIO_Init+0x304>)
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	3301      	adds	r3, #1
 8004496:	61fb      	str	r3, [r7, #28]
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	2b0f      	cmp	r3, #15
 800449c:	f67f aea2 	bls.w	80041e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044a0:	bf00      	nop
 80044a2:	bf00      	nop
 80044a4:	3724      	adds	r7, #36	@ 0x24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40023800 	.word	0x40023800
 80044b4:	40013800 	.word	0x40013800
 80044b8:	40020000 	.word	0x40020000
 80044bc:	40020400 	.word	0x40020400
 80044c0:	40020800 	.word	0x40020800
 80044c4:	40020c00 	.word	0x40020c00
 80044c8:	40021000 	.word	0x40021000
 80044cc:	40013c00 	.word	0x40013c00

080044d0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044da:	2300      	movs	r3, #0
 80044dc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80044e2:	2300      	movs	r3, #0
 80044e4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044e6:	2300      	movs	r3, #0
 80044e8:	617b      	str	r3, [r7, #20]
 80044ea:	e0bb      	b.n	8004664 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044ec:	2201      	movs	r2, #1
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	fa02 f303 	lsl.w	r3, r2, r3
 80044f4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	4013      	ands	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	429a      	cmp	r2, r3
 8004504:	f040 80ab 	bne.w	800465e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004508:	4a5c      	ldr	r2, [pc, #368]	@ (800467c <HAL_GPIO_DeInit+0x1ac>)
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	089b      	lsrs	r3, r3, #2
 800450e:	3302      	adds	r3, #2
 8004510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004514:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f003 0303 	and.w	r3, r3, #3
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	220f      	movs	r2, #15
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	4013      	ands	r3, r2
 8004528:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a54      	ldr	r2, [pc, #336]	@ (8004680 <HAL_GPIO_DeInit+0x1b0>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d019      	beq.n	8004566 <HAL_GPIO_DeInit+0x96>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a53      	ldr	r2, [pc, #332]	@ (8004684 <HAL_GPIO_DeInit+0x1b4>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d013      	beq.n	8004562 <HAL_GPIO_DeInit+0x92>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a52      	ldr	r2, [pc, #328]	@ (8004688 <HAL_GPIO_DeInit+0x1b8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00d      	beq.n	800455e <HAL_GPIO_DeInit+0x8e>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a51      	ldr	r2, [pc, #324]	@ (800468c <HAL_GPIO_DeInit+0x1bc>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d007      	beq.n	800455a <HAL_GPIO_DeInit+0x8a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a50      	ldr	r2, [pc, #320]	@ (8004690 <HAL_GPIO_DeInit+0x1c0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d101      	bne.n	8004556 <HAL_GPIO_DeInit+0x86>
 8004552:	2304      	movs	r3, #4
 8004554:	e008      	b.n	8004568 <HAL_GPIO_DeInit+0x98>
 8004556:	2307      	movs	r3, #7
 8004558:	e006      	b.n	8004568 <HAL_GPIO_DeInit+0x98>
 800455a:	2303      	movs	r3, #3
 800455c:	e004      	b.n	8004568 <HAL_GPIO_DeInit+0x98>
 800455e:	2302      	movs	r3, #2
 8004560:	e002      	b.n	8004568 <HAL_GPIO_DeInit+0x98>
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <HAL_GPIO_DeInit+0x98>
 8004566:	2300      	movs	r3, #0
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	f002 0203 	and.w	r2, r2, #3
 800456e:	0092      	lsls	r2, r2, #2
 8004570:	4093      	lsls	r3, r2
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	429a      	cmp	r2, r3
 8004576:	d132      	bne.n	80045de <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004578:	4b46      	ldr	r3, [pc, #280]	@ (8004694 <HAL_GPIO_DeInit+0x1c4>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	43db      	mvns	r3, r3
 8004580:	4944      	ldr	r1, [pc, #272]	@ (8004694 <HAL_GPIO_DeInit+0x1c4>)
 8004582:	4013      	ands	r3, r2
 8004584:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004586:	4b43      	ldr	r3, [pc, #268]	@ (8004694 <HAL_GPIO_DeInit+0x1c4>)
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	43db      	mvns	r3, r3
 800458e:	4941      	ldr	r1, [pc, #260]	@ (8004694 <HAL_GPIO_DeInit+0x1c4>)
 8004590:	4013      	ands	r3, r2
 8004592:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004594:	4b3f      	ldr	r3, [pc, #252]	@ (8004694 <HAL_GPIO_DeInit+0x1c4>)
 8004596:	68da      	ldr	r2, [r3, #12]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	43db      	mvns	r3, r3
 800459c:	493d      	ldr	r1, [pc, #244]	@ (8004694 <HAL_GPIO_DeInit+0x1c4>)
 800459e:	4013      	ands	r3, r2
 80045a0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80045a2:	4b3c      	ldr	r3, [pc, #240]	@ (8004694 <HAL_GPIO_DeInit+0x1c4>)
 80045a4:	689a      	ldr	r2, [r3, #8]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	43db      	mvns	r3, r3
 80045aa:	493a      	ldr	r1, [pc, #232]	@ (8004694 <HAL_GPIO_DeInit+0x1c4>)
 80045ac:	4013      	ands	r3, r2
 80045ae:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	220f      	movs	r2, #15
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80045c0:	4a2e      	ldr	r2, [pc, #184]	@ (800467c <HAL_GPIO_DeInit+0x1ac>)
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	089b      	lsrs	r3, r3, #2
 80045c6:	3302      	adds	r3, #2
 80045c8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	43da      	mvns	r2, r3
 80045d0:	482a      	ldr	r0, [pc, #168]	@ (800467c <HAL_GPIO_DeInit+0x1ac>)
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	089b      	lsrs	r3, r3, #2
 80045d6:	400a      	ands	r2, r1
 80045d8:	3302      	adds	r3, #2
 80045da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	2103      	movs	r1, #3
 80045e8:	fa01 f303 	lsl.w	r3, r1, r3
 80045ec:	43db      	mvns	r3, r3
 80045ee:	401a      	ands	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	08da      	lsrs	r2, r3, #3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3208      	adds	r2, #8
 80045fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	220f      	movs	r2, #15
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	43db      	mvns	r3, r3
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	08d2      	lsrs	r2, r2, #3
 8004614:	4019      	ands	r1, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	3208      	adds	r2, #8
 800461a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	2103      	movs	r1, #3
 8004628:	fa01 f303 	lsl.w	r3, r1, r3
 800462c:	43db      	mvns	r3, r3
 800462e:	401a      	ands	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	2101      	movs	r1, #1
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	fa01 f303 	lsl.w	r3, r1, r3
 8004640:	43db      	mvns	r3, r3
 8004642:	401a      	ands	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	2103      	movs	r1, #3
 8004652:	fa01 f303 	lsl.w	r3, r1, r3
 8004656:	43db      	mvns	r3, r3
 8004658:	401a      	ands	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	3301      	adds	r3, #1
 8004662:	617b      	str	r3, [r7, #20]
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	2b0f      	cmp	r3, #15
 8004668:	f67f af40 	bls.w	80044ec <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800466c:	bf00      	nop
 800466e:	bf00      	nop
 8004670:	371c      	adds	r7, #28
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40013800 	.word	0x40013800
 8004680:	40020000 	.word	0x40020000
 8004684:	40020400 	.word	0x40020400
 8004688:	40020800 	.word	0x40020800
 800468c:	40020c00 	.word	0x40020c00
 8004690:	40021000 	.word	0x40021000
 8004694:	40013c00 	.word	0x40013c00

08004698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	460b      	mov	r3, r1
 80046a2:	807b      	strh	r3, [r7, #2]
 80046a4:	4613      	mov	r3, r2
 80046a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046a8:	787b      	ldrb	r3, [r7, #1]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046ae:	887a      	ldrh	r2, [r7, #2]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046b4:	e003      	b.n	80046be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046b6:	887b      	ldrh	r3, [r7, #2]
 80046b8:	041a      	lsls	r2, r3, #16
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	619a      	str	r2, [r3, #24]
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
	...

080046cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e12b      	b.n	8004936 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d106      	bne.n	80046f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7fe fad4 	bl	8002ca0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2224      	movs	r2, #36	@ 0x24
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0201 	bic.w	r2, r2, #1
 800470e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800471e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800472e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004730:	f001 fbf6 	bl	8005f20 <HAL_RCC_GetPCLK1Freq>
 8004734:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	4a81      	ldr	r2, [pc, #516]	@ (8004940 <HAL_I2C_Init+0x274>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d807      	bhi.n	8004750 <HAL_I2C_Init+0x84>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4a80      	ldr	r2, [pc, #512]	@ (8004944 <HAL_I2C_Init+0x278>)
 8004744:	4293      	cmp	r3, r2
 8004746:	bf94      	ite	ls
 8004748:	2301      	movls	r3, #1
 800474a:	2300      	movhi	r3, #0
 800474c:	b2db      	uxtb	r3, r3
 800474e:	e006      	b.n	800475e <HAL_I2C_Init+0x92>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4a7d      	ldr	r2, [pc, #500]	@ (8004948 <HAL_I2C_Init+0x27c>)
 8004754:	4293      	cmp	r3, r2
 8004756:	bf94      	ite	ls
 8004758:	2301      	movls	r3, #1
 800475a:	2300      	movhi	r3, #0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e0e7      	b.n	8004936 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4a78      	ldr	r2, [pc, #480]	@ (800494c <HAL_I2C_Init+0x280>)
 800476a:	fba2 2303 	umull	r2, r3, r2, r3
 800476e:	0c9b      	lsrs	r3, r3, #18
 8004770:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	430a      	orrs	r2, r1
 8004784:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	4a6a      	ldr	r2, [pc, #424]	@ (8004940 <HAL_I2C_Init+0x274>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d802      	bhi.n	80047a0 <HAL_I2C_Init+0xd4>
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	3301      	adds	r3, #1
 800479e:	e009      	b.n	80047b4 <HAL_I2C_Init+0xe8>
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80047a6:	fb02 f303 	mul.w	r3, r2, r3
 80047aa:	4a69      	ldr	r2, [pc, #420]	@ (8004950 <HAL_I2C_Init+0x284>)
 80047ac:	fba2 2303 	umull	r2, r3, r2, r3
 80047b0:	099b      	lsrs	r3, r3, #6
 80047b2:	3301      	adds	r3, #1
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6812      	ldr	r2, [r2, #0]
 80047b8:	430b      	orrs	r3, r1
 80047ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80047c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	495c      	ldr	r1, [pc, #368]	@ (8004940 <HAL_I2C_Init+0x274>)
 80047d0:	428b      	cmp	r3, r1
 80047d2:	d819      	bhi.n	8004808 <HAL_I2C_Init+0x13c>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	1e59      	subs	r1, r3, #1
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	fbb1 f3f3 	udiv	r3, r1, r3
 80047e2:	1c59      	adds	r1, r3, #1
 80047e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80047e8:	400b      	ands	r3, r1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <HAL_I2C_Init+0x138>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	1e59      	subs	r1, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80047fc:	3301      	adds	r3, #1
 80047fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004802:	e051      	b.n	80048a8 <HAL_I2C_Init+0x1dc>
 8004804:	2304      	movs	r3, #4
 8004806:	e04f      	b.n	80048a8 <HAL_I2C_Init+0x1dc>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d111      	bne.n	8004834 <HAL_I2C_Init+0x168>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	1e58      	subs	r0, r3, #1
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6859      	ldr	r1, [r3, #4]
 8004818:	460b      	mov	r3, r1
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	440b      	add	r3, r1
 800481e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004822:	3301      	adds	r3, #1
 8004824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004828:	2b00      	cmp	r3, #0
 800482a:	bf0c      	ite	eq
 800482c:	2301      	moveq	r3, #1
 800482e:	2300      	movne	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	e012      	b.n	800485a <HAL_I2C_Init+0x18e>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	1e58      	subs	r0, r3, #1
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6859      	ldr	r1, [r3, #4]
 800483c:	460b      	mov	r3, r1
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	0099      	lsls	r1, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	fbb0 f3f3 	udiv	r3, r0, r3
 800484a:	3301      	adds	r3, #1
 800484c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004850:	2b00      	cmp	r3, #0
 8004852:	bf0c      	ite	eq
 8004854:	2301      	moveq	r3, #1
 8004856:	2300      	movne	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <HAL_I2C_Init+0x196>
 800485e:	2301      	movs	r3, #1
 8004860:	e022      	b.n	80048a8 <HAL_I2C_Init+0x1dc>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10e      	bne.n	8004888 <HAL_I2C_Init+0x1bc>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	1e58      	subs	r0, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6859      	ldr	r1, [r3, #4]
 8004872:	460b      	mov	r3, r1
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	440b      	add	r3, r1
 8004878:	fbb0 f3f3 	udiv	r3, r0, r3
 800487c:	3301      	adds	r3, #1
 800487e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004882:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004886:	e00f      	b.n	80048a8 <HAL_I2C_Init+0x1dc>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	1e58      	subs	r0, r3, #1
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6859      	ldr	r1, [r3, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	0099      	lsls	r1, r3, #2
 8004898:	440b      	add	r3, r1
 800489a:	fbb0 f3f3 	udiv	r3, r0, r3
 800489e:	3301      	adds	r3, #1
 80048a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048a8:	6879      	ldr	r1, [r7, #4]
 80048aa:	6809      	ldr	r1, [r1, #0]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69da      	ldr	r2, [r3, #28]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80048d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6911      	ldr	r1, [r2, #16]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	68d2      	ldr	r2, [r2, #12]
 80048e2:	4311      	orrs	r1, r2
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6812      	ldr	r2, [r2, #0]
 80048e8:	430b      	orrs	r3, r1
 80048ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	695a      	ldr	r2, [r3, #20]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0201 	orr.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2220      	movs	r2, #32
 8004922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	000186a0 	.word	0x000186a0
 8004944:	001e847f 	.word	0x001e847f
 8004948:	003d08ff 	.word	0x003d08ff
 800494c:	431bde83 	.word	0x431bde83
 8004950:	10624dd3 	.word	0x10624dd3

08004954 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af02      	add	r7, sp, #8
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	607a      	str	r2, [r7, #4]
 800495e:	461a      	mov	r2, r3
 8004960:	460b      	mov	r3, r1
 8004962:	817b      	strh	r3, [r7, #10]
 8004964:	4613      	mov	r3, r2
 8004966:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004968:	f7fe fd72 	bl	8003450 <HAL_GetTick>
 800496c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b20      	cmp	r3, #32
 8004978:	f040 80e0 	bne.w	8004b3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	2319      	movs	r3, #25
 8004982:	2201      	movs	r2, #1
 8004984:	4970      	ldr	r1, [pc, #448]	@ (8004b48 <HAL_I2C_Master_Transmit+0x1f4>)
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 fc64 	bl	8005254 <I2C_WaitOnFlagUntilTimeout>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004992:	2302      	movs	r3, #2
 8004994:	e0d3      	b.n	8004b3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800499c:	2b01      	cmp	r3, #1
 800499e:	d101      	bne.n	80049a4 <HAL_I2C_Master_Transmit+0x50>
 80049a0:	2302      	movs	r3, #2
 80049a2:	e0cc      	b.n	8004b3e <HAL_I2C_Master_Transmit+0x1ea>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d007      	beq.n	80049ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f042 0201 	orr.w	r2, r2, #1
 80049c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2221      	movs	r2, #33	@ 0x21
 80049de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2210      	movs	r2, #16
 80049e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	893a      	ldrh	r2, [r7, #8]
 80049fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4a50      	ldr	r2, [pc, #320]	@ (8004b4c <HAL_I2C_Master_Transmit+0x1f8>)
 8004a0a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a0c:	8979      	ldrh	r1, [r7, #10]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	6a3a      	ldr	r2, [r7, #32]
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f000 face 	bl	8004fb4 <I2C_MasterRequestWrite>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e08d      	b.n	8004b3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a22:	2300      	movs	r3, #0
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	613b      	str	r3, [r7, #16]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	613b      	str	r3, [r7, #16]
 8004a36:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004a38:	e066      	b.n	8004b08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	6a39      	ldr	r1, [r7, #32]
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 fd22 	bl	8005488 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00d      	beq.n	8004a66 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d107      	bne.n	8004a62 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e06b      	b.n	8004b3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6a:	781a      	ldrb	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d11b      	bne.n	8004adc <HAL_I2C_Master_Transmit+0x188>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d017      	beq.n	8004adc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab0:	781a      	ldrb	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abc:	1c5a      	adds	r2, r3, #1
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	6a39      	ldr	r1, [r7, #32]
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 fd19 	bl	8005518 <I2C_WaitOnBTFFlagUntilTimeout>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00d      	beq.n	8004b08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d107      	bne.n	8004b04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e01a      	b.n	8004b3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d194      	bne.n	8004a3a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2220      	movs	r2, #32
 8004b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	e000      	b.n	8004b3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004b3c:	2302      	movs	r3, #2
  }
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3718      	adds	r7, #24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	00100002 	.word	0x00100002
 8004b4c:	ffff0000 	.word	0xffff0000

08004b50 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08c      	sub	sp, #48	@ 0x30
 8004b54:	af02      	add	r7, sp, #8
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	607a      	str	r2, [r7, #4]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	817b      	strh	r3, [r7, #10]
 8004b60:	4613      	mov	r3, r2
 8004b62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b64:	f7fe fc74 	bl	8003450 <HAL_GetTick>
 8004b68:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b20      	cmp	r3, #32
 8004b74:	f040 8217 	bne.w	8004fa6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	2319      	movs	r3, #25
 8004b7e:	2201      	movs	r2, #1
 8004b80:	497c      	ldr	r1, [pc, #496]	@ (8004d74 <HAL_I2C_Master_Receive+0x224>)
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 fb66 	bl	8005254 <I2C_WaitOnFlagUntilTimeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004b8e:	2302      	movs	r3, #2
 8004b90:	e20a      	b.n	8004fa8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d101      	bne.n	8004ba0 <HAL_I2C_Master_Receive+0x50>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e203      	b.n	8004fa8 <HAL_I2C_Master_Receive+0x458>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d007      	beq.n	8004bc6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f042 0201 	orr.w	r2, r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bd4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2222      	movs	r2, #34	@ 0x22
 8004bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2210      	movs	r2, #16
 8004be2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	893a      	ldrh	r2, [r7, #8]
 8004bf6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	4a5c      	ldr	r2, [pc, #368]	@ (8004d78 <HAL_I2C_Master_Receive+0x228>)
 8004c06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c08:	8979      	ldrh	r1, [r7, #10]
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f000 fa52 	bl	80050b8 <I2C_MasterRequestRead>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e1c4      	b.n	8004fa8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d113      	bne.n	8004c4e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c26:	2300      	movs	r3, #0
 8004c28:	623b      	str	r3, [r7, #32]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	623b      	str	r3, [r7, #32]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	623b      	str	r3, [r7, #32]
 8004c3a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	e198      	b.n	8004f80 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d11b      	bne.n	8004c8e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c66:	2300      	movs	r3, #0
 8004c68:	61fb      	str	r3, [r7, #28]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	61fb      	str	r3, [r7, #28]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	61fb      	str	r3, [r7, #28]
 8004c7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	e178      	b.n	8004f80 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d11b      	bne.n	8004cce <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ca4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	61bb      	str	r3, [r7, #24]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	61bb      	str	r3, [r7, #24]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	61bb      	str	r3, [r7, #24]
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	e158      	b.n	8004f80 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004cdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cde:	2300      	movs	r3, #0
 8004ce0:	617b      	str	r3, [r7, #20]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	617b      	str	r3, [r7, #20]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	617b      	str	r3, [r7, #20]
 8004cf2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004cf4:	e144      	b.n	8004f80 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cfa:	2b03      	cmp	r3, #3
 8004cfc:	f200 80f1 	bhi.w	8004ee2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d123      	bne.n	8004d50 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f000 fc4b 	bl	80055a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e145      	b.n	8004fa8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	691a      	ldr	r2, [r3, #16]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d26:	b2d2      	uxtb	r2, r2
 8004d28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	3b01      	subs	r3, #1
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d4e:	e117      	b.n	8004f80 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d14e      	bne.n	8004df6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5e:	2200      	movs	r2, #0
 8004d60:	4906      	ldr	r1, [pc, #24]	@ (8004d7c <HAL_I2C_Master_Receive+0x22c>)
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f000 fa76 	bl	8005254 <I2C_WaitOnFlagUntilTimeout>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d008      	beq.n	8004d80 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e11a      	b.n	8004fa8 <HAL_I2C_Master_Receive+0x458>
 8004d72:	bf00      	nop
 8004d74:	00100002 	.word	0x00100002
 8004d78:	ffff0000 	.word	0xffff0000
 8004d7c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691a      	ldr	r2, [r3, #16]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dac:	3b01      	subs	r3, #1
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	691a      	ldr	r2, [r3, #16]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dcc:	b2d2      	uxtb	r2, r2
 8004dce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd4:	1c5a      	adds	r2, r3, #1
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dde:	3b01      	subs	r3, #1
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004df4:	e0c4      	b.n	8004f80 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	496c      	ldr	r1, [pc, #432]	@ (8004fb0 <HAL_I2C_Master_Receive+0x460>)
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 fa27 	bl	8005254 <I2C_WaitOnFlagUntilTimeout>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e0cb      	b.n	8004fa8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e58:	2200      	movs	r2, #0
 8004e5a:	4955      	ldr	r1, [pc, #340]	@ (8004fb0 <HAL_I2C_Master_Receive+0x460>)
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 f9f9 	bl	8005254 <I2C_WaitOnFlagUntilTimeout>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e09d      	b.n	8004fa8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691a      	ldr	r2, [r3, #16]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e86:	b2d2      	uxtb	r2, r2
 8004e88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8e:	1c5a      	adds	r2, r3, #1
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	691a      	ldr	r2, [r3, #16]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb8:	b2d2      	uxtb	r2, r2
 8004eba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec0:	1c5a      	adds	r2, r3, #1
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ee0:	e04e      	b.n	8004f80 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ee4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 fb5e 	bl	80055a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e058      	b.n	8004fa8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	691a      	ldr	r2, [r3, #16]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f00:	b2d2      	uxtb	r2, r2
 8004f02:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f12:	3b01      	subs	r3, #1
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	f003 0304 	and.w	r3, r3, #4
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d124      	bne.n	8004f80 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f3a:	2b03      	cmp	r3, #3
 8004f3c:	d107      	bne.n	8004f4e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f4c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	691a      	ldr	r2, [r3, #16]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f58:	b2d2      	uxtb	r2, r2
 8004f5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f60:	1c5a      	adds	r2, r3, #1
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f47f aeb6 	bne.w	8004cf6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	e000      	b.n	8004fa8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004fa6:	2302      	movs	r3, #2
  }
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3728      	adds	r7, #40	@ 0x28
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	00010004 	.word	0x00010004

08004fb4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b088      	sub	sp, #32
 8004fb8:	af02      	add	r7, sp, #8
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	607a      	str	r2, [r7, #4]
 8004fbe:	603b      	str	r3, [r7, #0]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	d006      	beq.n	8004fde <I2C_MasterRequestWrite+0x2a>
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d003      	beq.n	8004fde <I2C_MasterRequestWrite+0x2a>
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004fdc:	d108      	bne.n	8004ff0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	e00b      	b.n	8005008 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff4:	2b12      	cmp	r3, #18
 8004ff6:	d107      	bne.n	8005008 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005006:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 f91d 	bl	8005254 <I2C_WaitOnFlagUntilTimeout>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00d      	beq.n	800503c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800502a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800502e:	d103      	bne.n	8005038 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005036:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e035      	b.n	80050a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005044:	d108      	bne.n	8005058 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005046:	897b      	ldrh	r3, [r7, #10]
 8005048:	b2db      	uxtb	r3, r3
 800504a:	461a      	mov	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005054:	611a      	str	r2, [r3, #16]
 8005056:	e01b      	b.n	8005090 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005058:	897b      	ldrh	r3, [r7, #10]
 800505a:	11db      	asrs	r3, r3, #7
 800505c:	b2db      	uxtb	r3, r3
 800505e:	f003 0306 	and.w	r3, r3, #6
 8005062:	b2db      	uxtb	r3, r3
 8005064:	f063 030f 	orn	r3, r3, #15
 8005068:	b2da      	uxtb	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	490e      	ldr	r1, [pc, #56]	@ (80050b0 <I2C_MasterRequestWrite+0xfc>)
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 f966 	bl	8005348 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e010      	b.n	80050a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005086:	897b      	ldrh	r3, [r7, #10]
 8005088:	b2da      	uxtb	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	4907      	ldr	r1, [pc, #28]	@ (80050b4 <I2C_MasterRequestWrite+0x100>)
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 f956 	bl	8005348 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e000      	b.n	80050a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3718      	adds	r7, #24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	00010008 	.word	0x00010008
 80050b4:	00010002 	.word	0x00010002

080050b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af02      	add	r7, sp, #8
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	607a      	str	r2, [r7, #4]
 80050c2:	603b      	str	r3, [r7, #0]
 80050c4:	460b      	mov	r3, r1
 80050c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d006      	beq.n	80050f2 <I2C_MasterRequestRead+0x3a>
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d003      	beq.n	80050f2 <I2C_MasterRequestRead+0x3a>
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80050f0:	d108      	bne.n	8005104 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	e00b      	b.n	800511c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005108:	2b11      	cmp	r3, #17
 800510a:	d107      	bne.n	800511c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800511a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 f893 	bl	8005254 <I2C_WaitOnFlagUntilTimeout>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00d      	beq.n	8005150 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800513e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005142:	d103      	bne.n	800514c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800514a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e079      	b.n	8005244 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005158:	d108      	bne.n	800516c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800515a:	897b      	ldrh	r3, [r7, #10]
 800515c:	b2db      	uxtb	r3, r3
 800515e:	f043 0301 	orr.w	r3, r3, #1
 8005162:	b2da      	uxtb	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	611a      	str	r2, [r3, #16]
 800516a:	e05f      	b.n	800522c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800516c:	897b      	ldrh	r3, [r7, #10]
 800516e:	11db      	asrs	r3, r3, #7
 8005170:	b2db      	uxtb	r3, r3
 8005172:	f003 0306 	and.w	r3, r3, #6
 8005176:	b2db      	uxtb	r3, r3
 8005178:	f063 030f 	orn	r3, r3, #15
 800517c:	b2da      	uxtb	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	4930      	ldr	r1, [pc, #192]	@ (800524c <I2C_MasterRequestRead+0x194>)
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f000 f8dc 	bl	8005348 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e054      	b.n	8005244 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800519a:	897b      	ldrh	r3, [r7, #10]
 800519c:	b2da      	uxtb	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	4929      	ldr	r1, [pc, #164]	@ (8005250 <I2C_MasterRequestRead+0x198>)
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f000 f8cc 	bl	8005348 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e044      	b.n	8005244 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ba:	2300      	movs	r3, #0
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	613b      	str	r3, [r7, #16]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	613b      	str	r3, [r7, #16]
 80051ce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051de:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 f831 	bl	8005254 <I2C_WaitOnFlagUntilTimeout>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00d      	beq.n	8005214 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005202:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005206:	d103      	bne.n	8005210 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800520e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e017      	b.n	8005244 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005214:	897b      	ldrh	r3, [r7, #10]
 8005216:	11db      	asrs	r3, r3, #7
 8005218:	b2db      	uxtb	r3, r3
 800521a:	f003 0306 	and.w	r3, r3, #6
 800521e:	b2db      	uxtb	r3, r3
 8005220:	f063 030e 	orn	r3, r3, #14
 8005224:	b2da      	uxtb	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	4907      	ldr	r1, [pc, #28]	@ (8005250 <I2C_MasterRequestRead+0x198>)
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f000 f888 	bl	8005348 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e000      	b.n	8005244 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	00010008 	.word	0x00010008
 8005250:	00010002 	.word	0x00010002

08005254 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	603b      	str	r3, [r7, #0]
 8005260:	4613      	mov	r3, r2
 8005262:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005264:	e048      	b.n	80052f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526c:	d044      	beq.n	80052f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800526e:	f7fe f8ef 	bl	8003450 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	683a      	ldr	r2, [r7, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d302      	bcc.n	8005284 <I2C_WaitOnFlagUntilTimeout+0x30>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d139      	bne.n	80052f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	0c1b      	lsrs	r3, r3, #16
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b01      	cmp	r3, #1
 800528c:	d10d      	bne.n	80052aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	43da      	mvns	r2, r3
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	4013      	ands	r3, r2
 800529a:	b29b      	uxth	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	bf0c      	ite	eq
 80052a0:	2301      	moveq	r3, #1
 80052a2:	2300      	movne	r3, #0
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	461a      	mov	r2, r3
 80052a8:	e00c      	b.n	80052c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	43da      	mvns	r2, r3
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	4013      	ands	r3, r2
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	bf0c      	ite	eq
 80052bc:	2301      	moveq	r3, #1
 80052be:	2300      	movne	r3, #0
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	461a      	mov	r2, r3
 80052c4:	79fb      	ldrb	r3, [r7, #7]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d116      	bne.n	80052f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2220      	movs	r2, #32
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e4:	f043 0220 	orr.w	r2, r3, #32
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e023      	b.n	8005340 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	0c1b      	lsrs	r3, r3, #16
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d10d      	bne.n	800531e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	43da      	mvns	r2, r3
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	4013      	ands	r3, r2
 800530e:	b29b      	uxth	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	bf0c      	ite	eq
 8005314:	2301      	moveq	r3, #1
 8005316:	2300      	movne	r3, #0
 8005318:	b2db      	uxtb	r3, r3
 800531a:	461a      	mov	r2, r3
 800531c:	e00c      	b.n	8005338 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	43da      	mvns	r2, r3
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	4013      	ands	r3, r2
 800532a:	b29b      	uxth	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	bf0c      	ite	eq
 8005330:	2301      	moveq	r3, #1
 8005332:	2300      	movne	r3, #0
 8005334:	b2db      	uxtb	r3, r3
 8005336:	461a      	mov	r2, r3
 8005338:	79fb      	ldrb	r3, [r7, #7]
 800533a:	429a      	cmp	r2, r3
 800533c:	d093      	beq.n	8005266 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
 8005354:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005356:	e071      	b.n	800543c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005366:	d123      	bne.n	80053b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005376:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005380:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2220      	movs	r2, #32
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539c:	f043 0204 	orr.w	r2, r3, #4
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e067      	b.n	8005480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b6:	d041      	beq.n	800543c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053b8:	f7fe f84a 	bl	8003450 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d302      	bcc.n	80053ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d136      	bne.n	800543c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	0c1b      	lsrs	r3, r3, #16
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d10c      	bne.n	80053f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	43da      	mvns	r2, r3
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	4013      	ands	r3, r2
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	bf14      	ite	ne
 80053ea:	2301      	movne	r3, #1
 80053ec:	2300      	moveq	r3, #0
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	e00b      	b.n	800540a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	43da      	mvns	r2, r3
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	4013      	ands	r3, r2
 80053fe:	b29b      	uxth	r3, r3
 8005400:	2b00      	cmp	r3, #0
 8005402:	bf14      	ite	ne
 8005404:	2301      	movne	r3, #1
 8005406:	2300      	moveq	r3, #0
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d016      	beq.n	800543c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2220      	movs	r2, #32
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005428:	f043 0220 	orr.w	r2, r3, #32
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e021      	b.n	8005480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	0c1b      	lsrs	r3, r3, #16
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b01      	cmp	r3, #1
 8005444:	d10c      	bne.n	8005460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	43da      	mvns	r2, r3
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	4013      	ands	r3, r2
 8005452:	b29b      	uxth	r3, r3
 8005454:	2b00      	cmp	r3, #0
 8005456:	bf14      	ite	ne
 8005458:	2301      	movne	r3, #1
 800545a:	2300      	moveq	r3, #0
 800545c:	b2db      	uxtb	r3, r3
 800545e:	e00b      	b.n	8005478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	43da      	mvns	r2, r3
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	4013      	ands	r3, r2
 800546c:	b29b      	uxth	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	bf14      	ite	ne
 8005472:	2301      	movne	r3, #1
 8005474:	2300      	moveq	r3, #0
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	f47f af6d 	bne.w	8005358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005494:	e034      	b.n	8005500 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 f8e3 	bl	8005662 <I2C_IsAcknowledgeFailed>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e034      	b.n	8005510 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ac:	d028      	beq.n	8005500 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ae:	f7fd ffcf 	bl	8003450 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d302      	bcc.n	80054c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d11d      	bne.n	8005500 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ce:	2b80      	cmp	r3, #128	@ 0x80
 80054d0:	d016      	beq.n	8005500 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2220      	movs	r2, #32
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ec:	f043 0220 	orr.w	r2, r3, #32
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e007      	b.n	8005510 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800550a:	2b80      	cmp	r3, #128	@ 0x80
 800550c:	d1c3      	bne.n	8005496 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3710      	adds	r7, #16
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005524:	e034      	b.n	8005590 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f000 f89b 	bl	8005662 <I2C_IsAcknowledgeFailed>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e034      	b.n	80055a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553c:	d028      	beq.n	8005590 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800553e:	f7fd ff87 	bl	8003450 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	429a      	cmp	r2, r3
 800554c:	d302      	bcc.n	8005554 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d11d      	bne.n	8005590 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	f003 0304 	and.w	r3, r3, #4
 800555e:	2b04      	cmp	r3, #4
 8005560:	d016      	beq.n	8005590 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2220      	movs	r2, #32
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800557c:	f043 0220 	orr.w	r2, r3, #32
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e007      	b.n	80055a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	2b04      	cmp	r3, #4
 800559c:	d1c3      	bne.n	8005526 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055b4:	e049      	b.n	800564a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	f003 0310 	and.w	r3, r3, #16
 80055c0:	2b10      	cmp	r3, #16
 80055c2:	d119      	bne.n	80055f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f06f 0210 	mvn.w	r2, #16
 80055cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2220      	movs	r2, #32
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e030      	b.n	800565a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f8:	f7fd ff2a 	bl	8003450 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	429a      	cmp	r2, r3
 8005606:	d302      	bcc.n	800560e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d11d      	bne.n	800564a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005618:	2b40      	cmp	r3, #64	@ 0x40
 800561a:	d016      	beq.n	800564a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2220      	movs	r2, #32
 8005626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005636:	f043 0220 	orr.w	r2, r3, #32
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e007      	b.n	800565a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	695b      	ldr	r3, [r3, #20]
 8005650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005654:	2b40      	cmp	r3, #64	@ 0x40
 8005656:	d1ae      	bne.n	80055b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005662:	b480      	push	{r7}
 8005664:	b083      	sub	sp, #12
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005674:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005678:	d11b      	bne.n	80056b2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005682:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2220      	movs	r2, #32
 800568e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800569e:	f043 0204 	orr.w	r2, r3, #4
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e000      	b.n	80056b4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e267      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d075      	beq.n	80057ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80056de:	4b88      	ldr	r3, [pc, #544]	@ (8005900 <HAL_RCC_OscConfig+0x240>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 030c 	and.w	r3, r3, #12
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	d00c      	beq.n	8005704 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056ea:	4b85      	ldr	r3, [pc, #532]	@ (8005900 <HAL_RCC_OscConfig+0x240>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80056f2:	2b08      	cmp	r3, #8
 80056f4:	d112      	bne.n	800571c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056f6:	4b82      	ldr	r3, [pc, #520]	@ (8005900 <HAL_RCC_OscConfig+0x240>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005702:	d10b      	bne.n	800571c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005704:	4b7e      	ldr	r3, [pc, #504]	@ (8005900 <HAL_RCC_OscConfig+0x240>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d05b      	beq.n	80057c8 <HAL_RCC_OscConfig+0x108>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d157      	bne.n	80057c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e242      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005724:	d106      	bne.n	8005734 <HAL_RCC_OscConfig+0x74>
 8005726:	4b76      	ldr	r3, [pc, #472]	@ (8005900 <HAL_RCC_OscConfig+0x240>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a75      	ldr	r2, [pc, #468]	@ (8005900 <HAL_RCC_OscConfig+0x240>)
 800572c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	e01d      	b.n	8005770 <HAL_RCC_OscConfig+0xb0>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800573c:	d10c      	bne.n	8005758 <HAL_RCC_OscConfig+0x98>
 800573e:	4b70      	ldr	r3, [pc, #448]	@ (8005900 <HAL_RCC_OscConfig+0x240>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a6f      	ldr	r2, [pc, #444]	@ (8005900 <HAL_RCC_OscConfig+0x240>)
 8005744:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005748:	6013      	str	r3, [r2, #0]
 800574a:	4b6d      	ldr	r3, [pc, #436]	@ (8005900 <HAL_RCC_OscConfig+0x240>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a6c      	ldr	r2, [pc, #432]	@ (8005900 <HAL_RCC_OscConfig+0x240>)
 8005750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005754:	6013      	str	r3, [r2, #0]
 8005756:	e00b      	b.n	8005770 <HAL_RCC_OscConfig+0xb0>
 8005758:	4b69      	ldr	r3, [pc, #420]	@ (8005900 <HAL_RCC_OscConfig+0x240>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a68      	ldr	r2, [pc, #416]	@ (8005900 <HAL_RCC_OscConfig+0x240>)
 800575e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005762:	6013      	str	r3, [r2, #0]
 8005764:	4b66      	ldr	r3, [pc, #408]	@ (8005900 <HAL_RCC_OscConfig+0x240>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a65      	ldr	r2, [pc, #404]	@ (8005900 <HAL_RCC_OscConfig+0x240>)
 800576a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800576e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d013      	beq.n	80057a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005778:	f7fd fe6a 	bl	8003450 <HAL_GetTick>
 800577c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005780:	f7fd fe66 	bl	8003450 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b64      	cmp	r3, #100	@ 0x64
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e207      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005792:	4b5b      	ldr	r3, [pc, #364]	@ (8005900 <HAL_RCC_OscConfig+0x240>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0f0      	beq.n	8005780 <HAL_RCC_OscConfig+0xc0>
 800579e:	e014      	b.n	80057ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a0:	f7fd fe56 	bl	8003450 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057a8:	f7fd fe52 	bl	8003450 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b64      	cmp	r3, #100	@ 0x64
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e1f3      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057ba:	4b51      	ldr	r3, [pc, #324]	@ (8005900 <HAL_RCC_OscConfig+0x240>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1f0      	bne.n	80057a8 <HAL_RCC_OscConfig+0xe8>
 80057c6:	e000      	b.n	80057ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d063      	beq.n	800589e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80057d6:	4b4a      	ldr	r3, [pc, #296]	@ (8005900 <HAL_RCC_OscConfig+0x240>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f003 030c 	and.w	r3, r3, #12
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00b      	beq.n	80057fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057e2:	4b47      	ldr	r3, [pc, #284]	@ (8005900 <HAL_RCC_OscConfig+0x240>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80057ea:	2b08      	cmp	r3, #8
 80057ec:	d11c      	bne.n	8005828 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057ee:	4b44      	ldr	r3, [pc, #272]	@ (8005900 <HAL_RCC_OscConfig+0x240>)
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d116      	bne.n	8005828 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057fa:	4b41      	ldr	r3, [pc, #260]	@ (8005900 <HAL_RCC_OscConfig+0x240>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d005      	beq.n	8005812 <HAL_RCC_OscConfig+0x152>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d001      	beq.n	8005812 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e1c7      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005812:	4b3b      	ldr	r3, [pc, #236]	@ (8005900 <HAL_RCC_OscConfig+0x240>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	4937      	ldr	r1, [pc, #220]	@ (8005900 <HAL_RCC_OscConfig+0x240>)
 8005822:	4313      	orrs	r3, r2
 8005824:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005826:	e03a      	b.n	800589e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d020      	beq.n	8005872 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005830:	4b34      	ldr	r3, [pc, #208]	@ (8005904 <HAL_RCC_OscConfig+0x244>)
 8005832:	2201      	movs	r2, #1
 8005834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005836:	f7fd fe0b 	bl	8003450 <HAL_GetTick>
 800583a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800583c:	e008      	b.n	8005850 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800583e:	f7fd fe07 	bl	8003450 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	2b02      	cmp	r3, #2
 800584a:	d901      	bls.n	8005850 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e1a8      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005850:	4b2b      	ldr	r3, [pc, #172]	@ (8005900 <HAL_RCC_OscConfig+0x240>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d0f0      	beq.n	800583e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800585c:	4b28      	ldr	r3, [pc, #160]	@ (8005900 <HAL_RCC_OscConfig+0x240>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	4925      	ldr	r1, [pc, #148]	@ (8005900 <HAL_RCC_OscConfig+0x240>)
 800586c:	4313      	orrs	r3, r2
 800586e:	600b      	str	r3, [r1, #0]
 8005870:	e015      	b.n	800589e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005872:	4b24      	ldr	r3, [pc, #144]	@ (8005904 <HAL_RCC_OscConfig+0x244>)
 8005874:	2200      	movs	r2, #0
 8005876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005878:	f7fd fdea 	bl	8003450 <HAL_GetTick>
 800587c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800587e:	e008      	b.n	8005892 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005880:	f7fd fde6 	bl	8003450 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b02      	cmp	r3, #2
 800588c:	d901      	bls.n	8005892 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e187      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005892:	4b1b      	ldr	r3, [pc, #108]	@ (8005900 <HAL_RCC_OscConfig+0x240>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1f0      	bne.n	8005880 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0308 	and.w	r3, r3, #8
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d036      	beq.n	8005918 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d016      	beq.n	80058e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058b2:	4b15      	ldr	r3, [pc, #84]	@ (8005908 <HAL_RCC_OscConfig+0x248>)
 80058b4:	2201      	movs	r2, #1
 80058b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b8:	f7fd fdca 	bl	8003450 <HAL_GetTick>
 80058bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058be:	e008      	b.n	80058d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058c0:	f7fd fdc6 	bl	8003450 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e167      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005900 <HAL_RCC_OscConfig+0x240>)
 80058d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0f0      	beq.n	80058c0 <HAL_RCC_OscConfig+0x200>
 80058de:	e01b      	b.n	8005918 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058e0:	4b09      	ldr	r3, [pc, #36]	@ (8005908 <HAL_RCC_OscConfig+0x248>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058e6:	f7fd fdb3 	bl	8003450 <HAL_GetTick>
 80058ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058ec:	e00e      	b.n	800590c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058ee:	f7fd fdaf 	bl	8003450 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d907      	bls.n	800590c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e150      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
 8005900:	40023800 	.word	0x40023800
 8005904:	42470000 	.word	0x42470000
 8005908:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800590c:	4b88      	ldr	r3, [pc, #544]	@ (8005b30 <HAL_RCC_OscConfig+0x470>)
 800590e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005910:	f003 0302 	and.w	r3, r3, #2
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1ea      	bne.n	80058ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0304 	and.w	r3, r3, #4
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 8097 	beq.w	8005a54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005926:	2300      	movs	r3, #0
 8005928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800592a:	4b81      	ldr	r3, [pc, #516]	@ (8005b30 <HAL_RCC_OscConfig+0x470>)
 800592c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10f      	bne.n	8005956 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005936:	2300      	movs	r3, #0
 8005938:	60bb      	str	r3, [r7, #8]
 800593a:	4b7d      	ldr	r3, [pc, #500]	@ (8005b30 <HAL_RCC_OscConfig+0x470>)
 800593c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800593e:	4a7c      	ldr	r2, [pc, #496]	@ (8005b30 <HAL_RCC_OscConfig+0x470>)
 8005940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005944:	6413      	str	r3, [r2, #64]	@ 0x40
 8005946:	4b7a      	ldr	r3, [pc, #488]	@ (8005b30 <HAL_RCC_OscConfig+0x470>)
 8005948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800594e:	60bb      	str	r3, [r7, #8]
 8005950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005952:	2301      	movs	r3, #1
 8005954:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005956:	4b77      	ldr	r3, [pc, #476]	@ (8005b34 <HAL_RCC_OscConfig+0x474>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800595e:	2b00      	cmp	r3, #0
 8005960:	d118      	bne.n	8005994 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005962:	4b74      	ldr	r3, [pc, #464]	@ (8005b34 <HAL_RCC_OscConfig+0x474>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a73      	ldr	r2, [pc, #460]	@ (8005b34 <HAL_RCC_OscConfig+0x474>)
 8005968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800596c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800596e:	f7fd fd6f 	bl	8003450 <HAL_GetTick>
 8005972:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005974:	e008      	b.n	8005988 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005976:	f7fd fd6b 	bl	8003450 <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	2b02      	cmp	r3, #2
 8005982:	d901      	bls.n	8005988 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e10c      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005988:	4b6a      	ldr	r3, [pc, #424]	@ (8005b34 <HAL_RCC_OscConfig+0x474>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005990:	2b00      	cmp	r3, #0
 8005992:	d0f0      	beq.n	8005976 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d106      	bne.n	80059aa <HAL_RCC_OscConfig+0x2ea>
 800599c:	4b64      	ldr	r3, [pc, #400]	@ (8005b30 <HAL_RCC_OscConfig+0x470>)
 800599e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059a0:	4a63      	ldr	r2, [pc, #396]	@ (8005b30 <HAL_RCC_OscConfig+0x470>)
 80059a2:	f043 0301 	orr.w	r3, r3, #1
 80059a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80059a8:	e01c      	b.n	80059e4 <HAL_RCC_OscConfig+0x324>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	2b05      	cmp	r3, #5
 80059b0:	d10c      	bne.n	80059cc <HAL_RCC_OscConfig+0x30c>
 80059b2:	4b5f      	ldr	r3, [pc, #380]	@ (8005b30 <HAL_RCC_OscConfig+0x470>)
 80059b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059b6:	4a5e      	ldr	r2, [pc, #376]	@ (8005b30 <HAL_RCC_OscConfig+0x470>)
 80059b8:	f043 0304 	orr.w	r3, r3, #4
 80059bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80059be:	4b5c      	ldr	r3, [pc, #368]	@ (8005b30 <HAL_RCC_OscConfig+0x470>)
 80059c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059c2:	4a5b      	ldr	r2, [pc, #364]	@ (8005b30 <HAL_RCC_OscConfig+0x470>)
 80059c4:	f043 0301 	orr.w	r3, r3, #1
 80059c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80059ca:	e00b      	b.n	80059e4 <HAL_RCC_OscConfig+0x324>
 80059cc:	4b58      	ldr	r3, [pc, #352]	@ (8005b30 <HAL_RCC_OscConfig+0x470>)
 80059ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059d0:	4a57      	ldr	r2, [pc, #348]	@ (8005b30 <HAL_RCC_OscConfig+0x470>)
 80059d2:	f023 0301 	bic.w	r3, r3, #1
 80059d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80059d8:	4b55      	ldr	r3, [pc, #340]	@ (8005b30 <HAL_RCC_OscConfig+0x470>)
 80059da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059dc:	4a54      	ldr	r2, [pc, #336]	@ (8005b30 <HAL_RCC_OscConfig+0x470>)
 80059de:	f023 0304 	bic.w	r3, r3, #4
 80059e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d015      	beq.n	8005a18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ec:	f7fd fd30 	bl	8003450 <HAL_GetTick>
 80059f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059f2:	e00a      	b.n	8005a0a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059f4:	f7fd fd2c 	bl	8003450 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d901      	bls.n	8005a0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e0cb      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a0a:	4b49      	ldr	r3, [pc, #292]	@ (8005b30 <HAL_RCC_OscConfig+0x470>)
 8005a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d0ee      	beq.n	80059f4 <HAL_RCC_OscConfig+0x334>
 8005a16:	e014      	b.n	8005a42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a18:	f7fd fd1a 	bl	8003450 <HAL_GetTick>
 8005a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a1e:	e00a      	b.n	8005a36 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a20:	f7fd fd16 	bl	8003450 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d901      	bls.n	8005a36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e0b5      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a36:	4b3e      	ldr	r3, [pc, #248]	@ (8005b30 <HAL_RCC_OscConfig+0x470>)
 8005a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1ee      	bne.n	8005a20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d105      	bne.n	8005a54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a48:	4b39      	ldr	r3, [pc, #228]	@ (8005b30 <HAL_RCC_OscConfig+0x470>)
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4c:	4a38      	ldr	r2, [pc, #224]	@ (8005b30 <HAL_RCC_OscConfig+0x470>)
 8005a4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a52:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 80a1 	beq.w	8005ba0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a5e:	4b34      	ldr	r3, [pc, #208]	@ (8005b30 <HAL_RCC_OscConfig+0x470>)
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f003 030c 	and.w	r3, r3, #12
 8005a66:	2b08      	cmp	r3, #8
 8005a68:	d05c      	beq.n	8005b24 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d141      	bne.n	8005af6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a72:	4b31      	ldr	r3, [pc, #196]	@ (8005b38 <HAL_RCC_OscConfig+0x478>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a78:	f7fd fcea 	bl	8003450 <HAL_GetTick>
 8005a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a7e:	e008      	b.n	8005a92 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a80:	f7fd fce6 	bl	8003450 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e087      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a92:	4b27      	ldr	r3, [pc, #156]	@ (8005b30 <HAL_RCC_OscConfig+0x470>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1f0      	bne.n	8005a80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	69da      	ldr	r2, [r3, #28]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aac:	019b      	lsls	r3, r3, #6
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab4:	085b      	lsrs	r3, r3, #1
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	041b      	lsls	r3, r3, #16
 8005aba:	431a      	orrs	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac0:	061b      	lsls	r3, r3, #24
 8005ac2:	491b      	ldr	r1, [pc, #108]	@ (8005b30 <HAL_RCC_OscConfig+0x470>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8005b38 <HAL_RCC_OscConfig+0x478>)
 8005aca:	2201      	movs	r2, #1
 8005acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ace:	f7fd fcbf 	bl	8003450 <HAL_GetTick>
 8005ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ad4:	e008      	b.n	8005ae8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ad6:	f7fd fcbb 	bl	8003450 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d901      	bls.n	8005ae8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e05c      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ae8:	4b11      	ldr	r3, [pc, #68]	@ (8005b30 <HAL_RCC_OscConfig+0x470>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d0f0      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x416>
 8005af4:	e054      	b.n	8005ba0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005af6:	4b10      	ldr	r3, [pc, #64]	@ (8005b38 <HAL_RCC_OscConfig+0x478>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005afc:	f7fd fca8 	bl	8003450 <HAL_GetTick>
 8005b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b02:	e008      	b.n	8005b16 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b04:	f7fd fca4 	bl	8003450 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e045      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b16:	4b06      	ldr	r3, [pc, #24]	@ (8005b30 <HAL_RCC_OscConfig+0x470>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1f0      	bne.n	8005b04 <HAL_RCC_OscConfig+0x444>
 8005b22:	e03d      	b.n	8005ba0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d107      	bne.n	8005b3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e038      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
 8005b30:	40023800 	.word	0x40023800
 8005b34:	40007000 	.word	0x40007000
 8005b38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8005bac <HAL_RCC_OscConfig+0x4ec>)
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d028      	beq.n	8005b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d121      	bne.n	8005b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d11a      	bne.n	8005b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005b72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d111      	bne.n	8005b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b82:	085b      	lsrs	r3, r3, #1
 8005b84:	3b01      	subs	r3, #1
 8005b86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d107      	bne.n	8005b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d001      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e000      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3718      	adds	r7, #24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	40023800 	.word	0x40023800

08005bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e0cc      	b.n	8005d5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bc4:	4b68      	ldr	r3, [pc, #416]	@ (8005d68 <HAL_RCC_ClockConfig+0x1b8>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0307 	and.w	r3, r3, #7
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d90c      	bls.n	8005bec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bd2:	4b65      	ldr	r3, [pc, #404]	@ (8005d68 <HAL_RCC_ClockConfig+0x1b8>)
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	b2d2      	uxtb	r2, r2
 8005bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bda:	4b63      	ldr	r3, [pc, #396]	@ (8005d68 <HAL_RCC_ClockConfig+0x1b8>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0307 	and.w	r3, r3, #7
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d001      	beq.n	8005bec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e0b8      	b.n	8005d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d020      	beq.n	8005c3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0304 	and.w	r3, r3, #4
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d005      	beq.n	8005c10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c04:	4b59      	ldr	r3, [pc, #356]	@ (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	4a58      	ldr	r2, [pc, #352]	@ (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005c0a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005c0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0308 	and.w	r3, r3, #8
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d005      	beq.n	8005c28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c1c:	4b53      	ldr	r3, [pc, #332]	@ (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	4a52      	ldr	r2, [pc, #328]	@ (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005c22:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005c26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c28:	4b50      	ldr	r3, [pc, #320]	@ (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	494d      	ldr	r1, [pc, #308]	@ (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d044      	beq.n	8005cd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d107      	bne.n	8005c5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c4e:	4b47      	ldr	r3, [pc, #284]	@ (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d119      	bne.n	8005c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e07f      	b.n	8005d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d003      	beq.n	8005c6e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c6a:	2b03      	cmp	r3, #3
 8005c6c:	d107      	bne.n	8005c7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c6e:	4b3f      	ldr	r3, [pc, #252]	@ (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d109      	bne.n	8005c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e06f      	b.n	8005d5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c7e:	4b3b      	ldr	r3, [pc, #236]	@ (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e067      	b.n	8005d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c8e:	4b37      	ldr	r3, [pc, #220]	@ (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f023 0203 	bic.w	r2, r3, #3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	4934      	ldr	r1, [pc, #208]	@ (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ca0:	f7fd fbd6 	bl	8003450 <HAL_GetTick>
 8005ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ca6:	e00a      	b.n	8005cbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ca8:	f7fd fbd2 	bl	8003450 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e04f      	b.n	8005d5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cbe:	4b2b      	ldr	r3, [pc, #172]	@ (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f003 020c 	and.w	r2, r3, #12
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d1eb      	bne.n	8005ca8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cd0:	4b25      	ldr	r3, [pc, #148]	@ (8005d68 <HAL_RCC_ClockConfig+0x1b8>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0307 	and.w	r3, r3, #7
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d20c      	bcs.n	8005cf8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cde:	4b22      	ldr	r3, [pc, #136]	@ (8005d68 <HAL_RCC_ClockConfig+0x1b8>)
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	b2d2      	uxtb	r2, r2
 8005ce4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ce6:	4b20      	ldr	r3, [pc, #128]	@ (8005d68 <HAL_RCC_ClockConfig+0x1b8>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0307 	and.w	r3, r3, #7
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d001      	beq.n	8005cf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e032      	b.n	8005d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0304 	and.w	r3, r3, #4
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d008      	beq.n	8005d16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d04:	4b19      	ldr	r3, [pc, #100]	@ (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	4916      	ldr	r1, [pc, #88]	@ (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0308 	and.w	r3, r3, #8
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d009      	beq.n	8005d36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d22:	4b12      	ldr	r3, [pc, #72]	@ (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	00db      	lsls	r3, r3, #3
 8005d30:	490e      	ldr	r1, [pc, #56]	@ (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d36:	f000 f821 	bl	8005d7c <HAL_RCC_GetSysClockFreq>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	091b      	lsrs	r3, r3, #4
 8005d42:	f003 030f 	and.w	r3, r3, #15
 8005d46:	490a      	ldr	r1, [pc, #40]	@ (8005d70 <HAL_RCC_ClockConfig+0x1c0>)
 8005d48:	5ccb      	ldrb	r3, [r1, r3]
 8005d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d4e:	4a09      	ldr	r2, [pc, #36]	@ (8005d74 <HAL_RCC_ClockConfig+0x1c4>)
 8005d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005d52:	4b09      	ldr	r3, [pc, #36]	@ (8005d78 <HAL_RCC_ClockConfig+0x1c8>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fd f8d8 	bl	8002f0c <HAL_InitTick>

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	40023c00 	.word	0x40023c00
 8005d6c:	40023800 	.word	0x40023800
 8005d70:	0800efec 	.word	0x0800efec
 8005d74:	20000014 	.word	0x20000014
 8005d78:	20000018 	.word	0x20000018

08005d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d80:	b090      	sub	sp, #64	@ 0x40
 8005d82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d94:	4b59      	ldr	r3, [pc, #356]	@ (8005efc <HAL_RCC_GetSysClockFreq+0x180>)
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f003 030c 	and.w	r3, r3, #12
 8005d9c:	2b08      	cmp	r3, #8
 8005d9e:	d00d      	beq.n	8005dbc <HAL_RCC_GetSysClockFreq+0x40>
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	f200 80a1 	bhi.w	8005ee8 <HAL_RCC_GetSysClockFreq+0x16c>
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d002      	beq.n	8005db0 <HAL_RCC_GetSysClockFreq+0x34>
 8005daa:	2b04      	cmp	r3, #4
 8005dac:	d003      	beq.n	8005db6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005dae:	e09b      	b.n	8005ee8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005db0:	4b53      	ldr	r3, [pc, #332]	@ (8005f00 <HAL_RCC_GetSysClockFreq+0x184>)
 8005db2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005db4:	e09b      	b.n	8005eee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005db6:	4b53      	ldr	r3, [pc, #332]	@ (8005f04 <HAL_RCC_GetSysClockFreq+0x188>)
 8005db8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005dba:	e098      	b.n	8005eee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005dbc:	4b4f      	ldr	r3, [pc, #316]	@ (8005efc <HAL_RCC_GetSysClockFreq+0x180>)
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005dc4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005dc6:	4b4d      	ldr	r3, [pc, #308]	@ (8005efc <HAL_RCC_GetSysClockFreq+0x180>)
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d028      	beq.n	8005e24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dd2:	4b4a      	ldr	r3, [pc, #296]	@ (8005efc <HAL_RCC_GetSysClockFreq+0x180>)
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	099b      	lsrs	r3, r3, #6
 8005dd8:	2200      	movs	r2, #0
 8005dda:	623b      	str	r3, [r7, #32]
 8005ddc:	627a      	str	r2, [r7, #36]	@ 0x24
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005de4:	2100      	movs	r1, #0
 8005de6:	4b47      	ldr	r3, [pc, #284]	@ (8005f04 <HAL_RCC_GetSysClockFreq+0x188>)
 8005de8:	fb03 f201 	mul.w	r2, r3, r1
 8005dec:	2300      	movs	r3, #0
 8005dee:	fb00 f303 	mul.w	r3, r0, r3
 8005df2:	4413      	add	r3, r2
 8005df4:	4a43      	ldr	r2, [pc, #268]	@ (8005f04 <HAL_RCC_GetSysClockFreq+0x188>)
 8005df6:	fba0 1202 	umull	r1, r2, r0, r2
 8005dfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005dfc:	460a      	mov	r2, r1
 8005dfe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005e00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e02:	4413      	add	r3, r2
 8005e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e08:	2200      	movs	r2, #0
 8005e0a:	61bb      	str	r3, [r7, #24]
 8005e0c:	61fa      	str	r2, [r7, #28]
 8005e0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005e16:	f7fa ff3f 	bl	8000c98 <__aeabi_uldivmod>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	4613      	mov	r3, r2
 8005e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e22:	e053      	b.n	8005ecc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e24:	4b35      	ldr	r3, [pc, #212]	@ (8005efc <HAL_RCC_GetSysClockFreq+0x180>)
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	099b      	lsrs	r3, r3, #6
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	613b      	str	r3, [r7, #16]
 8005e2e:	617a      	str	r2, [r7, #20]
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005e36:	f04f 0b00 	mov.w	fp, #0
 8005e3a:	4652      	mov	r2, sl
 8005e3c:	465b      	mov	r3, fp
 8005e3e:	f04f 0000 	mov.w	r0, #0
 8005e42:	f04f 0100 	mov.w	r1, #0
 8005e46:	0159      	lsls	r1, r3, #5
 8005e48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e4c:	0150      	lsls	r0, r2, #5
 8005e4e:	4602      	mov	r2, r0
 8005e50:	460b      	mov	r3, r1
 8005e52:	ebb2 080a 	subs.w	r8, r2, sl
 8005e56:	eb63 090b 	sbc.w	r9, r3, fp
 8005e5a:	f04f 0200 	mov.w	r2, #0
 8005e5e:	f04f 0300 	mov.w	r3, #0
 8005e62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005e66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005e6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005e6e:	ebb2 0408 	subs.w	r4, r2, r8
 8005e72:	eb63 0509 	sbc.w	r5, r3, r9
 8005e76:	f04f 0200 	mov.w	r2, #0
 8005e7a:	f04f 0300 	mov.w	r3, #0
 8005e7e:	00eb      	lsls	r3, r5, #3
 8005e80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e84:	00e2      	lsls	r2, r4, #3
 8005e86:	4614      	mov	r4, r2
 8005e88:	461d      	mov	r5, r3
 8005e8a:	eb14 030a 	adds.w	r3, r4, sl
 8005e8e:	603b      	str	r3, [r7, #0]
 8005e90:	eb45 030b 	adc.w	r3, r5, fp
 8005e94:	607b      	str	r3, [r7, #4]
 8005e96:	f04f 0200 	mov.w	r2, #0
 8005e9a:	f04f 0300 	mov.w	r3, #0
 8005e9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	028b      	lsls	r3, r1, #10
 8005ea6:	4621      	mov	r1, r4
 8005ea8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005eac:	4621      	mov	r1, r4
 8005eae:	028a      	lsls	r2, r1, #10
 8005eb0:	4610      	mov	r0, r2
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	60bb      	str	r3, [r7, #8]
 8005eba:	60fa      	str	r2, [r7, #12]
 8005ebc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ec0:	f7fa feea 	bl	8000c98 <__aeabi_uldivmod>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	4613      	mov	r3, r2
 8005eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8005efc <HAL_RCC_GetSysClockFreq+0x180>)
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	0c1b      	lsrs	r3, r3, #16
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005edc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005ee6:	e002      	b.n	8005eee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ee8:	4b05      	ldr	r3, [pc, #20]	@ (8005f00 <HAL_RCC_GetSysClockFreq+0x184>)
 8005eea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3740      	adds	r7, #64	@ 0x40
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005efa:	bf00      	nop
 8005efc:	40023800 	.word	0x40023800
 8005f00:	00f42400 	.word	0x00f42400
 8005f04:	017d7840 	.word	0x017d7840

08005f08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f0c:	4b03      	ldr	r3, [pc, #12]	@ (8005f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	20000014 	.word	0x20000014

08005f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f24:	f7ff fff0 	bl	8005f08 <HAL_RCC_GetHCLKFreq>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	4b05      	ldr	r3, [pc, #20]	@ (8005f40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	0a9b      	lsrs	r3, r3, #10
 8005f30:	f003 0307 	and.w	r3, r3, #7
 8005f34:	4903      	ldr	r1, [pc, #12]	@ (8005f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f36:	5ccb      	ldrb	r3, [r1, r3]
 8005f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	40023800 	.word	0x40023800
 8005f44:	0800effc 	.word	0x0800effc

08005f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f4c:	f7ff ffdc 	bl	8005f08 <HAL_RCC_GetHCLKFreq>
 8005f50:	4602      	mov	r2, r0
 8005f52:	4b05      	ldr	r3, [pc, #20]	@ (8005f68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	0b5b      	lsrs	r3, r3, #13
 8005f58:	f003 0307 	and.w	r3, r3, #7
 8005f5c:	4903      	ldr	r1, [pc, #12]	@ (8005f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f5e:	5ccb      	ldrb	r3, [r1, r3]
 8005f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	40023800 	.word	0x40023800
 8005f6c:	0800effc 	.word	0x0800effc

08005f70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	220f      	movs	r2, #15
 8005f7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005f80:	4b12      	ldr	r3, [pc, #72]	@ (8005fcc <HAL_RCC_GetClockConfig+0x5c>)
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f003 0203 	and.w	r2, r3, #3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8005fcc <HAL_RCC_GetClockConfig+0x5c>)
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005f98:	4b0c      	ldr	r3, [pc, #48]	@ (8005fcc <HAL_RCC_GetClockConfig+0x5c>)
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005fa4:	4b09      	ldr	r3, [pc, #36]	@ (8005fcc <HAL_RCC_GetClockConfig+0x5c>)
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	08db      	lsrs	r3, r3, #3
 8005faa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005fb2:	4b07      	ldr	r3, [pc, #28]	@ (8005fd0 <HAL_RCC_GetClockConfig+0x60>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0207 	and.w	r2, r3, #7
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	601a      	str	r2, [r3, #0]
}
 8005fbe:	bf00      	nop
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	40023800 	.word	0x40023800
 8005fd0:	40023c00 	.word	0x40023c00

08005fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e041      	b.n	800606a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d106      	bne.n	8006000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f839 	bl	8006072 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2202      	movs	r2, #2
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	3304      	adds	r3, #4
 8006010:	4619      	mov	r1, r3
 8006012:	4610      	mov	r0, r2
 8006014:	f000 f9b2 	bl	800637c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006072:	b480      	push	{r7}
 8006074:	b083      	sub	sp, #12
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800607a:	bf00      	nop
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
	...

08006088 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b01      	cmp	r3, #1
 800609a:	d001      	beq.n	80060a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e044      	b.n	800612a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68da      	ldr	r2, [r3, #12]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f042 0201 	orr.w	r2, r2, #1
 80060b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a1e      	ldr	r2, [pc, #120]	@ (8006138 <HAL_TIM_Base_Start_IT+0xb0>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d018      	beq.n	80060f4 <HAL_TIM_Base_Start_IT+0x6c>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060ca:	d013      	beq.n	80060f4 <HAL_TIM_Base_Start_IT+0x6c>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a1a      	ldr	r2, [pc, #104]	@ (800613c <HAL_TIM_Base_Start_IT+0xb4>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d00e      	beq.n	80060f4 <HAL_TIM_Base_Start_IT+0x6c>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a19      	ldr	r2, [pc, #100]	@ (8006140 <HAL_TIM_Base_Start_IT+0xb8>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d009      	beq.n	80060f4 <HAL_TIM_Base_Start_IT+0x6c>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a17      	ldr	r2, [pc, #92]	@ (8006144 <HAL_TIM_Base_Start_IT+0xbc>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d004      	beq.n	80060f4 <HAL_TIM_Base_Start_IT+0x6c>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a16      	ldr	r2, [pc, #88]	@ (8006148 <HAL_TIM_Base_Start_IT+0xc0>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d111      	bne.n	8006118 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f003 0307 	and.w	r3, r3, #7
 80060fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2b06      	cmp	r3, #6
 8006104:	d010      	beq.n	8006128 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f042 0201 	orr.w	r2, r2, #1
 8006114:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006116:	e007      	b.n	8006128 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 0201 	orr.w	r2, r2, #1
 8006126:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	40010000 	.word	0x40010000
 800613c:	40000400 	.word	0x40000400
 8006140:	40000800 	.word	0x40000800
 8006144:	40000c00 	.word	0x40000c00
 8006148:	40014000 	.word	0x40014000

0800614c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	f003 0302 	and.w	r3, r3, #2
 800616a:	2b00      	cmp	r3, #0
 800616c:	d020      	beq.n	80061b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b00      	cmp	r3, #0
 8006176:	d01b      	beq.n	80061b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f06f 0202 	mvn.w	r2, #2
 8006180:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	f003 0303 	and.w	r3, r3, #3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f8d2 	bl	8006340 <HAL_TIM_IC_CaptureCallback>
 800619c:	e005      	b.n	80061aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f8c4 	bl	800632c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 f8d5 	bl	8006354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	f003 0304 	and.w	r3, r3, #4
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d020      	beq.n	80061fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f003 0304 	and.w	r3, r3, #4
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d01b      	beq.n	80061fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f06f 0204 	mvn.w	r2, #4
 80061cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2202      	movs	r2, #2
 80061d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f8ac 	bl	8006340 <HAL_TIM_IC_CaptureCallback>
 80061e8:	e005      	b.n	80061f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f89e 	bl	800632c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f8af 	bl	8006354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f003 0308 	and.w	r3, r3, #8
 8006202:	2b00      	cmp	r3, #0
 8006204:	d020      	beq.n	8006248 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f003 0308 	and.w	r3, r3, #8
 800620c:	2b00      	cmp	r3, #0
 800620e:	d01b      	beq.n	8006248 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f06f 0208 	mvn.w	r2, #8
 8006218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2204      	movs	r2, #4
 800621e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	f003 0303 	and.w	r3, r3, #3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f886 	bl	8006340 <HAL_TIM_IC_CaptureCallback>
 8006234:	e005      	b.n	8006242 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f878 	bl	800632c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 f889 	bl	8006354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f003 0310 	and.w	r3, r3, #16
 800624e:	2b00      	cmp	r3, #0
 8006250:	d020      	beq.n	8006294 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f003 0310 	and.w	r3, r3, #16
 8006258:	2b00      	cmp	r3, #0
 800625a:	d01b      	beq.n	8006294 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f06f 0210 	mvn.w	r2, #16
 8006264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2208      	movs	r2, #8
 800626a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f860 	bl	8006340 <HAL_TIM_IC_CaptureCallback>
 8006280:	e005      	b.n	800628e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f852 	bl	800632c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 f863 	bl	8006354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00c      	beq.n	80062b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f003 0301 	and.w	r3, r3, #1
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d007      	beq.n	80062b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f06f 0201 	mvn.w	r2, #1
 80062b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7fc fde6 	bl	8002e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00c      	beq.n	80062dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d007      	beq.n	80062dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80062d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f8e6 	bl	80064a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00c      	beq.n	8006300 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d007      	beq.n	8006300 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80062f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f834 	bl	8006368 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	f003 0320 	and.w	r3, r3, #32
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00c      	beq.n	8006324 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f003 0320 	and.w	r3, r3, #32
 8006310:	2b00      	cmp	r3, #0
 8006312:	d007      	beq.n	8006324 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f06f 0220 	mvn.w	r2, #32
 800631c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f8b8 	bl	8006494 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006324:	bf00      	nop
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a3a      	ldr	r2, [pc, #232]	@ (8006478 <TIM_Base_SetConfig+0xfc>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d00f      	beq.n	80063b4 <TIM_Base_SetConfig+0x38>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800639a:	d00b      	beq.n	80063b4 <TIM_Base_SetConfig+0x38>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a37      	ldr	r2, [pc, #220]	@ (800647c <TIM_Base_SetConfig+0x100>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d007      	beq.n	80063b4 <TIM_Base_SetConfig+0x38>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a36      	ldr	r2, [pc, #216]	@ (8006480 <TIM_Base_SetConfig+0x104>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d003      	beq.n	80063b4 <TIM_Base_SetConfig+0x38>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a35      	ldr	r2, [pc, #212]	@ (8006484 <TIM_Base_SetConfig+0x108>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d108      	bne.n	80063c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a2b      	ldr	r2, [pc, #172]	@ (8006478 <TIM_Base_SetConfig+0xfc>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d01b      	beq.n	8006406 <TIM_Base_SetConfig+0x8a>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063d4:	d017      	beq.n	8006406 <TIM_Base_SetConfig+0x8a>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a28      	ldr	r2, [pc, #160]	@ (800647c <TIM_Base_SetConfig+0x100>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d013      	beq.n	8006406 <TIM_Base_SetConfig+0x8a>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a27      	ldr	r2, [pc, #156]	@ (8006480 <TIM_Base_SetConfig+0x104>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d00f      	beq.n	8006406 <TIM_Base_SetConfig+0x8a>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a26      	ldr	r2, [pc, #152]	@ (8006484 <TIM_Base_SetConfig+0x108>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d00b      	beq.n	8006406 <TIM_Base_SetConfig+0x8a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a25      	ldr	r2, [pc, #148]	@ (8006488 <TIM_Base_SetConfig+0x10c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d007      	beq.n	8006406 <TIM_Base_SetConfig+0x8a>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a24      	ldr	r2, [pc, #144]	@ (800648c <TIM_Base_SetConfig+0x110>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d003      	beq.n	8006406 <TIM_Base_SetConfig+0x8a>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a23      	ldr	r2, [pc, #140]	@ (8006490 <TIM_Base_SetConfig+0x114>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d108      	bne.n	8006418 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800640c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	4313      	orrs	r3, r2
 8006416:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	4313      	orrs	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	689a      	ldr	r2, [r3, #8]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a0e      	ldr	r2, [pc, #56]	@ (8006478 <TIM_Base_SetConfig+0xfc>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d103      	bne.n	800644c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	691a      	ldr	r2, [r3, #16]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b01      	cmp	r3, #1
 800645c:	d105      	bne.n	800646a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	f023 0201 	bic.w	r2, r3, #1
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	611a      	str	r2, [r3, #16]
  }
}
 800646a:	bf00      	nop
 800646c:	3714      	adds	r7, #20
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	40010000 	.word	0x40010000
 800647c:	40000400 	.word	0x40000400
 8006480:	40000800 	.word	0x40000800
 8006484:	40000c00 	.word	0x40000c00
 8006488:	40014000 	.word	0x40014000
 800648c:	40014400 	.word	0x40014400
 8006490:	40014800 	.word	0x40014800

08006494 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e042      	b.n	8006554 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d106      	bne.n	80064e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7fc feb6 	bl	8003254 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2224      	movs	r2, #36	@ 0x24
 80064ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68da      	ldr	r2, [r3, #12]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 f9a5 	bl	8006850 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	691a      	ldr	r2, [r3, #16]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006514:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	695a      	ldr	r2, [r3, #20]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006524:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68da      	ldr	r2, [r3, #12]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006534:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2220      	movs	r2, #32
 8006540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2220      	movs	r2, #32
 8006548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e024      	b.n	80065b8 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2224      	movs	r2, #36	@ 0x24
 8006572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68da      	ldr	r2, [r3, #12]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006584:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7fc fee0 	bl	800334c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3708      	adds	r7, #8
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b08a      	sub	sp, #40	@ 0x28
 80065c4:	af02      	add	r7, sp, #8
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	603b      	str	r3, [r7, #0]
 80065cc:	4613      	mov	r3, r2
 80065ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b20      	cmp	r3, #32
 80065de:	d175      	bne.n	80066cc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d002      	beq.n	80065ec <HAL_UART_Transmit+0x2c>
 80065e6:	88fb      	ldrh	r3, [r7, #6]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d101      	bne.n	80065f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e06e      	b.n	80066ce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2221      	movs	r2, #33	@ 0x21
 80065fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065fe:	f7fc ff27 	bl	8003450 <HAL_GetTick>
 8006602:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	88fa      	ldrh	r2, [r7, #6]
 8006608:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	88fa      	ldrh	r2, [r7, #6]
 800660e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006618:	d108      	bne.n	800662c <HAL_UART_Transmit+0x6c>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d104      	bne.n	800662c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006622:	2300      	movs	r3, #0
 8006624:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	61bb      	str	r3, [r7, #24]
 800662a:	e003      	b.n	8006634 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006630:	2300      	movs	r3, #0
 8006632:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006634:	e02e      	b.n	8006694 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	2200      	movs	r2, #0
 800663e:	2180      	movs	r1, #128	@ 0x80
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f000 f848 	bl	80066d6 <UART_WaitOnFlagUntilTimeout>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d005      	beq.n	8006658 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2220      	movs	r2, #32
 8006650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e03a      	b.n	80066ce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10b      	bne.n	8006676 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	881b      	ldrh	r3, [r3, #0]
 8006662:	461a      	mov	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800666c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	3302      	adds	r3, #2
 8006672:	61bb      	str	r3, [r7, #24]
 8006674:	e007      	b.n	8006686 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	781a      	ldrb	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	3301      	adds	r3, #1
 8006684:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800668a:	b29b      	uxth	r3, r3
 800668c:	3b01      	subs	r3, #1
 800668e:	b29a      	uxth	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006698:	b29b      	uxth	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1cb      	bne.n	8006636 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2200      	movs	r2, #0
 80066a6:	2140      	movs	r1, #64	@ 0x40
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f000 f814 	bl	80066d6 <UART_WaitOnFlagUntilTimeout>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d005      	beq.n	80066c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2220      	movs	r2, #32
 80066b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e006      	b.n	80066ce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2220      	movs	r2, #32
 80066c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	e000      	b.n	80066ce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80066cc:	2302      	movs	r3, #2
  }
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3720      	adds	r7, #32
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b086      	sub	sp, #24
 80066da:	af00      	add	r7, sp, #0
 80066dc:	60f8      	str	r0, [r7, #12]
 80066de:	60b9      	str	r1, [r7, #8]
 80066e0:	603b      	str	r3, [r7, #0]
 80066e2:	4613      	mov	r3, r2
 80066e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066e6:	e03b      	b.n	8006760 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066e8:	6a3b      	ldr	r3, [r7, #32]
 80066ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ee:	d037      	beq.n	8006760 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066f0:	f7fc feae 	bl	8003450 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	6a3a      	ldr	r2, [r7, #32]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d302      	bcc.n	8006706 <UART_WaitOnFlagUntilTimeout+0x30>
 8006700:	6a3b      	ldr	r3, [r7, #32]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e03a      	b.n	8006780 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	f003 0304 	and.w	r3, r3, #4
 8006714:	2b00      	cmp	r3, #0
 8006716:	d023      	beq.n	8006760 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	2b80      	cmp	r3, #128	@ 0x80
 800671c:	d020      	beq.n	8006760 <UART_WaitOnFlagUntilTimeout+0x8a>
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	2b40      	cmp	r3, #64	@ 0x40
 8006722:	d01d      	beq.n	8006760 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0308 	and.w	r3, r3, #8
 800672e:	2b08      	cmp	r3, #8
 8006730:	d116      	bne.n	8006760 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006732:	2300      	movs	r3, #0
 8006734:	617b      	str	r3, [r7, #20]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	617b      	str	r3, [r7, #20]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	617b      	str	r3, [r7, #20]
 8006746:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f000 f81d 	bl	8006788 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2208      	movs	r2, #8
 8006752:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e00f      	b.n	8006780 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	4013      	ands	r3, r2
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	429a      	cmp	r2, r3
 800676e:	bf0c      	ite	eq
 8006770:	2301      	moveq	r3, #1
 8006772:	2300      	movne	r3, #0
 8006774:	b2db      	uxtb	r3, r3
 8006776:	461a      	mov	r2, r3
 8006778:	79fb      	ldrb	r3, [r7, #7]
 800677a:	429a      	cmp	r2, r3
 800677c:	d0b4      	beq.n	80066e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3718      	adds	r7, #24
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006788:	b480      	push	{r7}
 800678a:	b095      	sub	sp, #84	@ 0x54
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	330c      	adds	r3, #12
 8006796:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800679a:	e853 3f00 	ldrex	r3, [r3]
 800679e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80067a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	330c      	adds	r3, #12
 80067ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80067b0:	643a      	str	r2, [r7, #64]	@ 0x40
 80067b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80067b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067b8:	e841 2300 	strex	r3, r2, [r1]
 80067bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1e5      	bne.n	8006790 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	3314      	adds	r3, #20
 80067ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067cc:	6a3b      	ldr	r3, [r7, #32]
 80067ce:	e853 3f00 	ldrex	r3, [r3]
 80067d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	f023 0301 	bic.w	r3, r3, #1
 80067da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	3314      	adds	r3, #20
 80067e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067ec:	e841 2300 	strex	r3, r2, [r1]
 80067f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1e5      	bne.n	80067c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d119      	bne.n	8006834 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	330c      	adds	r3, #12
 8006806:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	e853 3f00 	ldrex	r3, [r3]
 800680e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	f023 0310 	bic.w	r3, r3, #16
 8006816:	647b      	str	r3, [r7, #68]	@ 0x44
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	330c      	adds	r3, #12
 800681e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006820:	61ba      	str	r2, [r7, #24]
 8006822:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006824:	6979      	ldr	r1, [r7, #20]
 8006826:	69ba      	ldr	r2, [r7, #24]
 8006828:	e841 2300 	strex	r3, r2, [r1]
 800682c:	613b      	str	r3, [r7, #16]
   return(result);
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1e5      	bne.n	8006800 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2220      	movs	r2, #32
 8006838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006842:	bf00      	nop
 8006844:	3754      	adds	r7, #84	@ 0x54
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
	...

08006850 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006854:	b0c0      	sub	sp, #256	@ 0x100
 8006856:	af00      	add	r7, sp, #0
 8006858:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800685c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800686c:	68d9      	ldr	r1, [r3, #12]
 800686e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	ea40 0301 	orr.w	r3, r0, r1
 8006878:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800687a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800687e:	689a      	ldr	r2, [r3, #8]
 8006880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	431a      	orrs	r2, r3
 8006888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	431a      	orrs	r2, r3
 8006890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	4313      	orrs	r3, r2
 8006898:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800689c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80068a8:	f021 010c 	bic.w	r1, r1, #12
 80068ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80068b6:	430b      	orrs	r3, r1
 80068b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80068c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068ca:	6999      	ldr	r1, [r3, #24]
 80068cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	ea40 0301 	orr.w	r3, r0, r1
 80068d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	4b8f      	ldr	r3, [pc, #572]	@ (8006b1c <UART_SetConfig+0x2cc>)
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d005      	beq.n	80068f0 <UART_SetConfig+0xa0>
 80068e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	4b8d      	ldr	r3, [pc, #564]	@ (8006b20 <UART_SetConfig+0x2d0>)
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d104      	bne.n	80068fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80068f0:	f7ff fb2a 	bl	8005f48 <HAL_RCC_GetPCLK2Freq>
 80068f4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80068f8:	e003      	b.n	8006902 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80068fa:	f7ff fb11 	bl	8005f20 <HAL_RCC_GetPCLK1Freq>
 80068fe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006906:	69db      	ldr	r3, [r3, #28]
 8006908:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800690c:	f040 810c 	bne.w	8006b28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006914:	2200      	movs	r2, #0
 8006916:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800691a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800691e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006922:	4622      	mov	r2, r4
 8006924:	462b      	mov	r3, r5
 8006926:	1891      	adds	r1, r2, r2
 8006928:	65b9      	str	r1, [r7, #88]	@ 0x58
 800692a:	415b      	adcs	r3, r3
 800692c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800692e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006932:	4621      	mov	r1, r4
 8006934:	eb12 0801 	adds.w	r8, r2, r1
 8006938:	4629      	mov	r1, r5
 800693a:	eb43 0901 	adc.w	r9, r3, r1
 800693e:	f04f 0200 	mov.w	r2, #0
 8006942:	f04f 0300 	mov.w	r3, #0
 8006946:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800694a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800694e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006952:	4690      	mov	r8, r2
 8006954:	4699      	mov	r9, r3
 8006956:	4623      	mov	r3, r4
 8006958:	eb18 0303 	adds.w	r3, r8, r3
 800695c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006960:	462b      	mov	r3, r5
 8006962:	eb49 0303 	adc.w	r3, r9, r3
 8006966:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800696a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006976:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800697a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800697e:	460b      	mov	r3, r1
 8006980:	18db      	adds	r3, r3, r3
 8006982:	653b      	str	r3, [r7, #80]	@ 0x50
 8006984:	4613      	mov	r3, r2
 8006986:	eb42 0303 	adc.w	r3, r2, r3
 800698a:	657b      	str	r3, [r7, #84]	@ 0x54
 800698c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006990:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006994:	f7fa f980 	bl	8000c98 <__aeabi_uldivmod>
 8006998:	4602      	mov	r2, r0
 800699a:	460b      	mov	r3, r1
 800699c:	4b61      	ldr	r3, [pc, #388]	@ (8006b24 <UART_SetConfig+0x2d4>)
 800699e:	fba3 2302 	umull	r2, r3, r3, r2
 80069a2:	095b      	lsrs	r3, r3, #5
 80069a4:	011c      	lsls	r4, r3, #4
 80069a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80069b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80069b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80069b8:	4642      	mov	r2, r8
 80069ba:	464b      	mov	r3, r9
 80069bc:	1891      	adds	r1, r2, r2
 80069be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80069c0:	415b      	adcs	r3, r3
 80069c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80069c8:	4641      	mov	r1, r8
 80069ca:	eb12 0a01 	adds.w	sl, r2, r1
 80069ce:	4649      	mov	r1, r9
 80069d0:	eb43 0b01 	adc.w	fp, r3, r1
 80069d4:	f04f 0200 	mov.w	r2, #0
 80069d8:	f04f 0300 	mov.w	r3, #0
 80069dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80069e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80069e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069e8:	4692      	mov	sl, r2
 80069ea:	469b      	mov	fp, r3
 80069ec:	4643      	mov	r3, r8
 80069ee:	eb1a 0303 	adds.w	r3, sl, r3
 80069f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80069f6:	464b      	mov	r3, r9
 80069f8:	eb4b 0303 	adc.w	r3, fp, r3
 80069fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a0c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006a10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006a14:	460b      	mov	r3, r1
 8006a16:	18db      	adds	r3, r3, r3
 8006a18:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	eb42 0303 	adc.w	r3, r2, r3
 8006a20:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006a26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006a2a:	f7fa f935 	bl	8000c98 <__aeabi_uldivmod>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	460b      	mov	r3, r1
 8006a32:	4611      	mov	r1, r2
 8006a34:	4b3b      	ldr	r3, [pc, #236]	@ (8006b24 <UART_SetConfig+0x2d4>)
 8006a36:	fba3 2301 	umull	r2, r3, r3, r1
 8006a3a:	095b      	lsrs	r3, r3, #5
 8006a3c:	2264      	movs	r2, #100	@ 0x64
 8006a3e:	fb02 f303 	mul.w	r3, r2, r3
 8006a42:	1acb      	subs	r3, r1, r3
 8006a44:	00db      	lsls	r3, r3, #3
 8006a46:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006a4a:	4b36      	ldr	r3, [pc, #216]	@ (8006b24 <UART_SetConfig+0x2d4>)
 8006a4c:	fba3 2302 	umull	r2, r3, r3, r2
 8006a50:	095b      	lsrs	r3, r3, #5
 8006a52:	005b      	lsls	r3, r3, #1
 8006a54:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006a58:	441c      	add	r4, r3
 8006a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a64:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006a68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006a6c:	4642      	mov	r2, r8
 8006a6e:	464b      	mov	r3, r9
 8006a70:	1891      	adds	r1, r2, r2
 8006a72:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006a74:	415b      	adcs	r3, r3
 8006a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006a7c:	4641      	mov	r1, r8
 8006a7e:	1851      	adds	r1, r2, r1
 8006a80:	6339      	str	r1, [r7, #48]	@ 0x30
 8006a82:	4649      	mov	r1, r9
 8006a84:	414b      	adcs	r3, r1
 8006a86:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a88:	f04f 0200 	mov.w	r2, #0
 8006a8c:	f04f 0300 	mov.w	r3, #0
 8006a90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006a94:	4659      	mov	r1, fp
 8006a96:	00cb      	lsls	r3, r1, #3
 8006a98:	4651      	mov	r1, sl
 8006a9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a9e:	4651      	mov	r1, sl
 8006aa0:	00ca      	lsls	r2, r1, #3
 8006aa2:	4610      	mov	r0, r2
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	4642      	mov	r2, r8
 8006aaa:	189b      	adds	r3, r3, r2
 8006aac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ab0:	464b      	mov	r3, r9
 8006ab2:	460a      	mov	r2, r1
 8006ab4:	eb42 0303 	adc.w	r3, r2, r3
 8006ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ac8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006acc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	18db      	adds	r3, r3, r3
 8006ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	eb42 0303 	adc.w	r3, r2, r3
 8006adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ade:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006ae2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006ae6:	f7fa f8d7 	bl	8000c98 <__aeabi_uldivmod>
 8006aea:	4602      	mov	r2, r0
 8006aec:	460b      	mov	r3, r1
 8006aee:	4b0d      	ldr	r3, [pc, #52]	@ (8006b24 <UART_SetConfig+0x2d4>)
 8006af0:	fba3 1302 	umull	r1, r3, r3, r2
 8006af4:	095b      	lsrs	r3, r3, #5
 8006af6:	2164      	movs	r1, #100	@ 0x64
 8006af8:	fb01 f303 	mul.w	r3, r1, r3
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	00db      	lsls	r3, r3, #3
 8006b00:	3332      	adds	r3, #50	@ 0x32
 8006b02:	4a08      	ldr	r2, [pc, #32]	@ (8006b24 <UART_SetConfig+0x2d4>)
 8006b04:	fba2 2303 	umull	r2, r3, r2, r3
 8006b08:	095b      	lsrs	r3, r3, #5
 8006b0a:	f003 0207 	and.w	r2, r3, #7
 8006b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4422      	add	r2, r4
 8006b16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b18:	e106      	b.n	8006d28 <UART_SetConfig+0x4d8>
 8006b1a:	bf00      	nop
 8006b1c:	40011000 	.word	0x40011000
 8006b20:	40011400 	.word	0x40011400
 8006b24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006b32:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006b36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006b3a:	4642      	mov	r2, r8
 8006b3c:	464b      	mov	r3, r9
 8006b3e:	1891      	adds	r1, r2, r2
 8006b40:	6239      	str	r1, [r7, #32]
 8006b42:	415b      	adcs	r3, r3
 8006b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b4a:	4641      	mov	r1, r8
 8006b4c:	1854      	adds	r4, r2, r1
 8006b4e:	4649      	mov	r1, r9
 8006b50:	eb43 0501 	adc.w	r5, r3, r1
 8006b54:	f04f 0200 	mov.w	r2, #0
 8006b58:	f04f 0300 	mov.w	r3, #0
 8006b5c:	00eb      	lsls	r3, r5, #3
 8006b5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b62:	00e2      	lsls	r2, r4, #3
 8006b64:	4614      	mov	r4, r2
 8006b66:	461d      	mov	r5, r3
 8006b68:	4643      	mov	r3, r8
 8006b6a:	18e3      	adds	r3, r4, r3
 8006b6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006b70:	464b      	mov	r3, r9
 8006b72:	eb45 0303 	adc.w	r3, r5, r3
 8006b76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b86:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006b8a:	f04f 0200 	mov.w	r2, #0
 8006b8e:	f04f 0300 	mov.w	r3, #0
 8006b92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006b96:	4629      	mov	r1, r5
 8006b98:	008b      	lsls	r3, r1, #2
 8006b9a:	4621      	mov	r1, r4
 8006b9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ba0:	4621      	mov	r1, r4
 8006ba2:	008a      	lsls	r2, r1, #2
 8006ba4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006ba8:	f7fa f876 	bl	8000c98 <__aeabi_uldivmod>
 8006bac:	4602      	mov	r2, r0
 8006bae:	460b      	mov	r3, r1
 8006bb0:	4b60      	ldr	r3, [pc, #384]	@ (8006d34 <UART_SetConfig+0x4e4>)
 8006bb2:	fba3 2302 	umull	r2, r3, r3, r2
 8006bb6:	095b      	lsrs	r3, r3, #5
 8006bb8:	011c      	lsls	r4, r3, #4
 8006bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006bc4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006bc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006bcc:	4642      	mov	r2, r8
 8006bce:	464b      	mov	r3, r9
 8006bd0:	1891      	adds	r1, r2, r2
 8006bd2:	61b9      	str	r1, [r7, #24]
 8006bd4:	415b      	adcs	r3, r3
 8006bd6:	61fb      	str	r3, [r7, #28]
 8006bd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bdc:	4641      	mov	r1, r8
 8006bde:	1851      	adds	r1, r2, r1
 8006be0:	6139      	str	r1, [r7, #16]
 8006be2:	4649      	mov	r1, r9
 8006be4:	414b      	adcs	r3, r1
 8006be6:	617b      	str	r3, [r7, #20]
 8006be8:	f04f 0200 	mov.w	r2, #0
 8006bec:	f04f 0300 	mov.w	r3, #0
 8006bf0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006bf4:	4659      	mov	r1, fp
 8006bf6:	00cb      	lsls	r3, r1, #3
 8006bf8:	4651      	mov	r1, sl
 8006bfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bfe:	4651      	mov	r1, sl
 8006c00:	00ca      	lsls	r2, r1, #3
 8006c02:	4610      	mov	r0, r2
 8006c04:	4619      	mov	r1, r3
 8006c06:	4603      	mov	r3, r0
 8006c08:	4642      	mov	r2, r8
 8006c0a:	189b      	adds	r3, r3, r2
 8006c0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c10:	464b      	mov	r3, r9
 8006c12:	460a      	mov	r2, r1
 8006c14:	eb42 0303 	adc.w	r3, r2, r3
 8006c18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c26:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006c28:	f04f 0200 	mov.w	r2, #0
 8006c2c:	f04f 0300 	mov.w	r3, #0
 8006c30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006c34:	4649      	mov	r1, r9
 8006c36:	008b      	lsls	r3, r1, #2
 8006c38:	4641      	mov	r1, r8
 8006c3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c3e:	4641      	mov	r1, r8
 8006c40:	008a      	lsls	r2, r1, #2
 8006c42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006c46:	f7fa f827 	bl	8000c98 <__aeabi_uldivmod>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4611      	mov	r1, r2
 8006c50:	4b38      	ldr	r3, [pc, #224]	@ (8006d34 <UART_SetConfig+0x4e4>)
 8006c52:	fba3 2301 	umull	r2, r3, r3, r1
 8006c56:	095b      	lsrs	r3, r3, #5
 8006c58:	2264      	movs	r2, #100	@ 0x64
 8006c5a:	fb02 f303 	mul.w	r3, r2, r3
 8006c5e:	1acb      	subs	r3, r1, r3
 8006c60:	011b      	lsls	r3, r3, #4
 8006c62:	3332      	adds	r3, #50	@ 0x32
 8006c64:	4a33      	ldr	r2, [pc, #204]	@ (8006d34 <UART_SetConfig+0x4e4>)
 8006c66:	fba2 2303 	umull	r2, r3, r2, r3
 8006c6a:	095b      	lsrs	r3, r3, #5
 8006c6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c70:	441c      	add	r4, r3
 8006c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c76:	2200      	movs	r2, #0
 8006c78:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c7a:	677a      	str	r2, [r7, #116]	@ 0x74
 8006c7c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006c80:	4642      	mov	r2, r8
 8006c82:	464b      	mov	r3, r9
 8006c84:	1891      	adds	r1, r2, r2
 8006c86:	60b9      	str	r1, [r7, #8]
 8006c88:	415b      	adcs	r3, r3
 8006c8a:	60fb      	str	r3, [r7, #12]
 8006c8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c90:	4641      	mov	r1, r8
 8006c92:	1851      	adds	r1, r2, r1
 8006c94:	6039      	str	r1, [r7, #0]
 8006c96:	4649      	mov	r1, r9
 8006c98:	414b      	adcs	r3, r1
 8006c9a:	607b      	str	r3, [r7, #4]
 8006c9c:	f04f 0200 	mov.w	r2, #0
 8006ca0:	f04f 0300 	mov.w	r3, #0
 8006ca4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ca8:	4659      	mov	r1, fp
 8006caa:	00cb      	lsls	r3, r1, #3
 8006cac:	4651      	mov	r1, sl
 8006cae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cb2:	4651      	mov	r1, sl
 8006cb4:	00ca      	lsls	r2, r1, #3
 8006cb6:	4610      	mov	r0, r2
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4603      	mov	r3, r0
 8006cbc:	4642      	mov	r2, r8
 8006cbe:	189b      	adds	r3, r3, r2
 8006cc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cc2:	464b      	mov	r3, r9
 8006cc4:	460a      	mov	r2, r1
 8006cc6:	eb42 0303 	adc.w	r3, r2, r3
 8006cca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	663b      	str	r3, [r7, #96]	@ 0x60
 8006cd6:	667a      	str	r2, [r7, #100]	@ 0x64
 8006cd8:	f04f 0200 	mov.w	r2, #0
 8006cdc:	f04f 0300 	mov.w	r3, #0
 8006ce0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006ce4:	4649      	mov	r1, r9
 8006ce6:	008b      	lsls	r3, r1, #2
 8006ce8:	4641      	mov	r1, r8
 8006cea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cee:	4641      	mov	r1, r8
 8006cf0:	008a      	lsls	r2, r1, #2
 8006cf2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006cf6:	f7f9 ffcf 	bl	8000c98 <__aeabi_uldivmod>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8006d34 <UART_SetConfig+0x4e4>)
 8006d00:	fba3 1302 	umull	r1, r3, r3, r2
 8006d04:	095b      	lsrs	r3, r3, #5
 8006d06:	2164      	movs	r1, #100	@ 0x64
 8006d08:	fb01 f303 	mul.w	r3, r1, r3
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	011b      	lsls	r3, r3, #4
 8006d10:	3332      	adds	r3, #50	@ 0x32
 8006d12:	4a08      	ldr	r2, [pc, #32]	@ (8006d34 <UART_SetConfig+0x4e4>)
 8006d14:	fba2 2303 	umull	r2, r3, r2, r3
 8006d18:	095b      	lsrs	r3, r3, #5
 8006d1a:	f003 020f 	and.w	r2, r3, #15
 8006d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4422      	add	r2, r4
 8006d26:	609a      	str	r2, [r3, #8]
}
 8006d28:	bf00      	nop
 8006d2a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d34:	51eb851f 	.word	0x51eb851f

08006d38 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	4603      	mov	r3, r0
 8006d40:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006d42:	2300      	movs	r3, #0
 8006d44:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006d46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d4a:	2b84      	cmp	r3, #132	@ 0x84
 8006d4c:	d005      	beq.n	8006d5a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006d4e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	4413      	add	r3, r2
 8006d56:	3303      	adds	r3, #3
 8006d58:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3714      	adds	r7, #20
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d6e:	f3ef 8305 	mrs	r3, IPSR
 8006d72:	607b      	str	r3, [r7, #4]
  return(result);
 8006d74:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	bf14      	ite	ne
 8006d7a:	2301      	movne	r3, #1
 8006d7c:	2300      	moveq	r3, #0
 8006d7e:	b2db      	uxtb	r3, r3
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006d90:	f001 fd98 	bl	80088c4 <vTaskStartScheduler>
  
  return osOK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006d9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d9c:	b089      	sub	sp, #36	@ 0x24
 8006d9e:	af04      	add	r7, sp, #16
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	695b      	ldr	r3, [r3, #20]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d020      	beq.n	8006dee <osThreadCreate+0x54>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d01c      	beq.n	8006dee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685c      	ldr	r4, [r3, #4]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	691e      	ldr	r6, [r3, #16]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7ff ffb6 	bl	8006d38 <makeFreeRtosPriority>
 8006dcc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006dd6:	9202      	str	r2, [sp, #8]
 8006dd8:	9301      	str	r3, [sp, #4]
 8006dda:	9100      	str	r1, [sp, #0]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	4632      	mov	r2, r6
 8006de0:	4629      	mov	r1, r5
 8006de2:	4620      	mov	r0, r4
 8006de4:	f001 f9f2 	bl	80081cc <xTaskCreateStatic>
 8006de8:	4603      	mov	r3, r0
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	e01c      	b.n	8006e28 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685c      	ldr	r4, [r3, #4]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006dfa:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7ff ff98 	bl	8006d38 <makeFreeRtosPriority>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	f107 030c 	add.w	r3, r7, #12
 8006e0e:	9301      	str	r3, [sp, #4]
 8006e10:	9200      	str	r2, [sp, #0]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	4632      	mov	r2, r6
 8006e16:	4629      	mov	r1, r5
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f001 fa37 	bl	800828c <xTaskCreate>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d001      	beq.n	8006e28 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006e24:	2300      	movs	r3, #0
 8006e26:	e000      	b.n	8006e2a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006e28:	68fb      	ldr	r3, [r7, #12]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006e32 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b084      	sub	sp, #16
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d001      	beq.n	8006e48 <osDelay+0x16>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	e000      	b.n	8006e4a <osDelay+0x18>
 8006e48:	2301      	movs	r3, #1
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f001 fb6e 	bl	800852c <vTaskDelay>
  
  return osOK;
 8006e50:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
	...

08006e5c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b086      	sub	sp, #24
 8006e60:	af02      	add	r7, sp, #8
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	460b      	mov	r3, r1
 8006e66:	607a      	str	r2, [r7, #4]
 8006e68:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d013      	beq.n	8006e9a <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8006e72:	7afb      	ldrb	r3, [r7, #11]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d101      	bne.n	8006e7c <osTimerCreate+0x20>
 8006e78:	2101      	movs	r1, #1
 8006e7a:	e000      	b.n	8006e7e <osTimerCreate+0x22>
 8006e7c:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8006e86:	9201      	str	r2, [sp, #4]
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	460a      	mov	r2, r1
 8006e8e:	2101      	movs	r1, #1
 8006e90:	480b      	ldr	r0, [pc, #44]	@ (8006ec0 <osTimerCreate+0x64>)
 8006e92:	f002 fc0a 	bl	80096aa <xTimerCreateStatic>
 8006e96:	4603      	mov	r3, r0
 8006e98:	e00e      	b.n	8006eb8 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8006e9a:	7afb      	ldrb	r3, [r7, #11]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d101      	bne.n	8006ea4 <osTimerCreate+0x48>
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	e000      	b.n	8006ea6 <osTimerCreate+0x4a>
 8006ea4:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8006eaa:	9300      	str	r3, [sp, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2101      	movs	r1, #1
 8006eb0:	4803      	ldr	r0, [pc, #12]	@ (8006ec0 <osTimerCreate+0x64>)
 8006eb2:	f002 fbd9 	bl	8009668 <xTimerCreate>
 8006eb6:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	0800efd0 	.word	0x0800efd0

08006ec4 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b088      	sub	sp, #32
 8006ec8:	af02      	add	r7, sp, #8
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <osTimerStart+0x20>
    ticks = 1;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8006ee4:	f7ff ff40 	bl	8006d68 <inHandlerMode>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d01a      	beq.n	8006f24 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8006eee:	f107 030c 	add.w	r3, r7, #12
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	9200      	str	r2, [sp, #0]
 8006ef6:	693a      	ldr	r2, [r7, #16]
 8006ef8:	2109      	movs	r1, #9
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f002 fc52 	bl	80097a4 <xTimerGenericCommand>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d002      	beq.n	8006f0c <osTimerStart+0x48>
    {
      result = osErrorOS;
 8006f06:	23ff      	movs	r3, #255	@ 0xff
 8006f08:	617b      	str	r3, [r7, #20]
 8006f0a:	e018      	b.n	8006f3e <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d015      	beq.n	8006f3e <osTimerStart+0x7a>
 8006f12:	4b0d      	ldr	r3, [pc, #52]	@ (8006f48 <osTimerStart+0x84>)
 8006f14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f18:	601a      	str	r2, [r3, #0]
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	e00c      	b.n	8006f3e <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8006f24:	2300      	movs	r3, #0
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	2300      	movs	r3, #0
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	2104      	movs	r1, #4
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f002 fc38 	bl	80097a4 <xTimerGenericCommand>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d001      	beq.n	8006f3e <osTimerStart+0x7a>
      result = osErrorOS;
 8006f3a:	23ff      	movs	r3, #255	@ 0xff
 8006f3c:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8006f3e:	697b      	ldr	r3, [r7, #20]
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3718      	adds	r7, #24
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	e000ed04 	.word	0xe000ed04

08006f4c <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b086      	sub	sp, #24
 8006f50:	af02      	add	r7, sp, #8
 8006f52:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006f54:	2300      	movs	r3, #0
 8006f56:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 8006f5c:	f7ff ff04 	bl	8006d68 <inHandlerMode>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d019      	beq.n	8006f9a <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 8006f66:	f107 0308 	add.w	r3, r7, #8
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	9200      	str	r2, [sp, #0]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	2108      	movs	r1, #8
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f002 fc16 	bl	80097a4 <xTimerGenericCommand>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d001      	beq.n	8006f82 <osTimerStop+0x36>
      return osErrorOS;
 8006f7e:	23ff      	movs	r3, #255	@ 0xff
 8006f80:	e019      	b.n	8006fb6 <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d015      	beq.n	8006fb4 <osTimerStop+0x68>
 8006f88:	4b0d      	ldr	r3, [pc, #52]	@ (8006fc0 <osTimerStop+0x74>)
 8006f8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f8e:	601a      	str	r2, [r3, #0]
 8006f90:	f3bf 8f4f 	dsb	sy
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	e00c      	b.n	8006fb4 <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	9300      	str	r3, [sp, #0]
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	2103      	movs	r1, #3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f002 fbfd 	bl	80097a4 <xTimerGenericCommand>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d001      	beq.n	8006fb4 <osTimerStop+0x68>
      result = osErrorOS;
 8006fb0:	23ff      	movs	r3, #255	@ 0xff
 8006fb2:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	e000ed04 	.word	0xe000ed04

08006fc4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b086      	sub	sp, #24
 8006fc8:	af02      	add	r7, sp, #8
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00f      	beq.n	8006ff6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d10a      	bne.n	8006ff2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	2203      	movs	r2, #3
 8006fe2:	9200      	str	r2, [sp, #0]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	2001      	movs	r0, #1
 8006fea:	f000 f9ed 	bl	80073c8 <xQueueGenericCreateStatic>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	e016      	b.n	8007020 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	e014      	b.n	8007020 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d110      	bne.n	800701e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006ffc:	2203      	movs	r2, #3
 8006ffe:	2100      	movs	r1, #0
 8007000:	2001      	movs	r0, #1
 8007002:	f000 fa5e 	bl	80074c2 <xQueueGenericCreate>
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d005      	beq.n	800701a <osSemaphoreCreate+0x56>
 800700e:	2300      	movs	r3, #0
 8007010:	2200      	movs	r2, #0
 8007012:	2100      	movs	r1, #0
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f000 faaf 	bl	8007578 <xQueueGenericSend>
      return sema;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	e000      	b.n	8007020 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800701e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8007020:	4618      	mov	r0, r3
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007032:	2300      	movs	r3, #0
 8007034:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d101      	bne.n	8007040 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800703c:	2380      	movs	r3, #128	@ 0x80
 800703e:	e03a      	b.n	80070b6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007040:	2300      	movs	r3, #0
 8007042:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704a:	d103      	bne.n	8007054 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800704c:	f04f 33ff 	mov.w	r3, #4294967295
 8007050:	60fb      	str	r3, [r7, #12]
 8007052:	e009      	b.n	8007068 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d006      	beq.n	8007068 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <osSemaphoreWait+0x40>
      ticks = 1;
 8007064:	2301      	movs	r3, #1
 8007066:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007068:	f7ff fe7e 	bl	8006d68 <inHandlerMode>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d017      	beq.n	80070a2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007072:	f107 0308 	add.w	r3, r7, #8
 8007076:	461a      	mov	r2, r3
 8007078:	2100      	movs	r1, #0
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fe9e 	bl	8007dbc <xQueueReceiveFromISR>
 8007080:	4603      	mov	r3, r0
 8007082:	2b01      	cmp	r3, #1
 8007084:	d001      	beq.n	800708a <osSemaphoreWait+0x62>
      return osErrorOS;
 8007086:	23ff      	movs	r3, #255	@ 0xff
 8007088:	e015      	b.n	80070b6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d011      	beq.n	80070b4 <osSemaphoreWait+0x8c>
 8007090:	4b0b      	ldr	r3, [pc, #44]	@ (80070c0 <osSemaphoreWait+0x98>)
 8007092:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007096:	601a      	str	r2, [r3, #0]
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	e008      	b.n	80070b4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80070a2:	68f9      	ldr	r1, [r7, #12]
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 fd79 	bl	8007b9c <xQueueSemaphoreTake>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d001      	beq.n	80070b4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80070b0:	23ff      	movs	r3, #255	@ 0xff
 80070b2:	e000      	b.n	80070b6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	e000ed04 	.word	0xe000ed04

080070c4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80070cc:	2300      	movs	r3, #0
 80070ce:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80070d0:	2300      	movs	r3, #0
 80070d2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80070d4:	f7ff fe48 	bl	8006d68 <inHandlerMode>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d016      	beq.n	800710c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80070de:	f107 0308 	add.w	r3, r7, #8
 80070e2:	4619      	mov	r1, r3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fbe7 	bl	80078b8 <xQueueGiveFromISR>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d001      	beq.n	80070f4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80070f0:	23ff      	movs	r3, #255	@ 0xff
 80070f2:	e017      	b.n	8007124 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d013      	beq.n	8007122 <osSemaphoreRelease+0x5e>
 80070fa:	4b0c      	ldr	r3, [pc, #48]	@ (800712c <osSemaphoreRelease+0x68>)
 80070fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007100:	601a      	str	r2, [r3, #0]
 8007102:	f3bf 8f4f 	dsb	sy
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	e00a      	b.n	8007122 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800710c:	2300      	movs	r3, #0
 800710e:	2200      	movs	r2, #0
 8007110:	2100      	movs	r1, #0
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fa30 	bl	8007578 <xQueueGenericSend>
 8007118:	4603      	mov	r3, r0
 800711a:	2b01      	cmp	r3, #1
 800711c:	d001      	beq.n	8007122 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800711e:	23ff      	movs	r3, #255	@ 0xff
 8007120:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007122:	68fb      	ldr	r3, [r7, #12]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	e000ed04 	.word	0xe000ed04

08007130 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f001 fa2d 	bl	8008598 <vTaskSuspend>
  
  return osOK;
 800713e:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8007140:	4618      	mov	r0, r3
 8007142:	3708      	adds	r7, #8
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8007150:	f7ff fe0a 	bl	8006d68 <inHandlerMode>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00e      	beq.n	8007178 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f001 fb40 	bl	80087e0 <xTaskResumeFromISR>
 8007160:	4603      	mov	r3, r0
 8007162:	2b01      	cmp	r3, #1
 8007164:	d10b      	bne.n	800717e <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8007166:	4b08      	ldr	r3, [pc, #32]	@ (8007188 <osThreadResume+0x40>)
 8007168:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800716c:	601a      	str	r2, [r3, #0]
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	f3bf 8f6f 	isb	sy
 8007176:	e002      	b.n	800717e <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f001 fad3 	bl	8008724 <vTaskResume>
  }
  return osOK;
 800717e:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8007180:	4618      	mov	r0, r3
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	e000ed04 	.word	0xe000ed04

0800718c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f103 0208 	add.w	r2, r3, #8
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f04f 32ff 	mov.w	r2, #4294967295
 80071a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f103 0208 	add.w	r2, r3, #8
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f103 0208 	add.w	r2, r3, #8
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80071da:	bf00      	nop
 80071dc:	370c      	adds	r7, #12
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071e6:	b480      	push	{r7}
 80071e8:	b085      	sub	sp, #20
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	689a      	ldr	r2, [r3, #8]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	683a      	ldr	r2, [r7, #0]
 800720a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	683a      	ldr	r2, [r7, #0]
 8007210:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	1c5a      	adds	r2, r3, #1
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	601a      	str	r2, [r3, #0]
}
 8007222:	bf00      	nop
 8007224:	3714      	adds	r7, #20
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800722e:	b480      	push	{r7}
 8007230:	b085      	sub	sp, #20
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007244:	d103      	bne.n	800724e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	60fb      	str	r3, [r7, #12]
 800724c:	e00c      	b.n	8007268 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	3308      	adds	r3, #8
 8007252:	60fb      	str	r3, [r7, #12]
 8007254:	e002      	b.n	800725c <vListInsert+0x2e>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	60fb      	str	r3, [r7, #12]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	429a      	cmp	r2, r3
 8007266:	d2f6      	bcs.n	8007256 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	683a      	ldr	r2, [r7, #0]
 8007276:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	683a      	ldr	r2, [r7, #0]
 8007282:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	1c5a      	adds	r2, r3, #1
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	601a      	str	r2, [r3, #0]
}
 8007294:	bf00      	nop
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	6892      	ldr	r2, [r2, #8]
 80072b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	6852      	ldr	r2, [r2, #4]
 80072c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d103      	bne.n	80072d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	689a      	ldr	r2, [r3, #8]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	1e5a      	subs	r2, r3, #1
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3714      	adds	r7, #20
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10b      	bne.n	8007320 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800730c:	f383 8811 	msr	BASEPRI, r3
 8007310:	f3bf 8f6f 	isb	sy
 8007314:	f3bf 8f4f 	dsb	sy
 8007318:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800731a:	bf00      	nop
 800731c:	bf00      	nop
 800731e:	e7fd      	b.n	800731c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007320:	f002 fe62 	bl	8009fe8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800732c:	68f9      	ldr	r1, [r7, #12]
 800732e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007330:	fb01 f303 	mul.w	r3, r1, r3
 8007334:	441a      	add	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007350:	3b01      	subs	r3, #1
 8007352:	68f9      	ldr	r1, [r7, #12]
 8007354:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007356:	fb01 f303 	mul.w	r3, r1, r3
 800735a:	441a      	add	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	22ff      	movs	r2, #255	@ 0xff
 8007364:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	22ff      	movs	r2, #255	@ 0xff
 800736c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d114      	bne.n	80073a0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d01a      	beq.n	80073b4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	3310      	adds	r3, #16
 8007382:	4618      	mov	r0, r3
 8007384:	f001 fd3a 	bl	8008dfc <xTaskRemoveFromEventList>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d012      	beq.n	80073b4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800738e:	4b0d      	ldr	r3, [pc, #52]	@ (80073c4 <xQueueGenericReset+0xd0>)
 8007390:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007394:	601a      	str	r2, [r3, #0]
 8007396:	f3bf 8f4f 	dsb	sy
 800739a:	f3bf 8f6f 	isb	sy
 800739e:	e009      	b.n	80073b4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	3310      	adds	r3, #16
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7ff fef1 	bl	800718c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	3324      	adds	r3, #36	@ 0x24
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7ff feec 	bl	800718c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80073b4:	f002 fe4a 	bl	800a04c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80073b8:	2301      	movs	r3, #1
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	e000ed04 	.word	0xe000ed04

080073c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b08e      	sub	sp, #56	@ 0x38
 80073cc:	af02      	add	r7, sp, #8
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
 80073d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10b      	bne.n	80073f4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80073dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80073ee:	bf00      	nop
 80073f0:	bf00      	nop
 80073f2:	e7fd      	b.n	80073f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10b      	bne.n	8007412 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80073fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800740c:	bf00      	nop
 800740e:	bf00      	nop
 8007410:	e7fd      	b.n	800740e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d002      	beq.n	800741e <xQueueGenericCreateStatic+0x56>
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d001      	beq.n	8007422 <xQueueGenericCreateStatic+0x5a>
 800741e:	2301      	movs	r3, #1
 8007420:	e000      	b.n	8007424 <xQueueGenericCreateStatic+0x5c>
 8007422:	2300      	movs	r3, #0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10b      	bne.n	8007440 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800742c:	f383 8811 	msr	BASEPRI, r3
 8007430:	f3bf 8f6f 	isb	sy
 8007434:	f3bf 8f4f 	dsb	sy
 8007438:	623b      	str	r3, [r7, #32]
}
 800743a:	bf00      	nop
 800743c:	bf00      	nop
 800743e:	e7fd      	b.n	800743c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d102      	bne.n	800744c <xQueueGenericCreateStatic+0x84>
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d101      	bne.n	8007450 <xQueueGenericCreateStatic+0x88>
 800744c:	2301      	movs	r3, #1
 800744e:	e000      	b.n	8007452 <xQueueGenericCreateStatic+0x8a>
 8007450:	2300      	movs	r3, #0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10b      	bne.n	800746e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800745a:	f383 8811 	msr	BASEPRI, r3
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	61fb      	str	r3, [r7, #28]
}
 8007468:	bf00      	nop
 800746a:	bf00      	nop
 800746c:	e7fd      	b.n	800746a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800746e:	2348      	movs	r3, #72	@ 0x48
 8007470:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	2b48      	cmp	r3, #72	@ 0x48
 8007476:	d00b      	beq.n	8007490 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800747c:	f383 8811 	msr	BASEPRI, r3
 8007480:	f3bf 8f6f 	isb	sy
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	61bb      	str	r3, [r7, #24]
}
 800748a:	bf00      	nop
 800748c:	bf00      	nop
 800748e:	e7fd      	b.n	800748c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007490:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00d      	beq.n	80074b8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800749c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80074a4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80074a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	4613      	mov	r3, r2
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	68b9      	ldr	r1, [r7, #8]
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f000 f840 	bl	8007538 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80074b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3730      	adds	r7, #48	@ 0x30
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b08a      	sub	sp, #40	@ 0x28
 80074c6:	af02      	add	r7, sp, #8
 80074c8:	60f8      	str	r0, [r7, #12]
 80074ca:	60b9      	str	r1, [r7, #8]
 80074cc:	4613      	mov	r3, r2
 80074ce:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10b      	bne.n	80074ee <xQueueGenericCreate+0x2c>
	__asm volatile
 80074d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	613b      	str	r3, [r7, #16]
}
 80074e8:	bf00      	nop
 80074ea:	bf00      	nop
 80074ec:	e7fd      	b.n	80074ea <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	fb02 f303 	mul.w	r3, r2, r3
 80074f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	3348      	adds	r3, #72	@ 0x48
 80074fc:	4618      	mov	r0, r3
 80074fe:	f002 fe95 	bl	800a22c <pvPortMalloc>
 8007502:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d011      	beq.n	800752e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	3348      	adds	r3, #72	@ 0x48
 8007512:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	2200      	movs	r2, #0
 8007518:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800751c:	79fa      	ldrb	r2, [r7, #7]
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	4613      	mov	r3, r2
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	68b9      	ldr	r1, [r7, #8]
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f000 f805 	bl	8007538 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800752e:	69bb      	ldr	r3, [r7, #24]
	}
 8007530:	4618      	mov	r0, r3
 8007532:	3720      	adds	r7, #32
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
 8007544:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d103      	bne.n	8007554 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	69ba      	ldr	r2, [r7, #24]
 8007550:	601a      	str	r2, [r3, #0]
 8007552:	e002      	b.n	800755a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	68ba      	ldr	r2, [r7, #8]
 8007564:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007566:	2101      	movs	r1, #1
 8007568:	69b8      	ldr	r0, [r7, #24]
 800756a:	f7ff fec3 	bl	80072f4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800756e:	bf00      	nop
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
	...

08007578 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b08e      	sub	sp, #56	@ 0x38
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	607a      	str	r2, [r7, #4]
 8007584:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007586:	2300      	movs	r3, #0
 8007588:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800758e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007590:	2b00      	cmp	r3, #0
 8007592:	d10b      	bne.n	80075ac <xQueueGenericSend+0x34>
	__asm volatile
 8007594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007598:	f383 8811 	msr	BASEPRI, r3
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f3bf 8f4f 	dsb	sy
 80075a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80075a6:	bf00      	nop
 80075a8:	bf00      	nop
 80075aa:	e7fd      	b.n	80075a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d103      	bne.n	80075ba <xQueueGenericSend+0x42>
 80075b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d101      	bne.n	80075be <xQueueGenericSend+0x46>
 80075ba:	2301      	movs	r3, #1
 80075bc:	e000      	b.n	80075c0 <xQueueGenericSend+0x48>
 80075be:	2300      	movs	r3, #0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10b      	bne.n	80075dc <xQueueGenericSend+0x64>
	__asm volatile
 80075c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80075d6:	bf00      	nop
 80075d8:	bf00      	nop
 80075da:	e7fd      	b.n	80075d8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d103      	bne.n	80075ea <xQueueGenericSend+0x72>
 80075e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d101      	bne.n	80075ee <xQueueGenericSend+0x76>
 80075ea:	2301      	movs	r3, #1
 80075ec:	e000      	b.n	80075f0 <xQueueGenericSend+0x78>
 80075ee:	2300      	movs	r3, #0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10b      	bne.n	800760c <xQueueGenericSend+0x94>
	__asm volatile
 80075f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f8:	f383 8811 	msr	BASEPRI, r3
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	623b      	str	r3, [r7, #32]
}
 8007606:	bf00      	nop
 8007608:	bf00      	nop
 800760a:	e7fd      	b.n	8007608 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800760c:	f001 fdbc 	bl	8009188 <xTaskGetSchedulerState>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d102      	bne.n	800761c <xQueueGenericSend+0xa4>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d101      	bne.n	8007620 <xQueueGenericSend+0xa8>
 800761c:	2301      	movs	r3, #1
 800761e:	e000      	b.n	8007622 <xQueueGenericSend+0xaa>
 8007620:	2300      	movs	r3, #0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10b      	bne.n	800763e <xQueueGenericSend+0xc6>
	__asm volatile
 8007626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762a:	f383 8811 	msr	BASEPRI, r3
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	61fb      	str	r3, [r7, #28]
}
 8007638:	bf00      	nop
 800763a:	bf00      	nop
 800763c:	e7fd      	b.n	800763a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800763e:	f002 fcd3 	bl	8009fe8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007644:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800764a:	429a      	cmp	r2, r3
 800764c:	d302      	bcc.n	8007654 <xQueueGenericSend+0xdc>
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	2b02      	cmp	r3, #2
 8007652:	d129      	bne.n	80076a8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007654:	683a      	ldr	r2, [r7, #0]
 8007656:	68b9      	ldr	r1, [r7, #8]
 8007658:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800765a:	f000 fc49 	bl	8007ef0 <prvCopyDataToQueue>
 800765e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007664:	2b00      	cmp	r3, #0
 8007666:	d010      	beq.n	800768a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800766a:	3324      	adds	r3, #36	@ 0x24
 800766c:	4618      	mov	r0, r3
 800766e:	f001 fbc5 	bl	8008dfc <xTaskRemoveFromEventList>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d013      	beq.n	80076a0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007678:	4b3f      	ldr	r3, [pc, #252]	@ (8007778 <xQueueGenericSend+0x200>)
 800767a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800767e:	601a      	str	r2, [r3, #0]
 8007680:	f3bf 8f4f 	dsb	sy
 8007684:	f3bf 8f6f 	isb	sy
 8007688:	e00a      	b.n	80076a0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800768a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800768c:	2b00      	cmp	r3, #0
 800768e:	d007      	beq.n	80076a0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007690:	4b39      	ldr	r3, [pc, #228]	@ (8007778 <xQueueGenericSend+0x200>)
 8007692:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007696:	601a      	str	r2, [r3, #0]
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80076a0:	f002 fcd4 	bl	800a04c <vPortExitCritical>
				return pdPASS;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e063      	b.n	8007770 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d103      	bne.n	80076b6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80076ae:	f002 fccd 	bl	800a04c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80076b2:	2300      	movs	r3, #0
 80076b4:	e05c      	b.n	8007770 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d106      	bne.n	80076ca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076bc:	f107 0314 	add.w	r3, r7, #20
 80076c0:	4618      	mov	r0, r3
 80076c2:	f001 fbff 	bl	8008ec4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076c6:	2301      	movs	r3, #1
 80076c8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80076ca:	f002 fcbf 	bl	800a04c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80076ce:	f001 f969 	bl	80089a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076d2:	f002 fc89 	bl	8009fe8 <vPortEnterCritical>
 80076d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80076dc:	b25b      	sxtb	r3, r3
 80076de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e2:	d103      	bne.n	80076ec <xQueueGenericSend+0x174>
 80076e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80076f2:	b25b      	sxtb	r3, r3
 80076f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f8:	d103      	bne.n	8007702 <xQueueGenericSend+0x18a>
 80076fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007702:	f002 fca3 	bl	800a04c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007706:	1d3a      	adds	r2, r7, #4
 8007708:	f107 0314 	add.w	r3, r7, #20
 800770c:	4611      	mov	r1, r2
 800770e:	4618      	mov	r0, r3
 8007710:	f001 fbee 	bl	8008ef0 <xTaskCheckForTimeOut>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d124      	bne.n	8007764 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800771a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800771c:	f000 fce0 	bl	80080e0 <prvIsQueueFull>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d018      	beq.n	8007758 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007728:	3310      	adds	r3, #16
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	4611      	mov	r1, r2
 800772e:	4618      	mov	r0, r3
 8007730:	f001 fb12 	bl	8008d58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007734:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007736:	f000 fc6b 	bl	8008010 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800773a:	f001 f941 	bl	80089c0 <xTaskResumeAll>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	f47f af7c 	bne.w	800763e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007746:	4b0c      	ldr	r3, [pc, #48]	@ (8007778 <xQueueGenericSend+0x200>)
 8007748:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800774c:	601a      	str	r2, [r3, #0]
 800774e:	f3bf 8f4f 	dsb	sy
 8007752:	f3bf 8f6f 	isb	sy
 8007756:	e772      	b.n	800763e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007758:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800775a:	f000 fc59 	bl	8008010 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800775e:	f001 f92f 	bl	80089c0 <xTaskResumeAll>
 8007762:	e76c      	b.n	800763e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007764:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007766:	f000 fc53 	bl	8008010 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800776a:	f001 f929 	bl	80089c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800776e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007770:	4618      	mov	r0, r3
 8007772:	3738      	adds	r7, #56	@ 0x38
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	e000ed04 	.word	0xe000ed04

0800777c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b090      	sub	sp, #64	@ 0x40
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
 8007788:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800778e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10b      	bne.n	80077ac <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80077a6:	bf00      	nop
 80077a8:	bf00      	nop
 80077aa:	e7fd      	b.n	80077a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d103      	bne.n	80077ba <xQueueGenericSendFromISR+0x3e>
 80077b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d101      	bne.n	80077be <xQueueGenericSendFromISR+0x42>
 80077ba:	2301      	movs	r3, #1
 80077bc:	e000      	b.n	80077c0 <xQueueGenericSendFromISR+0x44>
 80077be:	2300      	movs	r3, #0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d10b      	bne.n	80077dc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80077c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c8:	f383 8811 	msr	BASEPRI, r3
 80077cc:	f3bf 8f6f 	isb	sy
 80077d0:	f3bf 8f4f 	dsb	sy
 80077d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80077d6:	bf00      	nop
 80077d8:	bf00      	nop
 80077da:	e7fd      	b.n	80077d8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d103      	bne.n	80077ea <xQueueGenericSendFromISR+0x6e>
 80077e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d101      	bne.n	80077ee <xQueueGenericSendFromISR+0x72>
 80077ea:	2301      	movs	r3, #1
 80077ec:	e000      	b.n	80077f0 <xQueueGenericSendFromISR+0x74>
 80077ee:	2300      	movs	r3, #0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10b      	bne.n	800780c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80077f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f8:	f383 8811 	msr	BASEPRI, r3
 80077fc:	f3bf 8f6f 	isb	sy
 8007800:	f3bf 8f4f 	dsb	sy
 8007804:	623b      	str	r3, [r7, #32]
}
 8007806:	bf00      	nop
 8007808:	bf00      	nop
 800780a:	e7fd      	b.n	8007808 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800780c:	f002 fccc 	bl	800a1a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007810:	f3ef 8211 	mrs	r2, BASEPRI
 8007814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007818:	f383 8811 	msr	BASEPRI, r3
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	61fa      	str	r2, [r7, #28]
 8007826:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007828:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800782a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800782c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800782e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007834:	429a      	cmp	r2, r3
 8007836:	d302      	bcc.n	800783e <xQueueGenericSendFromISR+0xc2>
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	2b02      	cmp	r3, #2
 800783c:	d12f      	bne.n	800789e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800783e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007840:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007844:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800784a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800784c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800784e:	683a      	ldr	r2, [r7, #0]
 8007850:	68b9      	ldr	r1, [r7, #8]
 8007852:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007854:	f000 fb4c 	bl	8007ef0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007858:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800785c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007860:	d112      	bne.n	8007888 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007866:	2b00      	cmp	r3, #0
 8007868:	d016      	beq.n	8007898 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800786a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800786c:	3324      	adds	r3, #36	@ 0x24
 800786e:	4618      	mov	r0, r3
 8007870:	f001 fac4 	bl	8008dfc <xTaskRemoveFromEventList>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00e      	beq.n	8007898 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00b      	beq.n	8007898 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	601a      	str	r2, [r3, #0]
 8007886:	e007      	b.n	8007898 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007888:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800788c:	3301      	adds	r3, #1
 800788e:	b2db      	uxtb	r3, r3
 8007890:	b25a      	sxtb	r2, r3
 8007892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007894:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007898:	2301      	movs	r3, #1
 800789a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800789c:	e001      	b.n	80078a2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800789e:	2300      	movs	r3, #0
 80078a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078a4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80078ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80078ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3740      	adds	r7, #64	@ 0x40
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b08e      	sub	sp, #56	@ 0x38
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80078c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10b      	bne.n	80078e4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80078cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d0:	f383 8811 	msr	BASEPRI, r3
 80078d4:	f3bf 8f6f 	isb	sy
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	623b      	str	r3, [r7, #32]
}
 80078de:	bf00      	nop
 80078e0:	bf00      	nop
 80078e2:	e7fd      	b.n	80078e0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80078e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00b      	beq.n	8007904 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80078ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f0:	f383 8811 	msr	BASEPRI, r3
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	61fb      	str	r3, [r7, #28]
}
 80078fe:	bf00      	nop
 8007900:	bf00      	nop
 8007902:	e7fd      	b.n	8007900 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d103      	bne.n	8007914 <xQueueGiveFromISR+0x5c>
 800790c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d101      	bne.n	8007918 <xQueueGiveFromISR+0x60>
 8007914:	2301      	movs	r3, #1
 8007916:	e000      	b.n	800791a <xQueueGiveFromISR+0x62>
 8007918:	2300      	movs	r3, #0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10b      	bne.n	8007936 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800791e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	61bb      	str	r3, [r7, #24]
}
 8007930:	bf00      	nop
 8007932:	bf00      	nop
 8007934:	e7fd      	b.n	8007932 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007936:	f002 fc37 	bl	800a1a8 <vPortValidateInterruptPriority>
	__asm volatile
 800793a:	f3ef 8211 	mrs	r2, BASEPRI
 800793e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	617a      	str	r2, [r7, #20]
 8007950:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007952:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007954:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800795a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800795c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800795e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007960:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007962:	429a      	cmp	r2, r3
 8007964:	d22b      	bcs.n	80079be <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007968:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800796c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007972:	1c5a      	adds	r2, r3, #1
 8007974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007976:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007978:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800797c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007980:	d112      	bne.n	80079a8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007986:	2b00      	cmp	r3, #0
 8007988:	d016      	beq.n	80079b8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800798a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800798c:	3324      	adds	r3, #36	@ 0x24
 800798e:	4618      	mov	r0, r3
 8007990:	f001 fa34 	bl	8008dfc <xTaskRemoveFromEventList>
 8007994:	4603      	mov	r3, r0
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00e      	beq.n	80079b8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00b      	beq.n	80079b8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	2201      	movs	r2, #1
 80079a4:	601a      	str	r2, [r3, #0]
 80079a6:	e007      	b.n	80079b8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80079a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079ac:	3301      	adds	r3, #1
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	b25a      	sxtb	r2, r3
 80079b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80079b8:	2301      	movs	r3, #1
 80079ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80079bc:	e001      	b.n	80079c2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80079be:	2300      	movs	r3, #0
 80079c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80079c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079c4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f383 8811 	msr	BASEPRI, r3
}
 80079cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80079ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3738      	adds	r7, #56	@ 0x38
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b08c      	sub	sp, #48	@ 0x30
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80079e4:	2300      	movs	r3, #0
 80079e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80079ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10b      	bne.n	8007a0a <xQueueReceive+0x32>
	__asm volatile
 80079f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f6:	f383 8811 	msr	BASEPRI, r3
 80079fa:	f3bf 8f6f 	isb	sy
 80079fe:	f3bf 8f4f 	dsb	sy
 8007a02:	623b      	str	r3, [r7, #32]
}
 8007a04:	bf00      	nop
 8007a06:	bf00      	nop
 8007a08:	e7fd      	b.n	8007a06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d103      	bne.n	8007a18 <xQueueReceive+0x40>
 8007a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d101      	bne.n	8007a1c <xQueueReceive+0x44>
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e000      	b.n	8007a1e <xQueueReceive+0x46>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10b      	bne.n	8007a3a <xQueueReceive+0x62>
	__asm volatile
 8007a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a26:	f383 8811 	msr	BASEPRI, r3
 8007a2a:	f3bf 8f6f 	isb	sy
 8007a2e:	f3bf 8f4f 	dsb	sy
 8007a32:	61fb      	str	r3, [r7, #28]
}
 8007a34:	bf00      	nop
 8007a36:	bf00      	nop
 8007a38:	e7fd      	b.n	8007a36 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a3a:	f001 fba5 	bl	8009188 <xTaskGetSchedulerState>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d102      	bne.n	8007a4a <xQueueReceive+0x72>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d101      	bne.n	8007a4e <xQueueReceive+0x76>
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e000      	b.n	8007a50 <xQueueReceive+0x78>
 8007a4e:	2300      	movs	r3, #0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d10b      	bne.n	8007a6c <xQueueReceive+0x94>
	__asm volatile
 8007a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a58:	f383 8811 	msr	BASEPRI, r3
 8007a5c:	f3bf 8f6f 	isb	sy
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	61bb      	str	r3, [r7, #24]
}
 8007a66:	bf00      	nop
 8007a68:	bf00      	nop
 8007a6a:	e7fd      	b.n	8007a68 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a6c:	f002 fabc 	bl	8009fe8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a74:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d01f      	beq.n	8007abc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a7c:	68b9      	ldr	r1, [r7, #8]
 8007a7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a80:	f000 faa0 	bl	8007fc4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a86:	1e5a      	subs	r2, r3, #1
 8007a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a8a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00f      	beq.n	8007ab4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a96:	3310      	adds	r3, #16
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f001 f9af 	bl	8008dfc <xTaskRemoveFromEventList>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d007      	beq.n	8007ab4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007aa4:	4b3c      	ldr	r3, [pc, #240]	@ (8007b98 <xQueueReceive+0x1c0>)
 8007aa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007aaa:	601a      	str	r2, [r3, #0]
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ab4:	f002 faca 	bl	800a04c <vPortExitCritical>
				return pdPASS;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e069      	b.n	8007b90 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d103      	bne.n	8007aca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ac2:	f002 fac3 	bl	800a04c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	e062      	b.n	8007b90 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d106      	bne.n	8007ade <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ad0:	f107 0310 	add.w	r3, r7, #16
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f001 f9f5 	bl	8008ec4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ada:	2301      	movs	r3, #1
 8007adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ade:	f002 fab5 	bl	800a04c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ae2:	f000 ff5f 	bl	80089a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ae6:	f002 fa7f 	bl	8009fe8 <vPortEnterCritical>
 8007aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007af0:	b25b      	sxtb	r3, r3
 8007af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af6:	d103      	bne.n	8007b00 <xQueueReceive+0x128>
 8007af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007afa:	2200      	movs	r2, #0
 8007afc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b06:	b25b      	sxtb	r3, r3
 8007b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b0c:	d103      	bne.n	8007b16 <xQueueReceive+0x13e>
 8007b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b16:	f002 fa99 	bl	800a04c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b1a:	1d3a      	adds	r2, r7, #4
 8007b1c:	f107 0310 	add.w	r3, r7, #16
 8007b20:	4611      	mov	r1, r2
 8007b22:	4618      	mov	r0, r3
 8007b24:	f001 f9e4 	bl	8008ef0 <xTaskCheckForTimeOut>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d123      	bne.n	8007b76 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b30:	f000 fac0 	bl	80080b4 <prvIsQueueEmpty>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d017      	beq.n	8007b6a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b3c:	3324      	adds	r3, #36	@ 0x24
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	4611      	mov	r1, r2
 8007b42:	4618      	mov	r0, r3
 8007b44:	f001 f908 	bl	8008d58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b4a:	f000 fa61 	bl	8008010 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b4e:	f000 ff37 	bl	80089c0 <xTaskResumeAll>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d189      	bne.n	8007a6c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007b58:	4b0f      	ldr	r3, [pc, #60]	@ (8007b98 <xQueueReceive+0x1c0>)
 8007b5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b5e:	601a      	str	r2, [r3, #0]
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	e780      	b.n	8007a6c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007b6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b6c:	f000 fa50 	bl	8008010 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b70:	f000 ff26 	bl	80089c0 <xTaskResumeAll>
 8007b74:	e77a      	b.n	8007a6c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007b76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b78:	f000 fa4a 	bl	8008010 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b7c:	f000 ff20 	bl	80089c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b82:	f000 fa97 	bl	80080b4 <prvIsQueueEmpty>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f43f af6f 	beq.w	8007a6c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b8e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3730      	adds	r7, #48	@ 0x30
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	e000ed04 	.word	0xe000ed04

08007b9c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b08e      	sub	sp, #56	@ 0x38
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10b      	bne.n	8007bd0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bbc:	f383 8811 	msr	BASEPRI, r3
 8007bc0:	f3bf 8f6f 	isb	sy
 8007bc4:	f3bf 8f4f 	dsb	sy
 8007bc8:	623b      	str	r3, [r7, #32]
}
 8007bca:	bf00      	nop
 8007bcc:	bf00      	nop
 8007bce:	e7fd      	b.n	8007bcc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00b      	beq.n	8007bf0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bdc:	f383 8811 	msr	BASEPRI, r3
 8007be0:	f3bf 8f6f 	isb	sy
 8007be4:	f3bf 8f4f 	dsb	sy
 8007be8:	61fb      	str	r3, [r7, #28]
}
 8007bea:	bf00      	nop
 8007bec:	bf00      	nop
 8007bee:	e7fd      	b.n	8007bec <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007bf0:	f001 faca 	bl	8009188 <xTaskGetSchedulerState>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d102      	bne.n	8007c00 <xQueueSemaphoreTake+0x64>
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d101      	bne.n	8007c04 <xQueueSemaphoreTake+0x68>
 8007c00:	2301      	movs	r3, #1
 8007c02:	e000      	b.n	8007c06 <xQueueSemaphoreTake+0x6a>
 8007c04:	2300      	movs	r3, #0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10b      	bne.n	8007c22 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	61bb      	str	r3, [r7, #24]
}
 8007c1c:	bf00      	nop
 8007c1e:	bf00      	nop
 8007c20:	e7fd      	b.n	8007c1e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c22:	f002 f9e1 	bl	8009fe8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c2a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d024      	beq.n	8007c7c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c34:	1e5a      	subs	r2, r3, #1
 8007c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c38:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d104      	bne.n	8007c4c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007c42:	f001 fc4d 	bl	80094e0 <pvTaskIncrementMutexHeldCount>
 8007c46:	4602      	mov	r2, r0
 8007c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c4a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00f      	beq.n	8007c74 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c56:	3310      	adds	r3, #16
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f001 f8cf 	bl	8008dfc <xTaskRemoveFromEventList>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d007      	beq.n	8007c74 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c64:	4b54      	ldr	r3, [pc, #336]	@ (8007db8 <xQueueSemaphoreTake+0x21c>)
 8007c66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c6a:	601a      	str	r2, [r3, #0]
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c74:	f002 f9ea 	bl	800a04c <vPortExitCritical>
				return pdPASS;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e098      	b.n	8007dae <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d112      	bne.n	8007ca8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00b      	beq.n	8007ca0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c8c:	f383 8811 	msr	BASEPRI, r3
 8007c90:	f3bf 8f6f 	isb	sy
 8007c94:	f3bf 8f4f 	dsb	sy
 8007c98:	617b      	str	r3, [r7, #20]
}
 8007c9a:	bf00      	nop
 8007c9c:	bf00      	nop
 8007c9e:	e7fd      	b.n	8007c9c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007ca0:	f002 f9d4 	bl	800a04c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	e082      	b.n	8007dae <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d106      	bne.n	8007cbc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007cae:	f107 030c 	add.w	r3, r7, #12
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f001 f906 	bl	8008ec4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007cbc:	f002 f9c6 	bl	800a04c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007cc0:	f000 fe70 	bl	80089a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007cc4:	f002 f990 	bl	8009fe8 <vPortEnterCritical>
 8007cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007cce:	b25b      	sxtb	r3, r3
 8007cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd4:	d103      	bne.n	8007cde <xQueueSemaphoreTake+0x142>
 8007cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ce0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ce4:	b25b      	sxtb	r3, r3
 8007ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cea:	d103      	bne.n	8007cf4 <xQueueSemaphoreTake+0x158>
 8007cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007cf4:	f002 f9aa 	bl	800a04c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007cf8:	463a      	mov	r2, r7
 8007cfa:	f107 030c 	add.w	r3, r7, #12
 8007cfe:	4611      	mov	r1, r2
 8007d00:	4618      	mov	r0, r3
 8007d02:	f001 f8f5 	bl	8008ef0 <xTaskCheckForTimeOut>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d132      	bne.n	8007d72 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007d0e:	f000 f9d1 	bl	80080b4 <prvIsQueueEmpty>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d026      	beq.n	8007d66 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d109      	bne.n	8007d34 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007d20:	f002 f962 	bl	8009fe8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f001 fa4b 	bl	80091c4 <xTaskPriorityInherit>
 8007d2e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007d30:	f002 f98c 	bl	800a04c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d36:	3324      	adds	r3, #36	@ 0x24
 8007d38:	683a      	ldr	r2, [r7, #0]
 8007d3a:	4611      	mov	r1, r2
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f001 f80b 	bl	8008d58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d42:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007d44:	f000 f964 	bl	8008010 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d48:	f000 fe3a 	bl	80089c0 <xTaskResumeAll>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f47f af67 	bne.w	8007c22 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007d54:	4b18      	ldr	r3, [pc, #96]	@ (8007db8 <xQueueSemaphoreTake+0x21c>)
 8007d56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d5a:	601a      	str	r2, [r3, #0]
 8007d5c:	f3bf 8f4f 	dsb	sy
 8007d60:	f3bf 8f6f 	isb	sy
 8007d64:	e75d      	b.n	8007c22 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007d66:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007d68:	f000 f952 	bl	8008010 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d6c:	f000 fe28 	bl	80089c0 <xTaskResumeAll>
 8007d70:	e757      	b.n	8007c22 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007d72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007d74:	f000 f94c 	bl	8008010 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d78:	f000 fe22 	bl	80089c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007d7e:	f000 f999 	bl	80080b4 <prvIsQueueEmpty>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f43f af4c 	beq.w	8007c22 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00d      	beq.n	8007dac <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007d90:	f002 f92a 	bl	8009fe8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007d94:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007d96:	f000 f893 	bl	8007ec0 <prvGetDisinheritPriorityAfterTimeout>
 8007d9a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007da2:	4618      	mov	r0, r3
 8007da4:	f001 fb0c 	bl	80093c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007da8:	f002 f950 	bl	800a04c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007dac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3738      	adds	r7, #56	@ 0x38
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	e000ed04 	.word	0xe000ed04

08007dbc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b08e      	sub	sp, #56	@ 0x38
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10b      	bne.n	8007dea <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	623b      	str	r3, [r7, #32]
}
 8007de4:	bf00      	nop
 8007de6:	bf00      	nop
 8007de8:	e7fd      	b.n	8007de6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d103      	bne.n	8007df8 <xQueueReceiveFromISR+0x3c>
 8007df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d101      	bne.n	8007dfc <xQueueReceiveFromISR+0x40>
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e000      	b.n	8007dfe <xQueueReceiveFromISR+0x42>
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10b      	bne.n	8007e1a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e06:	f383 8811 	msr	BASEPRI, r3
 8007e0a:	f3bf 8f6f 	isb	sy
 8007e0e:	f3bf 8f4f 	dsb	sy
 8007e12:	61fb      	str	r3, [r7, #28]
}
 8007e14:	bf00      	nop
 8007e16:	bf00      	nop
 8007e18:	e7fd      	b.n	8007e16 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e1a:	f002 f9c5 	bl	800a1a8 <vPortValidateInterruptPriority>
	__asm volatile
 8007e1e:	f3ef 8211 	mrs	r2, BASEPRI
 8007e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e26:	f383 8811 	msr	BASEPRI, r3
 8007e2a:	f3bf 8f6f 	isb	sy
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	61ba      	str	r2, [r7, #24]
 8007e34:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007e36:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e3e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d02f      	beq.n	8007ea6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e50:	68b9      	ldr	r1, [r7, #8]
 8007e52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e54:	f000 f8b6 	bl	8007fc4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e5a:	1e5a      	subs	r2, r3, #1
 8007e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e5e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007e60:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e68:	d112      	bne.n	8007e90 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d016      	beq.n	8007ea0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e74:	3310      	adds	r3, #16
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 ffc0 	bl	8008dfc <xTaskRemoveFromEventList>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00e      	beq.n	8007ea0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00b      	beq.n	8007ea0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	601a      	str	r2, [r3, #0]
 8007e8e:	e007      	b.n	8007ea0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007e90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e94:	3301      	adds	r3, #1
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	b25a      	sxtb	r2, r3
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ea4:	e001      	b.n	8007eaa <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eac:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	f383 8811 	msr	BASEPRI, r3
}
 8007eb4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3738      	adds	r7, #56	@ 0x38
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d006      	beq.n	8007ede <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f1c3 0307 	rsb	r3, r3, #7
 8007eda:	60fb      	str	r3, [r7, #12]
 8007edc:	e001      	b.n	8007ee2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
	}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b086      	sub	sp, #24
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007efc:	2300      	movs	r3, #0
 8007efe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f04:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10d      	bne.n	8007f2a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d14d      	bne.n	8007fb2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f001 f9c8 	bl	80092b0 <xTaskPriorityDisinherit>
 8007f20:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	609a      	str	r2, [r3, #8]
 8007f28:	e043      	b.n	8007fb2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d119      	bne.n	8007f64 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6858      	ldr	r0, [r3, #4]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f38:	461a      	mov	r2, r3
 8007f3a:	68b9      	ldr	r1, [r7, #8]
 8007f3c:	f003 fbcb 	bl	800b6d6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	685a      	ldr	r2, [r3, #4]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f48:	441a      	add	r2, r3
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	685a      	ldr	r2, [r3, #4]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d32b      	bcc.n	8007fb2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	605a      	str	r2, [r3, #4]
 8007f62:	e026      	b.n	8007fb2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	68d8      	ldr	r0, [r3, #12]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	68b9      	ldr	r1, [r7, #8]
 8007f70:	f003 fbb1 	bl	800b6d6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	68da      	ldr	r2, [r3, #12]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f7c:	425b      	negs	r3, r3
 8007f7e:	441a      	add	r2, r3
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	68da      	ldr	r2, [r3, #12]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d207      	bcs.n	8007fa0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	689a      	ldr	r2, [r3, #8]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f98:	425b      	negs	r3, r3
 8007f9a:	441a      	add	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d105      	bne.n	8007fb2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d002      	beq.n	8007fb2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	1c5a      	adds	r2, r3, #1
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007fba:	697b      	ldr	r3, [r7, #20]
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3718      	adds	r7, #24
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d018      	beq.n	8008008 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	68da      	ldr	r2, [r3, #12]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fde:	441a      	add	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	68da      	ldr	r2, [r3, #12]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d303      	bcc.n	8007ff8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	68d9      	ldr	r1, [r3, #12]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008000:	461a      	mov	r2, r3
 8008002:	6838      	ldr	r0, [r7, #0]
 8008004:	f003 fb67 	bl	800b6d6 <memcpy>
	}
}
 8008008:	bf00      	nop
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008018:	f001 ffe6 	bl	8009fe8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008022:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008024:	e011      	b.n	800804a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800802a:	2b00      	cmp	r3, #0
 800802c:	d012      	beq.n	8008054 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	3324      	adds	r3, #36	@ 0x24
 8008032:	4618      	mov	r0, r3
 8008034:	f000 fee2 	bl	8008dfc <xTaskRemoveFromEventList>
 8008038:	4603      	mov	r3, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d001      	beq.n	8008042 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800803e:	f000 ffbb 	bl	8008fb8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008042:	7bfb      	ldrb	r3, [r7, #15]
 8008044:	3b01      	subs	r3, #1
 8008046:	b2db      	uxtb	r3, r3
 8008048:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800804a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800804e:	2b00      	cmp	r3, #0
 8008050:	dce9      	bgt.n	8008026 <prvUnlockQueue+0x16>
 8008052:	e000      	b.n	8008056 <prvUnlockQueue+0x46>
					break;
 8008054:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	22ff      	movs	r2, #255	@ 0xff
 800805a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800805e:	f001 fff5 	bl	800a04c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008062:	f001 ffc1 	bl	8009fe8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800806c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800806e:	e011      	b.n	8008094 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d012      	beq.n	800809e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	3310      	adds	r3, #16
 800807c:	4618      	mov	r0, r3
 800807e:	f000 febd 	bl	8008dfc <xTaskRemoveFromEventList>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d001      	beq.n	800808c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008088:	f000 ff96 	bl	8008fb8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800808c:	7bbb      	ldrb	r3, [r7, #14]
 800808e:	3b01      	subs	r3, #1
 8008090:	b2db      	uxtb	r3, r3
 8008092:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008094:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008098:	2b00      	cmp	r3, #0
 800809a:	dce9      	bgt.n	8008070 <prvUnlockQueue+0x60>
 800809c:	e000      	b.n	80080a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800809e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	22ff      	movs	r2, #255	@ 0xff
 80080a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80080a8:	f001 ffd0 	bl	800a04c <vPortExitCritical>
}
 80080ac:	bf00      	nop
 80080ae:	3710      	adds	r7, #16
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80080bc:	f001 ff94 	bl	8009fe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d102      	bne.n	80080ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80080c8:	2301      	movs	r3, #1
 80080ca:	60fb      	str	r3, [r7, #12]
 80080cc:	e001      	b.n	80080d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80080ce:	2300      	movs	r3, #0
 80080d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80080d2:	f001 ffbb 	bl	800a04c <vPortExitCritical>

	return xReturn;
 80080d6:	68fb      	ldr	r3, [r7, #12]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80080e8:	f001 ff7e 	bl	8009fe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d102      	bne.n	80080fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80080f8:	2301      	movs	r3, #1
 80080fa:	60fb      	str	r3, [r7, #12]
 80080fc:	e001      	b.n	8008102 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80080fe:	2300      	movs	r3, #0
 8008100:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008102:	f001 ffa3 	bl	800a04c <vPortExitCritical>

	return xReturn;
 8008106:	68fb      	ldr	r3, [r7, #12]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800811a:	2300      	movs	r3, #0
 800811c:	60fb      	str	r3, [r7, #12]
 800811e:	e014      	b.n	800814a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008120:	4a0f      	ldr	r2, [pc, #60]	@ (8008160 <vQueueAddToRegistry+0x50>)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10b      	bne.n	8008144 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800812c:	490c      	ldr	r1, [pc, #48]	@ (8008160 <vQueueAddToRegistry+0x50>)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	683a      	ldr	r2, [r7, #0]
 8008132:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008136:	4a0a      	ldr	r2, [pc, #40]	@ (8008160 <vQueueAddToRegistry+0x50>)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	00db      	lsls	r3, r3, #3
 800813c:	4413      	add	r3, r2
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008142:	e006      	b.n	8008152 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	3301      	adds	r3, #1
 8008148:	60fb      	str	r3, [r7, #12]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2b07      	cmp	r3, #7
 800814e:	d9e7      	bls.n	8008120 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008150:	bf00      	nop
 8008152:	bf00      	nop
 8008154:	3714      	adds	r7, #20
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	20000b80 	.word	0x20000b80

08008164 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008164:	b580      	push	{r7, lr}
 8008166:	b086      	sub	sp, #24
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008174:	f001 ff38 	bl	8009fe8 <vPortEnterCritical>
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800817e:	b25b      	sxtb	r3, r3
 8008180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008184:	d103      	bne.n	800818e <vQueueWaitForMessageRestricted+0x2a>
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008194:	b25b      	sxtb	r3, r3
 8008196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800819a:	d103      	bne.n	80081a4 <vQueueWaitForMessageRestricted+0x40>
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081a4:	f001 ff52 	bl	800a04c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d106      	bne.n	80081be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	3324      	adds	r3, #36	@ 0x24
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	68b9      	ldr	r1, [r7, #8]
 80081b8:	4618      	mov	r0, r3
 80081ba:	f000 fdf3 	bl	8008da4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80081be:	6978      	ldr	r0, [r7, #20]
 80081c0:	f7ff ff26 	bl	8008010 <prvUnlockQueue>
	}
 80081c4:	bf00      	nop
 80081c6:	3718      	adds	r7, #24
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b08e      	sub	sp, #56	@ 0x38
 80081d0:	af04      	add	r7, sp, #16
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	607a      	str	r2, [r7, #4]
 80081d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80081da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d10b      	bne.n	80081f8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80081e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	623b      	str	r3, [r7, #32]
}
 80081f2:	bf00      	nop
 80081f4:	bf00      	nop
 80081f6:	e7fd      	b.n	80081f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80081f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d10b      	bne.n	8008216 <xTaskCreateStatic+0x4a>
	__asm volatile
 80081fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	61fb      	str	r3, [r7, #28]
}
 8008210:	bf00      	nop
 8008212:	bf00      	nop
 8008214:	e7fd      	b.n	8008212 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008216:	23a0      	movs	r3, #160	@ 0xa0
 8008218:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	2ba0      	cmp	r3, #160	@ 0xa0
 800821e:	d00b      	beq.n	8008238 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008224:	f383 8811 	msr	BASEPRI, r3
 8008228:	f3bf 8f6f 	isb	sy
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	61bb      	str	r3, [r7, #24]
}
 8008232:	bf00      	nop
 8008234:	bf00      	nop
 8008236:	e7fd      	b.n	8008234 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008238:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800823a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800823c:	2b00      	cmp	r3, #0
 800823e:	d01e      	beq.n	800827e <xTaskCreateStatic+0xb2>
 8008240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008242:	2b00      	cmp	r3, #0
 8008244:	d01b      	beq.n	800827e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008248:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800824a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800824c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800824e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008252:	2202      	movs	r2, #2
 8008254:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008258:	2300      	movs	r3, #0
 800825a:	9303      	str	r3, [sp, #12]
 800825c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800825e:	9302      	str	r3, [sp, #8]
 8008260:	f107 0314 	add.w	r3, r7, #20
 8008264:	9301      	str	r3, [sp, #4]
 8008266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	68b9      	ldr	r1, [r7, #8]
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f000 f851 	bl	8008318 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008276:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008278:	f000 f8ee 	bl	8008458 <prvAddNewTaskToReadyList>
 800827c:	e001      	b.n	8008282 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800827e:	2300      	movs	r3, #0
 8008280:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008282:	697b      	ldr	r3, [r7, #20]
	}
 8008284:	4618      	mov	r0, r3
 8008286:	3728      	adds	r7, #40	@ 0x28
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800828c:	b580      	push	{r7, lr}
 800828e:	b08c      	sub	sp, #48	@ 0x30
 8008290:	af04      	add	r7, sp, #16
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	603b      	str	r3, [r7, #0]
 8008298:	4613      	mov	r3, r2
 800829a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800829c:	88fb      	ldrh	r3, [r7, #6]
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4618      	mov	r0, r3
 80082a2:	f001 ffc3 	bl	800a22c <pvPortMalloc>
 80082a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00e      	beq.n	80082cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80082ae:	20a0      	movs	r0, #160	@ 0xa0
 80082b0:	f001 ffbc 	bl	800a22c <pvPortMalloc>
 80082b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d003      	beq.n	80082c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	697a      	ldr	r2, [r7, #20]
 80082c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80082c2:	e005      	b.n	80082d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80082c4:	6978      	ldr	r0, [r7, #20]
 80082c6:	f002 f87f 	bl	800a3c8 <vPortFree>
 80082ca:	e001      	b.n	80082d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80082cc:	2300      	movs	r3, #0
 80082ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d017      	beq.n	8008306 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80082de:	88fa      	ldrh	r2, [r7, #6]
 80082e0:	2300      	movs	r3, #0
 80082e2:	9303      	str	r3, [sp, #12]
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	9302      	str	r3, [sp, #8]
 80082e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ea:	9301      	str	r3, [sp, #4]
 80082ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	68b9      	ldr	r1, [r7, #8]
 80082f4:	68f8      	ldr	r0, [r7, #12]
 80082f6:	f000 f80f 	bl	8008318 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082fa:	69f8      	ldr	r0, [r7, #28]
 80082fc:	f000 f8ac 	bl	8008458 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008300:	2301      	movs	r3, #1
 8008302:	61bb      	str	r3, [r7, #24]
 8008304:	e002      	b.n	800830c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008306:	f04f 33ff 	mov.w	r3, #4294967295
 800830a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800830c:	69bb      	ldr	r3, [r7, #24]
	}
 800830e:	4618      	mov	r0, r3
 8008310:	3720      	adds	r7, #32
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
	...

08008318 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b088      	sub	sp, #32
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
 8008324:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008328:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008330:	3b01      	subs	r3, #1
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	4413      	add	r3, r2
 8008336:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	f023 0307 	bic.w	r3, r3, #7
 800833e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	f003 0307 	and.w	r3, r3, #7
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00b      	beq.n	8008362 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800834a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800834e:	f383 8811 	msr	BASEPRI, r3
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	f3bf 8f4f 	dsb	sy
 800835a:	617b      	str	r3, [r7, #20]
}
 800835c:	bf00      	nop
 800835e:	bf00      	nop
 8008360:	e7fd      	b.n	800835e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d01f      	beq.n	80083a8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008368:	2300      	movs	r3, #0
 800836a:	61fb      	str	r3, [r7, #28]
 800836c:	e012      	b.n	8008394 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800836e:	68ba      	ldr	r2, [r7, #8]
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	4413      	add	r3, r2
 8008374:	7819      	ldrb	r1, [r3, #0]
 8008376:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	4413      	add	r3, r2
 800837c:	3334      	adds	r3, #52	@ 0x34
 800837e:	460a      	mov	r2, r1
 8008380:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	4413      	add	r3, r2
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d006      	beq.n	800839c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	3301      	adds	r3, #1
 8008392:	61fb      	str	r3, [r7, #28]
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	2b0f      	cmp	r3, #15
 8008398:	d9e9      	bls.n	800836e <prvInitialiseNewTask+0x56>
 800839a:	e000      	b.n	800839e <prvInitialiseNewTask+0x86>
			{
				break;
 800839c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800839e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80083a6:	e003      	b.n	80083b0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80083a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083aa:	2200      	movs	r2, #0
 80083ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80083b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b2:	2b06      	cmp	r3, #6
 80083b4:	d901      	bls.n	80083ba <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80083b6:	2306      	movs	r3, #6
 80083b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80083ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80083be:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80083c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80083c4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80083c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c8:	2200      	movs	r2, #0
 80083ca:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80083cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ce:	3304      	adds	r3, #4
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7fe fefb 	bl	80071cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80083d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d8:	3318      	adds	r3, #24
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fe fef6 	bl	80071cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80083e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e8:	f1c3 0207 	rsb	r2, r3, #7
 80083ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80083f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083f4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80083f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f8:	2200      	movs	r2, #0
 80083fa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80083fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008400:	2200      	movs	r2, #0
 8008402:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008408:	334c      	adds	r3, #76	@ 0x4c
 800840a:	224c      	movs	r2, #76	@ 0x4c
 800840c:	2100      	movs	r1, #0
 800840e:	4618      	mov	r0, r3
 8008410:	f003 f88b 	bl	800b52a <memset>
 8008414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008416:	4a0d      	ldr	r2, [pc, #52]	@ (800844c <prvInitialiseNewTask+0x134>)
 8008418:	651a      	str	r2, [r3, #80]	@ 0x50
 800841a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800841c:	4a0c      	ldr	r2, [pc, #48]	@ (8008450 <prvInitialiseNewTask+0x138>)
 800841e:	655a      	str	r2, [r3, #84]	@ 0x54
 8008420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008422:	4a0c      	ldr	r2, [pc, #48]	@ (8008454 <prvInitialiseNewTask+0x13c>)
 8008424:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008426:	683a      	ldr	r2, [r7, #0]
 8008428:	68f9      	ldr	r1, [r7, #12]
 800842a:	69b8      	ldr	r0, [r7, #24]
 800842c:	f001 fcae 	bl	8009d8c <pxPortInitialiseStack>
 8008430:	4602      	mov	r2, r0
 8008432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008434:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008438:	2b00      	cmp	r3, #0
 800843a:	d002      	beq.n	8008442 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800843c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800843e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008440:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008442:	bf00      	nop
 8008444:	3720      	adds	r7, #32
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	20004a10 	.word	0x20004a10
 8008450:	20004a78 	.word	0x20004a78
 8008454:	20004ae0 	.word	0x20004ae0

08008458 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008460:	f001 fdc2 	bl	8009fe8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008464:	4b2a      	ldr	r3, [pc, #168]	@ (8008510 <prvAddNewTaskToReadyList+0xb8>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	3301      	adds	r3, #1
 800846a:	4a29      	ldr	r2, [pc, #164]	@ (8008510 <prvAddNewTaskToReadyList+0xb8>)
 800846c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800846e:	4b29      	ldr	r3, [pc, #164]	@ (8008514 <prvAddNewTaskToReadyList+0xbc>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d109      	bne.n	800848a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008476:	4a27      	ldr	r2, [pc, #156]	@ (8008514 <prvAddNewTaskToReadyList+0xbc>)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800847c:	4b24      	ldr	r3, [pc, #144]	@ (8008510 <prvAddNewTaskToReadyList+0xb8>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2b01      	cmp	r3, #1
 8008482:	d110      	bne.n	80084a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008484:	f000 fdbc 	bl	8009000 <prvInitialiseTaskLists>
 8008488:	e00d      	b.n	80084a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800848a:	4b23      	ldr	r3, [pc, #140]	@ (8008518 <prvAddNewTaskToReadyList+0xc0>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d109      	bne.n	80084a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008492:	4b20      	ldr	r3, [pc, #128]	@ (8008514 <prvAddNewTaskToReadyList+0xbc>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800849c:	429a      	cmp	r2, r3
 800849e:	d802      	bhi.n	80084a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80084a0:	4a1c      	ldr	r2, [pc, #112]	@ (8008514 <prvAddNewTaskToReadyList+0xbc>)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80084a6:	4b1d      	ldr	r3, [pc, #116]	@ (800851c <prvAddNewTaskToReadyList+0xc4>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	3301      	adds	r3, #1
 80084ac:	4a1b      	ldr	r2, [pc, #108]	@ (800851c <prvAddNewTaskToReadyList+0xc4>)
 80084ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b4:	2201      	movs	r2, #1
 80084b6:	409a      	lsls	r2, r3
 80084b8:	4b19      	ldr	r3, [pc, #100]	@ (8008520 <prvAddNewTaskToReadyList+0xc8>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4313      	orrs	r3, r2
 80084be:	4a18      	ldr	r2, [pc, #96]	@ (8008520 <prvAddNewTaskToReadyList+0xc8>)
 80084c0:	6013      	str	r3, [r2, #0]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084c6:	4613      	mov	r3, r2
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	4413      	add	r3, r2
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	4a15      	ldr	r2, [pc, #84]	@ (8008524 <prvAddNewTaskToReadyList+0xcc>)
 80084d0:	441a      	add	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	3304      	adds	r3, #4
 80084d6:	4619      	mov	r1, r3
 80084d8:	4610      	mov	r0, r2
 80084da:	f7fe fe84 	bl	80071e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80084de:	f001 fdb5 	bl	800a04c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80084e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008518 <prvAddNewTaskToReadyList+0xc0>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00e      	beq.n	8008508 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80084ea:	4b0a      	ldr	r3, [pc, #40]	@ (8008514 <prvAddNewTaskToReadyList+0xbc>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d207      	bcs.n	8008508 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80084f8:	4b0b      	ldr	r3, [pc, #44]	@ (8008528 <prvAddNewTaskToReadyList+0xd0>)
 80084fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084fe:	601a      	str	r2, [r3, #0]
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008508:	bf00      	nop
 800850a:	3708      	adds	r7, #8
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}
 8008510:	20000cc0 	.word	0x20000cc0
 8008514:	20000bc0 	.word	0x20000bc0
 8008518:	20000ccc 	.word	0x20000ccc
 800851c:	20000cdc 	.word	0x20000cdc
 8008520:	20000cc8 	.word	0x20000cc8
 8008524:	20000bc4 	.word	0x20000bc4
 8008528:	e000ed04 	.word	0xe000ed04

0800852c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008534:	2300      	movs	r3, #0
 8008536:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d018      	beq.n	8008570 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800853e:	4b14      	ldr	r3, [pc, #80]	@ (8008590 <vTaskDelay+0x64>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00b      	beq.n	800855e <vTaskDelay+0x32>
	__asm volatile
 8008546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800854a:	f383 8811 	msr	BASEPRI, r3
 800854e:	f3bf 8f6f 	isb	sy
 8008552:	f3bf 8f4f 	dsb	sy
 8008556:	60bb      	str	r3, [r7, #8]
}
 8008558:	bf00      	nop
 800855a:	bf00      	nop
 800855c:	e7fd      	b.n	800855a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800855e:	f000 fa21 	bl	80089a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008562:	2100      	movs	r1, #0
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 ffcf 	bl	8009508 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800856a:	f000 fa29 	bl	80089c0 <xTaskResumeAll>
 800856e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d107      	bne.n	8008586 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008576:	4b07      	ldr	r3, [pc, #28]	@ (8008594 <vTaskDelay+0x68>)
 8008578:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800857c:	601a      	str	r2, [r3, #0]
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008586:	bf00      	nop
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	20000ce8 	.word	0x20000ce8
 8008594:	e000ed04 	.word	0xe000ed04

08008598 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80085a0:	f001 fd22 	bl	8009fe8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d102      	bne.n	80085b0 <vTaskSuspend+0x18>
 80085aa:	4b3d      	ldr	r3, [pc, #244]	@ (80086a0 <vTaskSuspend+0x108>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	e000      	b.n	80085b2 <vTaskSuspend+0x1a>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	3304      	adds	r3, #4
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7fe fe71 	bl	80072a0 <uxListRemove>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d115      	bne.n	80085f0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085c8:	4936      	ldr	r1, [pc, #216]	@ (80086a4 <vTaskSuspend+0x10c>)
 80085ca:	4613      	mov	r3, r2
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	4413      	add	r3, r2
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	440b      	add	r3, r1
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d10a      	bne.n	80085f0 <vTaskSuspend+0x58>
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085de:	2201      	movs	r2, #1
 80085e0:	fa02 f303 	lsl.w	r3, r2, r3
 80085e4:	43da      	mvns	r2, r3
 80085e6:	4b30      	ldr	r3, [pc, #192]	@ (80086a8 <vTaskSuspend+0x110>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4013      	ands	r3, r2
 80085ec:	4a2e      	ldr	r2, [pc, #184]	@ (80086a8 <vTaskSuspend+0x110>)
 80085ee:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d004      	beq.n	8008602 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	3318      	adds	r3, #24
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7fe fe4f 	bl	80072a0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	3304      	adds	r3, #4
 8008606:	4619      	mov	r1, r3
 8008608:	4828      	ldr	r0, [pc, #160]	@ (80086ac <vTaskSuspend+0x114>)
 800860a:	f7fe fdec 	bl	80071e6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8008614:	b2db      	uxtb	r3, r3
 8008616:	2b01      	cmp	r3, #1
 8008618:	d103      	bne.n	8008622 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8008622:	f001 fd13 	bl	800a04c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8008626:	4b22      	ldr	r3, [pc, #136]	@ (80086b0 <vTaskSuspend+0x118>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d005      	beq.n	800863a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800862e:	f001 fcdb 	bl	8009fe8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8008632:	f000 fd89 	bl	8009148 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8008636:	f001 fd09 	bl	800a04c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800863a:	4b19      	ldr	r3, [pc, #100]	@ (80086a0 <vTaskSuspend+0x108>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	429a      	cmp	r2, r3
 8008642:	d128      	bne.n	8008696 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 8008644:	4b1a      	ldr	r3, [pc, #104]	@ (80086b0 <vTaskSuspend+0x118>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d018      	beq.n	800867e <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800864c:	4b19      	ldr	r3, [pc, #100]	@ (80086b4 <vTaskSuspend+0x11c>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00b      	beq.n	800866c <vTaskSuspend+0xd4>
	__asm volatile
 8008654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008658:	f383 8811 	msr	BASEPRI, r3
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	60bb      	str	r3, [r7, #8]
}
 8008666:	bf00      	nop
 8008668:	bf00      	nop
 800866a:	e7fd      	b.n	8008668 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800866c:	4b12      	ldr	r3, [pc, #72]	@ (80086b8 <vTaskSuspend+0x120>)
 800866e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008672:	601a      	str	r2, [r3, #0]
 8008674:	f3bf 8f4f 	dsb	sy
 8008678:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800867c:	e00b      	b.n	8008696 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800867e:	4b0b      	ldr	r3, [pc, #44]	@ (80086ac <vTaskSuspend+0x114>)
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	4b0e      	ldr	r3, [pc, #56]	@ (80086bc <vTaskSuspend+0x124>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	429a      	cmp	r2, r3
 8008688:	d103      	bne.n	8008692 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 800868a:	4b05      	ldr	r3, [pc, #20]	@ (80086a0 <vTaskSuspend+0x108>)
 800868c:	2200      	movs	r2, #0
 800868e:	601a      	str	r2, [r3, #0]
	}
 8008690:	e001      	b.n	8008696 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8008692:	f000 fafd 	bl	8008c90 <vTaskSwitchContext>
	}
 8008696:	bf00      	nop
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	20000bc0 	.word	0x20000bc0
 80086a4:	20000bc4 	.word	0x20000bc4
 80086a8:	20000cc8 	.word	0x20000cc8
 80086ac:	20000cac 	.word	0x20000cac
 80086b0:	20000ccc 	.word	0x20000ccc
 80086b4:	20000ce8 	.word	0x20000ce8
 80086b8:	e000ed04 	.word	0xe000ed04
 80086bc:	20000cc0 	.word	0x20000cc0

080086c0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80086c0:	b480      	push	{r7}
 80086c2:	b087      	sub	sp, #28
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80086c8:	2300      	movs	r3, #0
 80086ca:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10b      	bne.n	80086ee <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 80086d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086da:	f383 8811 	msr	BASEPRI, r3
 80086de:	f3bf 8f6f 	isb	sy
 80086e2:	f3bf 8f4f 	dsb	sy
 80086e6:	60fb      	str	r3, [r7, #12]
}
 80086e8:	bf00      	nop
 80086ea:	bf00      	nop
 80086ec:	e7fd      	b.n	80086ea <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	695b      	ldr	r3, [r3, #20]
 80086f2:	4a0a      	ldr	r2, [pc, #40]	@ (800871c <prvTaskIsTaskSuspended+0x5c>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d10a      	bne.n	800870e <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086fc:	4a08      	ldr	r2, [pc, #32]	@ (8008720 <prvTaskIsTaskSuspended+0x60>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d005      	beq.n	800870e <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008706:	2b00      	cmp	r3, #0
 8008708:	d101      	bne.n	800870e <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800870a:	2301      	movs	r3, #1
 800870c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800870e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008710:	4618      	mov	r0, r3
 8008712:	371c      	adds	r7, #28
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr
 800871c:	20000cac 	.word	0x20000cac
 8008720:	20000c80 	.word	0x20000c80

08008724 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d10b      	bne.n	800874e <vTaskResume+0x2a>
	__asm volatile
 8008736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800873a:	f383 8811 	msr	BASEPRI, r3
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	60bb      	str	r3, [r7, #8]
}
 8008748:	bf00      	nop
 800874a:	bf00      	nop
 800874c:	e7fd      	b.n	800874a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800874e:	4b20      	ldr	r3, [pc, #128]	@ (80087d0 <vTaskResume+0xac>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	429a      	cmp	r2, r3
 8008756:	d037      	beq.n	80087c8 <vTaskResume+0xa4>
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d034      	beq.n	80087c8 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800875e:	f001 fc43 	bl	8009fe8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	f7ff ffac 	bl	80086c0 <prvTaskIsTaskSuspended>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d02a      	beq.n	80087c4 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	3304      	adds	r3, #4
 8008772:	4618      	mov	r0, r3
 8008774:	f7fe fd94 	bl	80072a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800877c:	2201      	movs	r2, #1
 800877e:	409a      	lsls	r2, r3
 8008780:	4b14      	ldr	r3, [pc, #80]	@ (80087d4 <vTaskResume+0xb0>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4313      	orrs	r3, r2
 8008786:	4a13      	ldr	r2, [pc, #76]	@ (80087d4 <vTaskResume+0xb0>)
 8008788:	6013      	str	r3, [r2, #0]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800878e:	4613      	mov	r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	4413      	add	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	4a10      	ldr	r2, [pc, #64]	@ (80087d8 <vTaskResume+0xb4>)
 8008798:	441a      	add	r2, r3
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	3304      	adds	r3, #4
 800879e:	4619      	mov	r1, r3
 80087a0:	4610      	mov	r0, r2
 80087a2:	f7fe fd20 	bl	80071e6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087aa:	4b09      	ldr	r3, [pc, #36]	@ (80087d0 <vTaskResume+0xac>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d307      	bcc.n	80087c4 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80087b4:	4b09      	ldr	r3, [pc, #36]	@ (80087dc <vTaskResume+0xb8>)
 80087b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087ba:	601a      	str	r2, [r3, #0]
 80087bc:	f3bf 8f4f 	dsb	sy
 80087c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80087c4:	f001 fc42 	bl	800a04c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087c8:	bf00      	nop
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	20000bc0 	.word	0x20000bc0
 80087d4:	20000cc8 	.word	0x20000cc8
 80087d8:	20000bc4 	.word	0x20000bc4
 80087dc:	e000ed04 	.word	0xe000ed04

080087e0 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b08a      	sub	sp, #40	@ 0x28
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 80087e8:	2300      	movs	r3, #0
 80087ea:	627b      	str	r3, [r7, #36]	@ 0x24
	TCB_t * const pxTCB = xTaskToResume;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d10b      	bne.n	800880e <xTaskResumeFromISR+0x2e>
	__asm volatile
 80087f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087fa:	f383 8811 	msr	BASEPRI, r3
 80087fe:	f3bf 8f6f 	isb	sy
 8008802:	f3bf 8f4f 	dsb	sy
 8008806:	61bb      	str	r3, [r7, #24]
}
 8008808:	bf00      	nop
 800880a:	bf00      	nop
 800880c:	e7fd      	b.n	800880a <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800880e:	f001 fccb 	bl	800a1a8 <vPortValidateInterruptPriority>
	__asm volatile
 8008812:	f3ef 8211 	mrs	r2, BASEPRI
 8008816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800881a:	f383 8811 	msr	BASEPRI, r3
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	617a      	str	r2, [r7, #20]
 8008828:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800882a:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800882c:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800882e:	6a38      	ldr	r0, [r7, #32]
 8008830:	f7ff ff46 	bl	80086c0 <prvTaskIsTaskSuspended>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d02f      	beq.n	800889a <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800883a:	4b1d      	ldr	r3, [pc, #116]	@ (80088b0 <xTaskResumeFromISR+0xd0>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d125      	bne.n	800888e <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008842:	6a3b      	ldr	r3, [r7, #32]
 8008844:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008846:	4b1b      	ldr	r3, [pc, #108]	@ (80088b4 <xTaskResumeFromISR+0xd4>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800884c:	429a      	cmp	r2, r3
 800884e:	d301      	bcc.n	8008854 <xTaskResumeFromISR+0x74>
					{
						xYieldRequired = pdTRUE;
 8008850:	2301      	movs	r3, #1
 8008852:	627b      	str	r3, [r7, #36]	@ 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008854:	6a3b      	ldr	r3, [r7, #32]
 8008856:	3304      	adds	r3, #4
 8008858:	4618      	mov	r0, r3
 800885a:	f7fe fd21 	bl	80072a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800885e:	6a3b      	ldr	r3, [r7, #32]
 8008860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008862:	2201      	movs	r2, #1
 8008864:	409a      	lsls	r2, r3
 8008866:	4b14      	ldr	r3, [pc, #80]	@ (80088b8 <xTaskResumeFromISR+0xd8>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4313      	orrs	r3, r2
 800886c:	4a12      	ldr	r2, [pc, #72]	@ (80088b8 <xTaskResumeFromISR+0xd8>)
 800886e:	6013      	str	r3, [r2, #0]
 8008870:	6a3b      	ldr	r3, [r7, #32]
 8008872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008874:	4613      	mov	r3, r2
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	4413      	add	r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	4a0f      	ldr	r2, [pc, #60]	@ (80088bc <xTaskResumeFromISR+0xdc>)
 800887e:	441a      	add	r2, r3
 8008880:	6a3b      	ldr	r3, [r7, #32]
 8008882:	3304      	adds	r3, #4
 8008884:	4619      	mov	r1, r3
 8008886:	4610      	mov	r0, r2
 8008888:	f7fe fcad 	bl	80071e6 <vListInsertEnd>
 800888c:	e005      	b.n	800889a <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800888e:	6a3b      	ldr	r3, [r7, #32]
 8008890:	3318      	adds	r3, #24
 8008892:	4619      	mov	r1, r3
 8008894:	480a      	ldr	r0, [pc, #40]	@ (80088c0 <xTaskResumeFromISR+0xe0>)
 8008896:	f7fe fca6 	bl	80071e6 <vListInsertEnd>
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f383 8811 	msr	BASEPRI, r3
}
 80088a4:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 80088a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3728      	adds	r7, #40	@ 0x28
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}
 80088b0:	20000ce8 	.word	0x20000ce8
 80088b4:	20000bc0 	.word	0x20000bc0
 80088b8:	20000cc8 	.word	0x20000cc8
 80088bc:	20000bc4 	.word	0x20000bc4
 80088c0:	20000c80 	.word	0x20000c80

080088c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b08a      	sub	sp, #40	@ 0x28
 80088c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80088ca:	2300      	movs	r3, #0
 80088cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80088ce:	2300      	movs	r3, #0
 80088d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80088d2:	463a      	mov	r2, r7
 80088d4:	1d39      	adds	r1, r7, #4
 80088d6:	f107 0308 	add.w	r3, r7, #8
 80088da:	4618      	mov	r0, r3
 80088dc:	f7f8 fd3c 	bl	8001358 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80088e0:	6839      	ldr	r1, [r7, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	68ba      	ldr	r2, [r7, #8]
 80088e6:	9202      	str	r2, [sp, #8]
 80088e8:	9301      	str	r3, [sp, #4]
 80088ea:	2300      	movs	r3, #0
 80088ec:	9300      	str	r3, [sp, #0]
 80088ee:	2300      	movs	r3, #0
 80088f0:	460a      	mov	r2, r1
 80088f2:	4924      	ldr	r1, [pc, #144]	@ (8008984 <vTaskStartScheduler+0xc0>)
 80088f4:	4824      	ldr	r0, [pc, #144]	@ (8008988 <vTaskStartScheduler+0xc4>)
 80088f6:	f7ff fc69 	bl	80081cc <xTaskCreateStatic>
 80088fa:	4603      	mov	r3, r0
 80088fc:	4a23      	ldr	r2, [pc, #140]	@ (800898c <vTaskStartScheduler+0xc8>)
 80088fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008900:	4b22      	ldr	r3, [pc, #136]	@ (800898c <vTaskStartScheduler+0xc8>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d002      	beq.n	800890e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008908:	2301      	movs	r3, #1
 800890a:	617b      	str	r3, [r7, #20]
 800890c:	e001      	b.n	8008912 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800890e:	2300      	movs	r3, #0
 8008910:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	2b01      	cmp	r3, #1
 8008916:	d102      	bne.n	800891e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008918:	f000 fe5c 	bl	80095d4 <xTimerCreateTimerTask>
 800891c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	2b01      	cmp	r3, #1
 8008922:	d11b      	bne.n	800895c <vTaskStartScheduler+0x98>
	__asm volatile
 8008924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008928:	f383 8811 	msr	BASEPRI, r3
 800892c:	f3bf 8f6f 	isb	sy
 8008930:	f3bf 8f4f 	dsb	sy
 8008934:	613b      	str	r3, [r7, #16]
}
 8008936:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008938:	4b15      	ldr	r3, [pc, #84]	@ (8008990 <vTaskStartScheduler+0xcc>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	334c      	adds	r3, #76	@ 0x4c
 800893e:	4a15      	ldr	r2, [pc, #84]	@ (8008994 <vTaskStartScheduler+0xd0>)
 8008940:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008942:	4b15      	ldr	r3, [pc, #84]	@ (8008998 <vTaskStartScheduler+0xd4>)
 8008944:	f04f 32ff 	mov.w	r2, #4294967295
 8008948:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800894a:	4b14      	ldr	r3, [pc, #80]	@ (800899c <vTaskStartScheduler+0xd8>)
 800894c:	2201      	movs	r2, #1
 800894e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008950:	4b13      	ldr	r3, [pc, #76]	@ (80089a0 <vTaskStartScheduler+0xdc>)
 8008952:	2200      	movs	r2, #0
 8008954:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008956:	f001 faa3 	bl	8009ea0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800895a:	e00f      	b.n	800897c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008962:	d10b      	bne.n	800897c <vTaskStartScheduler+0xb8>
	__asm volatile
 8008964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008968:	f383 8811 	msr	BASEPRI, r3
 800896c:	f3bf 8f6f 	isb	sy
 8008970:	f3bf 8f4f 	dsb	sy
 8008974:	60fb      	str	r3, [r7, #12]
}
 8008976:	bf00      	nop
 8008978:	bf00      	nop
 800897a:	e7fd      	b.n	8008978 <vTaskStartScheduler+0xb4>
}
 800897c:	bf00      	nop
 800897e:	3718      	adds	r7, #24
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}
 8008984:	0800efd4 	.word	0x0800efd4
 8008988:	08008fd1 	.word	0x08008fd1
 800898c:	20000ce4 	.word	0x20000ce4
 8008990:	20000bc0 	.word	0x20000bc0
 8008994:	20000030 	.word	0x20000030
 8008998:	20000ce0 	.word	0x20000ce0
 800899c:	20000ccc 	.word	0x20000ccc
 80089a0:	20000cc4 	.word	0x20000cc4

080089a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80089a4:	b480      	push	{r7}
 80089a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80089a8:	4b04      	ldr	r3, [pc, #16]	@ (80089bc <vTaskSuspendAll+0x18>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3301      	adds	r3, #1
 80089ae:	4a03      	ldr	r2, [pc, #12]	@ (80089bc <vTaskSuspendAll+0x18>)
 80089b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80089b2:	bf00      	nop
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr
 80089bc:	20000ce8 	.word	0x20000ce8

080089c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80089c6:	2300      	movs	r3, #0
 80089c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80089ca:	2300      	movs	r3, #0
 80089cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80089ce:	4b42      	ldr	r3, [pc, #264]	@ (8008ad8 <xTaskResumeAll+0x118>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d10b      	bne.n	80089ee <xTaskResumeAll+0x2e>
	__asm volatile
 80089d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089da:	f383 8811 	msr	BASEPRI, r3
 80089de:	f3bf 8f6f 	isb	sy
 80089e2:	f3bf 8f4f 	dsb	sy
 80089e6:	603b      	str	r3, [r7, #0]
}
 80089e8:	bf00      	nop
 80089ea:	bf00      	nop
 80089ec:	e7fd      	b.n	80089ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80089ee:	f001 fafb 	bl	8009fe8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80089f2:	4b39      	ldr	r3, [pc, #228]	@ (8008ad8 <xTaskResumeAll+0x118>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	3b01      	subs	r3, #1
 80089f8:	4a37      	ldr	r2, [pc, #220]	@ (8008ad8 <xTaskResumeAll+0x118>)
 80089fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089fc:	4b36      	ldr	r3, [pc, #216]	@ (8008ad8 <xTaskResumeAll+0x118>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d161      	bne.n	8008ac8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008a04:	4b35      	ldr	r3, [pc, #212]	@ (8008adc <xTaskResumeAll+0x11c>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d05d      	beq.n	8008ac8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a0c:	e02e      	b.n	8008a6c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a0e:	4b34      	ldr	r3, [pc, #208]	@ (8008ae0 <xTaskResumeAll+0x120>)
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	3318      	adds	r3, #24
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7fe fc40 	bl	80072a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	3304      	adds	r3, #4
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7fe fc3b 	bl	80072a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a2e:	2201      	movs	r2, #1
 8008a30:	409a      	lsls	r2, r3
 8008a32:	4b2c      	ldr	r3, [pc, #176]	@ (8008ae4 <xTaskResumeAll+0x124>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	4a2a      	ldr	r2, [pc, #168]	@ (8008ae4 <xTaskResumeAll+0x124>)
 8008a3a:	6013      	str	r3, [r2, #0]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a40:	4613      	mov	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4413      	add	r3, r2
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	4a27      	ldr	r2, [pc, #156]	@ (8008ae8 <xTaskResumeAll+0x128>)
 8008a4a:	441a      	add	r2, r3
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	3304      	adds	r3, #4
 8008a50:	4619      	mov	r1, r3
 8008a52:	4610      	mov	r0, r2
 8008a54:	f7fe fbc7 	bl	80071e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a5c:	4b23      	ldr	r3, [pc, #140]	@ (8008aec <xTaskResumeAll+0x12c>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d302      	bcc.n	8008a6c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008a66:	4b22      	ldr	r3, [pc, #136]	@ (8008af0 <xTaskResumeAll+0x130>)
 8008a68:	2201      	movs	r2, #1
 8008a6a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8008ae0 <xTaskResumeAll+0x120>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d1cc      	bne.n	8008a0e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d001      	beq.n	8008a7e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a7a:	f000 fb65 	bl	8009148 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8008af4 <xTaskResumeAll+0x134>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d010      	beq.n	8008aac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a8a:	f000 f847 	bl	8008b1c <xTaskIncrementTick>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d002      	beq.n	8008a9a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008a94:	4b16      	ldr	r3, [pc, #88]	@ (8008af0 <xTaskResumeAll+0x130>)
 8008a96:	2201      	movs	r2, #1
 8008a98:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1f1      	bne.n	8008a8a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008aa6:	4b13      	ldr	r3, [pc, #76]	@ (8008af4 <xTaskResumeAll+0x134>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008aac:	4b10      	ldr	r3, [pc, #64]	@ (8008af0 <xTaskResumeAll+0x130>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d009      	beq.n	8008ac8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8008af8 <xTaskResumeAll+0x138>)
 8008aba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008abe:	601a      	str	r2, [r3, #0]
 8008ac0:	f3bf 8f4f 	dsb	sy
 8008ac4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ac8:	f001 fac0 	bl	800a04c <vPortExitCritical>

	return xAlreadyYielded;
 8008acc:	68bb      	ldr	r3, [r7, #8]
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	20000ce8 	.word	0x20000ce8
 8008adc:	20000cc0 	.word	0x20000cc0
 8008ae0:	20000c80 	.word	0x20000c80
 8008ae4:	20000cc8 	.word	0x20000cc8
 8008ae8:	20000bc4 	.word	0x20000bc4
 8008aec:	20000bc0 	.word	0x20000bc0
 8008af0:	20000cd4 	.word	0x20000cd4
 8008af4:	20000cd0 	.word	0x20000cd0
 8008af8:	e000ed04 	.word	0xe000ed04

08008afc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008b02:	4b05      	ldr	r3, [pc, #20]	@ (8008b18 <xTaskGetTickCount+0x1c>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008b08:	687b      	ldr	r3, [r7, #4]
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	370c      	adds	r7, #12
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	20000cc4 	.word	0x20000cc4

08008b1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b086      	sub	sp, #24
 8008b20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008b22:	2300      	movs	r3, #0
 8008b24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b26:	4b4f      	ldr	r3, [pc, #316]	@ (8008c64 <xTaskIncrementTick+0x148>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	f040 808f 	bne.w	8008c4e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008b30:	4b4d      	ldr	r3, [pc, #308]	@ (8008c68 <xTaskIncrementTick+0x14c>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	3301      	adds	r3, #1
 8008b36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008b38:	4a4b      	ldr	r2, [pc, #300]	@ (8008c68 <xTaskIncrementTick+0x14c>)
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d121      	bne.n	8008b88 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008b44:	4b49      	ldr	r3, [pc, #292]	@ (8008c6c <xTaskIncrementTick+0x150>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00b      	beq.n	8008b66 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	603b      	str	r3, [r7, #0]
}
 8008b60:	bf00      	nop
 8008b62:	bf00      	nop
 8008b64:	e7fd      	b.n	8008b62 <xTaskIncrementTick+0x46>
 8008b66:	4b41      	ldr	r3, [pc, #260]	@ (8008c6c <xTaskIncrementTick+0x150>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	60fb      	str	r3, [r7, #12]
 8008b6c:	4b40      	ldr	r3, [pc, #256]	@ (8008c70 <xTaskIncrementTick+0x154>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a3e      	ldr	r2, [pc, #248]	@ (8008c6c <xTaskIncrementTick+0x150>)
 8008b72:	6013      	str	r3, [r2, #0]
 8008b74:	4a3e      	ldr	r2, [pc, #248]	@ (8008c70 <xTaskIncrementTick+0x154>)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	6013      	str	r3, [r2, #0]
 8008b7a:	4b3e      	ldr	r3, [pc, #248]	@ (8008c74 <xTaskIncrementTick+0x158>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	4a3c      	ldr	r2, [pc, #240]	@ (8008c74 <xTaskIncrementTick+0x158>)
 8008b82:	6013      	str	r3, [r2, #0]
 8008b84:	f000 fae0 	bl	8009148 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b88:	4b3b      	ldr	r3, [pc, #236]	@ (8008c78 <xTaskIncrementTick+0x15c>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	693a      	ldr	r2, [r7, #16]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d348      	bcc.n	8008c24 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b92:	4b36      	ldr	r3, [pc, #216]	@ (8008c6c <xTaskIncrementTick+0x150>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d104      	bne.n	8008ba6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b9c:	4b36      	ldr	r3, [pc, #216]	@ (8008c78 <xTaskIncrementTick+0x15c>)
 8008b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8008ba2:	601a      	str	r2, [r3, #0]
					break;
 8008ba4:	e03e      	b.n	8008c24 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ba6:	4b31      	ldr	r3, [pc, #196]	@ (8008c6c <xTaskIncrementTick+0x150>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008bb6:	693a      	ldr	r2, [r7, #16]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d203      	bcs.n	8008bc6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008bbe:	4a2e      	ldr	r2, [pc, #184]	@ (8008c78 <xTaskIncrementTick+0x15c>)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008bc4:	e02e      	b.n	8008c24 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	3304      	adds	r3, #4
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7fe fb68 	bl	80072a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d004      	beq.n	8008be2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	3318      	adds	r3, #24
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7fe fb5f 	bl	80072a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008be6:	2201      	movs	r2, #1
 8008be8:	409a      	lsls	r2, r3
 8008bea:	4b24      	ldr	r3, [pc, #144]	@ (8008c7c <xTaskIncrementTick+0x160>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	4a22      	ldr	r2, [pc, #136]	@ (8008c7c <xTaskIncrementTick+0x160>)
 8008bf2:	6013      	str	r3, [r2, #0]
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bf8:	4613      	mov	r3, r2
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	4413      	add	r3, r2
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	4a1f      	ldr	r2, [pc, #124]	@ (8008c80 <xTaskIncrementTick+0x164>)
 8008c02:	441a      	add	r2, r3
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	3304      	adds	r3, #4
 8008c08:	4619      	mov	r1, r3
 8008c0a:	4610      	mov	r0, r2
 8008c0c:	f7fe faeb 	bl	80071e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c14:	4b1b      	ldr	r3, [pc, #108]	@ (8008c84 <xTaskIncrementTick+0x168>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d3b9      	bcc.n	8008b92 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c22:	e7b6      	b.n	8008b92 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008c24:	4b17      	ldr	r3, [pc, #92]	@ (8008c84 <xTaskIncrementTick+0x168>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c2a:	4915      	ldr	r1, [pc, #84]	@ (8008c80 <xTaskIncrementTick+0x164>)
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	4413      	add	r3, r2
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	440b      	add	r3, r1
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d901      	bls.n	8008c40 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008c40:	4b11      	ldr	r3, [pc, #68]	@ (8008c88 <xTaskIncrementTick+0x16c>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d007      	beq.n	8008c58 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	617b      	str	r3, [r7, #20]
 8008c4c:	e004      	b.n	8008c58 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8008c8c <xTaskIncrementTick+0x170>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	3301      	adds	r3, #1
 8008c54:	4a0d      	ldr	r2, [pc, #52]	@ (8008c8c <xTaskIncrementTick+0x170>)
 8008c56:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008c58:	697b      	ldr	r3, [r7, #20]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3718      	adds	r7, #24
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	20000ce8 	.word	0x20000ce8
 8008c68:	20000cc4 	.word	0x20000cc4
 8008c6c:	20000c78 	.word	0x20000c78
 8008c70:	20000c7c 	.word	0x20000c7c
 8008c74:	20000cd8 	.word	0x20000cd8
 8008c78:	20000ce0 	.word	0x20000ce0
 8008c7c:	20000cc8 	.word	0x20000cc8
 8008c80:	20000bc4 	.word	0x20000bc4
 8008c84:	20000bc0 	.word	0x20000bc0
 8008c88:	20000cd4 	.word	0x20000cd4
 8008c8c:	20000cd0 	.word	0x20000cd0

08008c90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c90:	b480      	push	{r7}
 8008c92:	b087      	sub	sp, #28
 8008c94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c96:	4b2a      	ldr	r3, [pc, #168]	@ (8008d40 <vTaskSwitchContext+0xb0>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d003      	beq.n	8008ca6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c9e:	4b29      	ldr	r3, [pc, #164]	@ (8008d44 <vTaskSwitchContext+0xb4>)
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008ca4:	e045      	b.n	8008d32 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8008ca6:	4b27      	ldr	r3, [pc, #156]	@ (8008d44 <vTaskSwitchContext+0xb4>)
 8008ca8:	2200      	movs	r2, #0
 8008caa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cac:	4b26      	ldr	r3, [pc, #152]	@ (8008d48 <vTaskSwitchContext+0xb8>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	fab3 f383 	clz	r3, r3
 8008cb8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008cba:	7afb      	ldrb	r3, [r7, #11]
 8008cbc:	f1c3 031f 	rsb	r3, r3, #31
 8008cc0:	617b      	str	r3, [r7, #20]
 8008cc2:	4922      	ldr	r1, [pc, #136]	@ (8008d4c <vTaskSwitchContext+0xbc>)
 8008cc4:	697a      	ldr	r2, [r7, #20]
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	4413      	add	r3, r2
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	440b      	add	r3, r1
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d10b      	bne.n	8008cee <vTaskSwitchContext+0x5e>
	__asm volatile
 8008cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cda:	f383 8811 	msr	BASEPRI, r3
 8008cde:	f3bf 8f6f 	isb	sy
 8008ce2:	f3bf 8f4f 	dsb	sy
 8008ce6:	607b      	str	r3, [r7, #4]
}
 8008ce8:	bf00      	nop
 8008cea:	bf00      	nop
 8008cec:	e7fd      	b.n	8008cea <vTaskSwitchContext+0x5a>
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4413      	add	r3, r2
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	4a14      	ldr	r2, [pc, #80]	@ (8008d4c <vTaskSwitchContext+0xbc>)
 8008cfa:	4413      	add	r3, r2
 8008cfc:	613b      	str	r3, [r7, #16]
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	685a      	ldr	r2, [r3, #4]
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	605a      	str	r2, [r3, #4]
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	685a      	ldr	r2, [r3, #4]
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	3308      	adds	r3, #8
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d104      	bne.n	8008d1e <vTaskSwitchContext+0x8e>
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	685a      	ldr	r2, [r3, #4]
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	605a      	str	r2, [r3, #4]
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	4a0a      	ldr	r2, [pc, #40]	@ (8008d50 <vTaskSwitchContext+0xc0>)
 8008d26:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008d28:	4b09      	ldr	r3, [pc, #36]	@ (8008d50 <vTaskSwitchContext+0xc0>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	334c      	adds	r3, #76	@ 0x4c
 8008d2e:	4a09      	ldr	r2, [pc, #36]	@ (8008d54 <vTaskSwitchContext+0xc4>)
 8008d30:	6013      	str	r3, [r2, #0]
}
 8008d32:	bf00      	nop
 8008d34:	371c      	adds	r7, #28
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	20000ce8 	.word	0x20000ce8
 8008d44:	20000cd4 	.word	0x20000cd4
 8008d48:	20000cc8 	.word	0x20000cc8
 8008d4c:	20000bc4 	.word	0x20000bc4
 8008d50:	20000bc0 	.word	0x20000bc0
 8008d54:	20000030 	.word	0x20000030

08008d58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d10b      	bne.n	8008d80 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d6c:	f383 8811 	msr	BASEPRI, r3
 8008d70:	f3bf 8f6f 	isb	sy
 8008d74:	f3bf 8f4f 	dsb	sy
 8008d78:	60fb      	str	r3, [r7, #12]
}
 8008d7a:	bf00      	nop
 8008d7c:	bf00      	nop
 8008d7e:	e7fd      	b.n	8008d7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d80:	4b07      	ldr	r3, [pc, #28]	@ (8008da0 <vTaskPlaceOnEventList+0x48>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	3318      	adds	r3, #24
 8008d86:	4619      	mov	r1, r3
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f7fe fa50 	bl	800722e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d8e:	2101      	movs	r1, #1
 8008d90:	6838      	ldr	r0, [r7, #0]
 8008d92:	f000 fbb9 	bl	8009508 <prvAddCurrentTaskToDelayedList>
}
 8008d96:	bf00      	nop
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	20000bc0 	.word	0x20000bc0

08008da4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b086      	sub	sp, #24
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d10b      	bne.n	8008dce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dba:	f383 8811 	msr	BASEPRI, r3
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	f3bf 8f4f 	dsb	sy
 8008dc6:	617b      	str	r3, [r7, #20]
}
 8008dc8:	bf00      	nop
 8008dca:	bf00      	nop
 8008dcc:	e7fd      	b.n	8008dca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008dce:	4b0a      	ldr	r3, [pc, #40]	@ (8008df8 <vTaskPlaceOnEventListRestricted+0x54>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	3318      	adds	r3, #24
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	f7fe fa05 	bl	80071e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d002      	beq.n	8008de8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008de2:	f04f 33ff 	mov.w	r3, #4294967295
 8008de6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008de8:	6879      	ldr	r1, [r7, #4]
 8008dea:	68b8      	ldr	r0, [r7, #8]
 8008dec:	f000 fb8c 	bl	8009508 <prvAddCurrentTaskToDelayedList>
	}
 8008df0:	bf00      	nop
 8008df2:	3718      	adds	r7, #24
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	20000bc0 	.word	0x20000bc0

08008dfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b086      	sub	sp, #24
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d10b      	bne.n	8008e2a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e16:	f383 8811 	msr	BASEPRI, r3
 8008e1a:	f3bf 8f6f 	isb	sy
 8008e1e:	f3bf 8f4f 	dsb	sy
 8008e22:	60fb      	str	r3, [r7, #12]
}
 8008e24:	bf00      	nop
 8008e26:	bf00      	nop
 8008e28:	e7fd      	b.n	8008e26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	3318      	adds	r3, #24
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7fe fa36 	bl	80072a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e34:	4b1d      	ldr	r3, [pc, #116]	@ (8008eac <xTaskRemoveFromEventList+0xb0>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d11c      	bne.n	8008e76 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	3304      	adds	r3, #4
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7fe fa2d 	bl	80072a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	409a      	lsls	r2, r3
 8008e4e:	4b18      	ldr	r3, [pc, #96]	@ (8008eb0 <xTaskRemoveFromEventList+0xb4>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	4a16      	ldr	r2, [pc, #88]	@ (8008eb0 <xTaskRemoveFromEventList+0xb4>)
 8008e56:	6013      	str	r3, [r2, #0]
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	4413      	add	r3, r2
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4a13      	ldr	r2, [pc, #76]	@ (8008eb4 <xTaskRemoveFromEventList+0xb8>)
 8008e66:	441a      	add	r2, r3
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	3304      	adds	r3, #4
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	4610      	mov	r0, r2
 8008e70:	f7fe f9b9 	bl	80071e6 <vListInsertEnd>
 8008e74:	e005      	b.n	8008e82 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	3318      	adds	r3, #24
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	480e      	ldr	r0, [pc, #56]	@ (8008eb8 <xTaskRemoveFromEventList+0xbc>)
 8008e7e:	f7fe f9b2 	bl	80071e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e86:	4b0d      	ldr	r3, [pc, #52]	@ (8008ebc <xTaskRemoveFromEventList+0xc0>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d905      	bls.n	8008e9c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e90:	2301      	movs	r3, #1
 8008e92:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e94:	4b0a      	ldr	r3, [pc, #40]	@ (8008ec0 <xTaskRemoveFromEventList+0xc4>)
 8008e96:	2201      	movs	r2, #1
 8008e98:	601a      	str	r2, [r3, #0]
 8008e9a:	e001      	b.n	8008ea0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008ea0:	697b      	ldr	r3, [r7, #20]
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3718      	adds	r7, #24
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	20000ce8 	.word	0x20000ce8
 8008eb0:	20000cc8 	.word	0x20000cc8
 8008eb4:	20000bc4 	.word	0x20000bc4
 8008eb8:	20000c80 	.word	0x20000c80
 8008ebc:	20000bc0 	.word	0x20000bc0
 8008ec0:	20000cd4 	.word	0x20000cd4

08008ec4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008ecc:	4b06      	ldr	r3, [pc, #24]	@ (8008ee8 <vTaskInternalSetTimeOutState+0x24>)
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008ed4:	4b05      	ldr	r3, [pc, #20]	@ (8008eec <vTaskInternalSetTimeOutState+0x28>)
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	605a      	str	r2, [r3, #4]
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr
 8008ee8:	20000cd8 	.word	0x20000cd8
 8008eec:	20000cc4 	.word	0x20000cc4

08008ef0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b088      	sub	sp, #32
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10b      	bne.n	8008f18 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f04:	f383 8811 	msr	BASEPRI, r3
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	613b      	str	r3, [r7, #16]
}
 8008f12:	bf00      	nop
 8008f14:	bf00      	nop
 8008f16:	e7fd      	b.n	8008f14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d10b      	bne.n	8008f36 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f22:	f383 8811 	msr	BASEPRI, r3
 8008f26:	f3bf 8f6f 	isb	sy
 8008f2a:	f3bf 8f4f 	dsb	sy
 8008f2e:	60fb      	str	r3, [r7, #12]
}
 8008f30:	bf00      	nop
 8008f32:	bf00      	nop
 8008f34:	e7fd      	b.n	8008f32 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008f36:	f001 f857 	bl	8009fe8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8008fb0 <xTaskCheckForTimeOut+0xc0>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	69ba      	ldr	r2, [r7, #24]
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f52:	d102      	bne.n	8008f5a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008f54:	2300      	movs	r3, #0
 8008f56:	61fb      	str	r3, [r7, #28]
 8008f58:	e023      	b.n	8008fa2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	4b15      	ldr	r3, [pc, #84]	@ (8008fb4 <xTaskCheckForTimeOut+0xc4>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d007      	beq.n	8008f76 <xTaskCheckForTimeOut+0x86>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	69ba      	ldr	r2, [r7, #24]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d302      	bcc.n	8008f76 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008f70:	2301      	movs	r3, #1
 8008f72:	61fb      	str	r3, [r7, #28]
 8008f74:	e015      	b.n	8008fa2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	697a      	ldr	r2, [r7, #20]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d20b      	bcs.n	8008f98 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	1ad2      	subs	r2, r2, r3
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f7ff ff99 	bl	8008ec4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f92:	2300      	movs	r3, #0
 8008f94:	61fb      	str	r3, [r7, #28]
 8008f96:	e004      	b.n	8008fa2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008fa2:	f001 f853 	bl	800a04c <vPortExitCritical>

	return xReturn;
 8008fa6:	69fb      	ldr	r3, [r7, #28]
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3720      	adds	r7, #32
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	20000cc4 	.word	0x20000cc4
 8008fb4:	20000cd8 	.word	0x20000cd8

08008fb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008fb8:	b480      	push	{r7}
 8008fba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008fbc:	4b03      	ldr	r3, [pc, #12]	@ (8008fcc <vTaskMissedYield+0x14>)
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	601a      	str	r2, [r3, #0]
}
 8008fc2:	bf00      	nop
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr
 8008fcc:	20000cd4 	.word	0x20000cd4

08008fd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008fd8:	f000 f852 	bl	8009080 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008fdc:	4b06      	ldr	r3, [pc, #24]	@ (8008ff8 <prvIdleTask+0x28>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d9f9      	bls.n	8008fd8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008fe4:	4b05      	ldr	r3, [pc, #20]	@ (8008ffc <prvIdleTask+0x2c>)
 8008fe6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fea:	601a      	str	r2, [r3, #0]
 8008fec:	f3bf 8f4f 	dsb	sy
 8008ff0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008ff4:	e7f0      	b.n	8008fd8 <prvIdleTask+0x8>
 8008ff6:	bf00      	nop
 8008ff8:	20000bc4 	.word	0x20000bc4
 8008ffc:	e000ed04 	.word	0xe000ed04

08009000 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009006:	2300      	movs	r3, #0
 8009008:	607b      	str	r3, [r7, #4]
 800900a:	e00c      	b.n	8009026 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	4613      	mov	r3, r2
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	4413      	add	r3, r2
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	4a12      	ldr	r2, [pc, #72]	@ (8009060 <prvInitialiseTaskLists+0x60>)
 8009018:	4413      	add	r3, r2
 800901a:	4618      	mov	r0, r3
 800901c:	f7fe f8b6 	bl	800718c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	3301      	adds	r3, #1
 8009024:	607b      	str	r3, [r7, #4]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2b06      	cmp	r3, #6
 800902a:	d9ef      	bls.n	800900c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800902c:	480d      	ldr	r0, [pc, #52]	@ (8009064 <prvInitialiseTaskLists+0x64>)
 800902e:	f7fe f8ad 	bl	800718c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009032:	480d      	ldr	r0, [pc, #52]	@ (8009068 <prvInitialiseTaskLists+0x68>)
 8009034:	f7fe f8aa 	bl	800718c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009038:	480c      	ldr	r0, [pc, #48]	@ (800906c <prvInitialiseTaskLists+0x6c>)
 800903a:	f7fe f8a7 	bl	800718c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800903e:	480c      	ldr	r0, [pc, #48]	@ (8009070 <prvInitialiseTaskLists+0x70>)
 8009040:	f7fe f8a4 	bl	800718c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009044:	480b      	ldr	r0, [pc, #44]	@ (8009074 <prvInitialiseTaskLists+0x74>)
 8009046:	f7fe f8a1 	bl	800718c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800904a:	4b0b      	ldr	r3, [pc, #44]	@ (8009078 <prvInitialiseTaskLists+0x78>)
 800904c:	4a05      	ldr	r2, [pc, #20]	@ (8009064 <prvInitialiseTaskLists+0x64>)
 800904e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009050:	4b0a      	ldr	r3, [pc, #40]	@ (800907c <prvInitialiseTaskLists+0x7c>)
 8009052:	4a05      	ldr	r2, [pc, #20]	@ (8009068 <prvInitialiseTaskLists+0x68>)
 8009054:	601a      	str	r2, [r3, #0]
}
 8009056:	bf00      	nop
 8009058:	3708      	adds	r7, #8
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	20000bc4 	.word	0x20000bc4
 8009064:	20000c50 	.word	0x20000c50
 8009068:	20000c64 	.word	0x20000c64
 800906c:	20000c80 	.word	0x20000c80
 8009070:	20000c94 	.word	0x20000c94
 8009074:	20000cac 	.word	0x20000cac
 8009078:	20000c78 	.word	0x20000c78
 800907c:	20000c7c 	.word	0x20000c7c

08009080 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009086:	e019      	b.n	80090bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009088:	f000 ffae 	bl	8009fe8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800908c:	4b10      	ldr	r3, [pc, #64]	@ (80090d0 <prvCheckTasksWaitingTermination+0x50>)
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	3304      	adds	r3, #4
 8009098:	4618      	mov	r0, r3
 800909a:	f7fe f901 	bl	80072a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800909e:	4b0d      	ldr	r3, [pc, #52]	@ (80090d4 <prvCheckTasksWaitingTermination+0x54>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	3b01      	subs	r3, #1
 80090a4:	4a0b      	ldr	r2, [pc, #44]	@ (80090d4 <prvCheckTasksWaitingTermination+0x54>)
 80090a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80090a8:	4b0b      	ldr	r3, [pc, #44]	@ (80090d8 <prvCheckTasksWaitingTermination+0x58>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	3b01      	subs	r3, #1
 80090ae:	4a0a      	ldr	r2, [pc, #40]	@ (80090d8 <prvCheckTasksWaitingTermination+0x58>)
 80090b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80090b2:	f000 ffcb 	bl	800a04c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 f810 	bl	80090dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090bc:	4b06      	ldr	r3, [pc, #24]	@ (80090d8 <prvCheckTasksWaitingTermination+0x58>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1e1      	bne.n	8009088 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80090c4:	bf00      	nop
 80090c6:	bf00      	nop
 80090c8:	3708      	adds	r7, #8
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	20000c94 	.word	0x20000c94
 80090d4:	20000cc0 	.word	0x20000cc0
 80090d8:	20000ca8 	.word	0x20000ca8

080090dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	334c      	adds	r3, #76	@ 0x4c
 80090e8:	4618      	mov	r0, r3
 80090ea:	f002 fa3b 	bl	800b564 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d108      	bne.n	800910a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090fc:	4618      	mov	r0, r3
 80090fe:	f001 f963 	bl	800a3c8 <vPortFree>
				vPortFree( pxTCB );
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f001 f960 	bl	800a3c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009108:	e019      	b.n	800913e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009110:	2b01      	cmp	r3, #1
 8009112:	d103      	bne.n	800911c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f001 f957 	bl	800a3c8 <vPortFree>
	}
 800911a:	e010      	b.n	800913e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009122:	2b02      	cmp	r3, #2
 8009124:	d00b      	beq.n	800913e <prvDeleteTCB+0x62>
	__asm volatile
 8009126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800912a:	f383 8811 	msr	BASEPRI, r3
 800912e:	f3bf 8f6f 	isb	sy
 8009132:	f3bf 8f4f 	dsb	sy
 8009136:	60fb      	str	r3, [r7, #12]
}
 8009138:	bf00      	nop
 800913a:	bf00      	nop
 800913c:	e7fd      	b.n	800913a <prvDeleteTCB+0x5e>
	}
 800913e:	bf00      	nop
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
	...

08009148 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800914e:	4b0c      	ldr	r3, [pc, #48]	@ (8009180 <prvResetNextTaskUnblockTime+0x38>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d104      	bne.n	8009162 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009158:	4b0a      	ldr	r3, [pc, #40]	@ (8009184 <prvResetNextTaskUnblockTime+0x3c>)
 800915a:	f04f 32ff 	mov.w	r2, #4294967295
 800915e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009160:	e008      	b.n	8009174 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009162:	4b07      	ldr	r3, [pc, #28]	@ (8009180 <prvResetNextTaskUnblockTime+0x38>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	4a04      	ldr	r2, [pc, #16]	@ (8009184 <prvResetNextTaskUnblockTime+0x3c>)
 8009172:	6013      	str	r3, [r2, #0]
}
 8009174:	bf00      	nop
 8009176:	370c      	adds	r7, #12
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr
 8009180:	20000c78 	.word	0x20000c78
 8009184:	20000ce0 	.word	0x20000ce0

08009188 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800918e:	4b0b      	ldr	r3, [pc, #44]	@ (80091bc <xTaskGetSchedulerState+0x34>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d102      	bne.n	800919c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009196:	2301      	movs	r3, #1
 8009198:	607b      	str	r3, [r7, #4]
 800919a:	e008      	b.n	80091ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800919c:	4b08      	ldr	r3, [pc, #32]	@ (80091c0 <xTaskGetSchedulerState+0x38>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d102      	bne.n	80091aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80091a4:	2302      	movs	r3, #2
 80091a6:	607b      	str	r3, [r7, #4]
 80091a8:	e001      	b.n	80091ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80091aa:	2300      	movs	r3, #0
 80091ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80091ae:	687b      	ldr	r3, [r7, #4]
	}
 80091b0:	4618      	mov	r0, r3
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr
 80091bc:	20000ccc 	.word	0x20000ccc
 80091c0:	20000ce8 	.word	0x20000ce8

080091c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80091d0:	2300      	movs	r3, #0
 80091d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d05e      	beq.n	8009298 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091de:	4b31      	ldr	r3, [pc, #196]	@ (80092a4 <xTaskPriorityInherit+0xe0>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d24e      	bcs.n	8009286 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	db06      	blt.n	80091fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091f0:	4b2c      	ldr	r3, [pc, #176]	@ (80092a4 <xTaskPriorityInherit+0xe0>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091f6:	f1c3 0207 	rsb	r2, r3, #7
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	6959      	ldr	r1, [r3, #20]
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009206:	4613      	mov	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	4413      	add	r3, r2
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	4a26      	ldr	r2, [pc, #152]	@ (80092a8 <xTaskPriorityInherit+0xe4>)
 8009210:	4413      	add	r3, r2
 8009212:	4299      	cmp	r1, r3
 8009214:	d12f      	bne.n	8009276 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	3304      	adds	r3, #4
 800921a:	4618      	mov	r0, r3
 800921c:	f7fe f840 	bl	80072a0 <uxListRemove>
 8009220:	4603      	mov	r3, r0
 8009222:	2b00      	cmp	r3, #0
 8009224:	d10a      	bne.n	800923c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800922a:	2201      	movs	r2, #1
 800922c:	fa02 f303 	lsl.w	r3, r2, r3
 8009230:	43da      	mvns	r2, r3
 8009232:	4b1e      	ldr	r3, [pc, #120]	@ (80092ac <xTaskPriorityInherit+0xe8>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4013      	ands	r3, r2
 8009238:	4a1c      	ldr	r2, [pc, #112]	@ (80092ac <xTaskPriorityInherit+0xe8>)
 800923a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800923c:	4b19      	ldr	r3, [pc, #100]	@ (80092a4 <xTaskPriorityInherit+0xe0>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800924a:	2201      	movs	r2, #1
 800924c:	409a      	lsls	r2, r3
 800924e:	4b17      	ldr	r3, [pc, #92]	@ (80092ac <xTaskPriorityInherit+0xe8>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4313      	orrs	r3, r2
 8009254:	4a15      	ldr	r2, [pc, #84]	@ (80092ac <xTaskPriorityInherit+0xe8>)
 8009256:	6013      	str	r3, [r2, #0]
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800925c:	4613      	mov	r3, r2
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	4413      	add	r3, r2
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	4a10      	ldr	r2, [pc, #64]	@ (80092a8 <xTaskPriorityInherit+0xe4>)
 8009266:	441a      	add	r2, r3
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	3304      	adds	r3, #4
 800926c:	4619      	mov	r1, r3
 800926e:	4610      	mov	r0, r2
 8009270:	f7fd ffb9 	bl	80071e6 <vListInsertEnd>
 8009274:	e004      	b.n	8009280 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009276:	4b0b      	ldr	r3, [pc, #44]	@ (80092a4 <xTaskPriorityInherit+0xe0>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009280:	2301      	movs	r3, #1
 8009282:	60fb      	str	r3, [r7, #12]
 8009284:	e008      	b.n	8009298 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800928a:	4b06      	ldr	r3, [pc, #24]	@ (80092a4 <xTaskPriorityInherit+0xe0>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009290:	429a      	cmp	r2, r3
 8009292:	d201      	bcs.n	8009298 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009294:	2301      	movs	r3, #1
 8009296:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009298:	68fb      	ldr	r3, [r7, #12]
	}
 800929a:	4618      	mov	r0, r3
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	20000bc0 	.word	0x20000bc0
 80092a8:	20000bc4 	.word	0x20000bc4
 80092ac:	20000cc8 	.word	0x20000cc8

080092b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b086      	sub	sp, #24
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80092bc:	2300      	movs	r3, #0
 80092be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d070      	beq.n	80093a8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80092c6:	4b3b      	ldr	r3, [pc, #236]	@ (80093b4 <xTaskPriorityDisinherit+0x104>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	693a      	ldr	r2, [r7, #16]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d00b      	beq.n	80092e8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80092d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d4:	f383 8811 	msr	BASEPRI, r3
 80092d8:	f3bf 8f6f 	isb	sy
 80092dc:	f3bf 8f4f 	dsb	sy
 80092e0:	60fb      	str	r3, [r7, #12]
}
 80092e2:	bf00      	nop
 80092e4:	bf00      	nop
 80092e6:	e7fd      	b.n	80092e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d10b      	bne.n	8009308 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80092f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f4:	f383 8811 	msr	BASEPRI, r3
 80092f8:	f3bf 8f6f 	isb	sy
 80092fc:	f3bf 8f4f 	dsb	sy
 8009300:	60bb      	str	r3, [r7, #8]
}
 8009302:	bf00      	nop
 8009304:	bf00      	nop
 8009306:	e7fd      	b.n	8009304 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800930c:	1e5a      	subs	r2, r3, #1
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800931a:	429a      	cmp	r2, r3
 800931c:	d044      	beq.n	80093a8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009322:	2b00      	cmp	r3, #0
 8009324:	d140      	bne.n	80093a8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	3304      	adds	r3, #4
 800932a:	4618      	mov	r0, r3
 800932c:	f7fd ffb8 	bl	80072a0 <uxListRemove>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d115      	bne.n	8009362 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800933a:	491f      	ldr	r1, [pc, #124]	@ (80093b8 <xTaskPriorityDisinherit+0x108>)
 800933c:	4613      	mov	r3, r2
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	4413      	add	r3, r2
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	440b      	add	r3, r1
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d10a      	bne.n	8009362 <xTaskPriorityDisinherit+0xb2>
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009350:	2201      	movs	r2, #1
 8009352:	fa02 f303 	lsl.w	r3, r2, r3
 8009356:	43da      	mvns	r2, r3
 8009358:	4b18      	ldr	r3, [pc, #96]	@ (80093bc <xTaskPriorityDisinherit+0x10c>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4013      	ands	r3, r2
 800935e:	4a17      	ldr	r2, [pc, #92]	@ (80093bc <xTaskPriorityDisinherit+0x10c>)
 8009360:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800936e:	f1c3 0207 	rsb	r2, r3, #7
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800937a:	2201      	movs	r2, #1
 800937c:	409a      	lsls	r2, r3
 800937e:	4b0f      	ldr	r3, [pc, #60]	@ (80093bc <xTaskPriorityDisinherit+0x10c>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4313      	orrs	r3, r2
 8009384:	4a0d      	ldr	r2, [pc, #52]	@ (80093bc <xTaskPriorityDisinherit+0x10c>)
 8009386:	6013      	str	r3, [r2, #0]
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800938c:	4613      	mov	r3, r2
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	4413      	add	r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	4a08      	ldr	r2, [pc, #32]	@ (80093b8 <xTaskPriorityDisinherit+0x108>)
 8009396:	441a      	add	r2, r3
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	3304      	adds	r3, #4
 800939c:	4619      	mov	r1, r3
 800939e:	4610      	mov	r0, r2
 80093a0:	f7fd ff21 	bl	80071e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80093a4:	2301      	movs	r3, #1
 80093a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80093a8:	697b      	ldr	r3, [r7, #20]
	}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3718      	adds	r7, #24
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	20000bc0 	.word	0x20000bc0
 80093b8:	20000bc4 	.word	0x20000bc4
 80093bc:	20000cc8 	.word	0x20000cc8

080093c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b088      	sub	sp, #32
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80093ce:	2301      	movs	r3, #1
 80093d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d079      	beq.n	80094cc <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d10b      	bne.n	80093f8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80093e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e4:	f383 8811 	msr	BASEPRI, r3
 80093e8:	f3bf 8f6f 	isb	sy
 80093ec:	f3bf 8f4f 	dsb	sy
 80093f0:	60fb      	str	r3, [r7, #12]
}
 80093f2:	bf00      	nop
 80093f4:	bf00      	nop
 80093f6:	e7fd      	b.n	80093f4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093fc:	683a      	ldr	r2, [r7, #0]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d902      	bls.n	8009408 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	61fb      	str	r3, [r7, #28]
 8009406:	e002      	b.n	800940e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800940c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009412:	69fa      	ldr	r2, [r7, #28]
 8009414:	429a      	cmp	r2, r3
 8009416:	d059      	beq.n	80094cc <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800941c:	697a      	ldr	r2, [r7, #20]
 800941e:	429a      	cmp	r2, r3
 8009420:	d154      	bne.n	80094cc <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009422:	4b2c      	ldr	r3, [pc, #176]	@ (80094d4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	69ba      	ldr	r2, [r7, #24]
 8009428:	429a      	cmp	r2, r3
 800942a:	d10b      	bne.n	8009444 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800942c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009430:	f383 8811 	msr	BASEPRI, r3
 8009434:	f3bf 8f6f 	isb	sy
 8009438:	f3bf 8f4f 	dsb	sy
 800943c:	60bb      	str	r3, [r7, #8]
}
 800943e:	bf00      	nop
 8009440:	bf00      	nop
 8009442:	e7fd      	b.n	8009440 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009444:	69bb      	ldr	r3, [r7, #24]
 8009446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009448:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	69fa      	ldr	r2, [r7, #28]
 800944e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009450:	69bb      	ldr	r3, [r7, #24]
 8009452:	699b      	ldr	r3, [r3, #24]
 8009454:	2b00      	cmp	r3, #0
 8009456:	db04      	blt.n	8009462 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	f1c3 0207 	rsb	r2, r3, #7
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	6959      	ldr	r1, [r3, #20]
 8009466:	693a      	ldr	r2, [r7, #16]
 8009468:	4613      	mov	r3, r2
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	4413      	add	r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4a19      	ldr	r2, [pc, #100]	@ (80094d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009472:	4413      	add	r3, r2
 8009474:	4299      	cmp	r1, r3
 8009476:	d129      	bne.n	80094cc <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	3304      	adds	r3, #4
 800947c:	4618      	mov	r0, r3
 800947e:	f7fd ff0f 	bl	80072a0 <uxListRemove>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d10a      	bne.n	800949e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800948c:	2201      	movs	r2, #1
 800948e:	fa02 f303 	lsl.w	r3, r2, r3
 8009492:	43da      	mvns	r2, r3
 8009494:	4b11      	ldr	r3, [pc, #68]	@ (80094dc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4013      	ands	r3, r2
 800949a:	4a10      	ldr	r2, [pc, #64]	@ (80094dc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800949c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094a2:	2201      	movs	r2, #1
 80094a4:	409a      	lsls	r2, r3
 80094a6:	4b0d      	ldr	r3, [pc, #52]	@ (80094dc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4313      	orrs	r3, r2
 80094ac:	4a0b      	ldr	r2, [pc, #44]	@ (80094dc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80094ae:	6013      	str	r3, [r2, #0]
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094b4:	4613      	mov	r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	4413      	add	r3, r2
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	4a06      	ldr	r2, [pc, #24]	@ (80094d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80094be:	441a      	add	r2, r3
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	3304      	adds	r3, #4
 80094c4:	4619      	mov	r1, r3
 80094c6:	4610      	mov	r0, r2
 80094c8:	f7fd fe8d 	bl	80071e6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80094cc:	bf00      	nop
 80094ce:	3720      	adds	r7, #32
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	20000bc0 	.word	0x20000bc0
 80094d8:	20000bc4 	.word	0x20000bc4
 80094dc:	20000cc8 	.word	0x20000cc8

080094e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80094e0:	b480      	push	{r7}
 80094e2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80094e4:	4b07      	ldr	r3, [pc, #28]	@ (8009504 <pvTaskIncrementMutexHeldCount+0x24>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d004      	beq.n	80094f6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80094ec:	4b05      	ldr	r3, [pc, #20]	@ (8009504 <pvTaskIncrementMutexHeldCount+0x24>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80094f2:	3201      	adds	r2, #1
 80094f4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80094f6:	4b03      	ldr	r3, [pc, #12]	@ (8009504 <pvTaskIncrementMutexHeldCount+0x24>)
 80094f8:	681b      	ldr	r3, [r3, #0]
	}
 80094fa:	4618      	mov	r0, r3
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr
 8009504:	20000bc0 	.word	0x20000bc0

08009508 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009512:	4b29      	ldr	r3, [pc, #164]	@ (80095b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009518:	4b28      	ldr	r3, [pc, #160]	@ (80095bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	3304      	adds	r3, #4
 800951e:	4618      	mov	r0, r3
 8009520:	f7fd febe 	bl	80072a0 <uxListRemove>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d10b      	bne.n	8009542 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800952a:	4b24      	ldr	r3, [pc, #144]	@ (80095bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009530:	2201      	movs	r2, #1
 8009532:	fa02 f303 	lsl.w	r3, r2, r3
 8009536:	43da      	mvns	r2, r3
 8009538:	4b21      	ldr	r3, [pc, #132]	@ (80095c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4013      	ands	r3, r2
 800953e:	4a20      	ldr	r2, [pc, #128]	@ (80095c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009540:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009548:	d10a      	bne.n	8009560 <prvAddCurrentTaskToDelayedList+0x58>
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d007      	beq.n	8009560 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009550:	4b1a      	ldr	r3, [pc, #104]	@ (80095bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	3304      	adds	r3, #4
 8009556:	4619      	mov	r1, r3
 8009558:	481a      	ldr	r0, [pc, #104]	@ (80095c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800955a:	f7fd fe44 	bl	80071e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800955e:	e026      	b.n	80095ae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4413      	add	r3, r2
 8009566:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009568:	4b14      	ldr	r3, [pc, #80]	@ (80095bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68ba      	ldr	r2, [r7, #8]
 800956e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009570:	68ba      	ldr	r2, [r7, #8]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	429a      	cmp	r2, r3
 8009576:	d209      	bcs.n	800958c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009578:	4b13      	ldr	r3, [pc, #76]	@ (80095c8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	4b0f      	ldr	r3, [pc, #60]	@ (80095bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	3304      	adds	r3, #4
 8009582:	4619      	mov	r1, r3
 8009584:	4610      	mov	r0, r2
 8009586:	f7fd fe52 	bl	800722e <vListInsert>
}
 800958a:	e010      	b.n	80095ae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800958c:	4b0f      	ldr	r3, [pc, #60]	@ (80095cc <prvAddCurrentTaskToDelayedList+0xc4>)
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	4b0a      	ldr	r3, [pc, #40]	@ (80095bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	3304      	adds	r3, #4
 8009596:	4619      	mov	r1, r3
 8009598:	4610      	mov	r0, r2
 800959a:	f7fd fe48 	bl	800722e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800959e:	4b0c      	ldr	r3, [pc, #48]	@ (80095d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68ba      	ldr	r2, [r7, #8]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d202      	bcs.n	80095ae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80095a8:	4a09      	ldr	r2, [pc, #36]	@ (80095d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	6013      	str	r3, [r2, #0]
}
 80095ae:	bf00      	nop
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	20000cc4 	.word	0x20000cc4
 80095bc:	20000bc0 	.word	0x20000bc0
 80095c0:	20000cc8 	.word	0x20000cc8
 80095c4:	20000cac 	.word	0x20000cac
 80095c8:	20000c7c 	.word	0x20000c7c
 80095cc:	20000c78 	.word	0x20000c78
 80095d0:	20000ce0 	.word	0x20000ce0

080095d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b08a      	sub	sp, #40	@ 0x28
 80095d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80095da:	2300      	movs	r3, #0
 80095dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80095de:	f000 fb95 	bl	8009d0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80095e2:	4b1d      	ldr	r3, [pc, #116]	@ (8009658 <xTimerCreateTimerTask+0x84>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d021      	beq.n	800962e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80095ea:	2300      	movs	r3, #0
 80095ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80095ee:	2300      	movs	r3, #0
 80095f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80095f2:	1d3a      	adds	r2, r7, #4
 80095f4:	f107 0108 	add.w	r1, r7, #8
 80095f8:	f107 030c 	add.w	r3, r7, #12
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7f7 fec5 	bl	800138c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009602:	6879      	ldr	r1, [r7, #4]
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	9202      	str	r2, [sp, #8]
 800960a:	9301      	str	r3, [sp, #4]
 800960c:	2306      	movs	r3, #6
 800960e:	9300      	str	r3, [sp, #0]
 8009610:	2300      	movs	r3, #0
 8009612:	460a      	mov	r2, r1
 8009614:	4911      	ldr	r1, [pc, #68]	@ (800965c <xTimerCreateTimerTask+0x88>)
 8009616:	4812      	ldr	r0, [pc, #72]	@ (8009660 <xTimerCreateTimerTask+0x8c>)
 8009618:	f7fe fdd8 	bl	80081cc <xTaskCreateStatic>
 800961c:	4603      	mov	r3, r0
 800961e:	4a11      	ldr	r2, [pc, #68]	@ (8009664 <xTimerCreateTimerTask+0x90>)
 8009620:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009622:	4b10      	ldr	r3, [pc, #64]	@ (8009664 <xTimerCreateTimerTask+0x90>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d001      	beq.n	800962e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800962a:	2301      	movs	r3, #1
 800962c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d10b      	bne.n	800964c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009638:	f383 8811 	msr	BASEPRI, r3
 800963c:	f3bf 8f6f 	isb	sy
 8009640:	f3bf 8f4f 	dsb	sy
 8009644:	613b      	str	r3, [r7, #16]
}
 8009646:	bf00      	nop
 8009648:	bf00      	nop
 800964a:	e7fd      	b.n	8009648 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800964c:	697b      	ldr	r3, [r7, #20]
}
 800964e:	4618      	mov	r0, r3
 8009650:	3718      	adds	r7, #24
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	20000d1c 	.word	0x20000d1c
 800965c:	0800efdc 	.word	0x0800efdc
 8009660:	080098dd 	.word	0x080098dd
 8009664:	20000d20 	.word	0x20000d20

08009668 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009668:	b580      	push	{r7, lr}
 800966a:	b088      	sub	sp, #32
 800966c:	af02      	add	r7, sp, #8
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	607a      	str	r2, [r7, #4]
 8009674:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009676:	2028      	movs	r0, #40	@ 0x28
 8009678:	f000 fdd8 	bl	800a22c <pvPortMalloc>
 800967c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00d      	beq.n	80096a0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	2200      	movs	r2, #0
 8009688:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	9301      	str	r3, [sp, #4]
 8009690:	6a3b      	ldr	r3, [r7, #32]
 8009692:	9300      	str	r3, [sp, #0]
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	68b9      	ldr	r1, [r7, #8]
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	f000 f845 	bl	800972a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80096a0:	697b      	ldr	r3, [r7, #20]
	}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3718      	adds	r7, #24
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b08a      	sub	sp, #40	@ 0x28
 80096ae:	af02      	add	r7, sp, #8
 80096b0:	60f8      	str	r0, [r7, #12]
 80096b2:	60b9      	str	r1, [r7, #8]
 80096b4:	607a      	str	r2, [r7, #4]
 80096b6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80096b8:	2328      	movs	r3, #40	@ 0x28
 80096ba:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	2b28      	cmp	r3, #40	@ 0x28
 80096c0:	d00b      	beq.n	80096da <xTimerCreateStatic+0x30>
	__asm volatile
 80096c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096c6:	f383 8811 	msr	BASEPRI, r3
 80096ca:	f3bf 8f6f 	isb	sy
 80096ce:	f3bf 8f4f 	dsb	sy
 80096d2:	61bb      	str	r3, [r7, #24]
}
 80096d4:	bf00      	nop
 80096d6:	bf00      	nop
 80096d8:	e7fd      	b.n	80096d6 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80096da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80096dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d10b      	bne.n	80096fa <xTimerCreateStatic+0x50>
	__asm volatile
 80096e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e6:	f383 8811 	msr	BASEPRI, r3
 80096ea:	f3bf 8f6f 	isb	sy
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	617b      	str	r3, [r7, #20]
}
 80096f4:	bf00      	nop
 80096f6:	bf00      	nop
 80096f8:	e7fd      	b.n	80096f6 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80096fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096fc:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d00d      	beq.n	8009720 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	2202      	movs	r2, #2
 8009708:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	9301      	str	r3, [sp, #4]
 8009710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009712:	9300      	str	r3, [sp, #0]
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	68b9      	ldr	r1, [r7, #8]
 800971a:	68f8      	ldr	r0, [r7, #12]
 800971c:	f000 f805 	bl	800972a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009720:	69fb      	ldr	r3, [r7, #28]
	}
 8009722:	4618      	mov	r0, r3
 8009724:	3720      	adds	r7, #32
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}

0800972a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800972a:	b580      	push	{r7, lr}
 800972c:	b086      	sub	sp, #24
 800972e:	af00      	add	r7, sp, #0
 8009730:	60f8      	str	r0, [r7, #12]
 8009732:	60b9      	str	r1, [r7, #8]
 8009734:	607a      	str	r2, [r7, #4]
 8009736:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d10b      	bne.n	8009756 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800973e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009742:	f383 8811 	msr	BASEPRI, r3
 8009746:	f3bf 8f6f 	isb	sy
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	617b      	str	r3, [r7, #20]
}
 8009750:	bf00      	nop
 8009752:	bf00      	nop
 8009754:	e7fd      	b.n	8009752 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8009756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009758:	2b00      	cmp	r3, #0
 800975a:	d01e      	beq.n	800979a <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800975c:	f000 fad6 	bl	8009d0c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009762:	68fa      	ldr	r2, [r7, #12]
 8009764:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009768:	68ba      	ldr	r2, [r7, #8]
 800976a:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800976c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800976e:	683a      	ldr	r2, [r7, #0]
 8009770:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009774:	6a3a      	ldr	r2, [r7, #32]
 8009776:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800977a:	3304      	adds	r3, #4
 800977c:	4618      	mov	r0, r3
 800977e:	f7fd fd25 	bl	80071cc <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d008      	beq.n	800979a <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800978a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800978e:	f043 0304 	orr.w	r3, r3, #4
 8009792:	b2da      	uxtb	r2, r3
 8009794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009796:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800979a:	bf00      	nop
 800979c:	3718      	adds	r7, #24
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
	...

080097a4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b08a      	sub	sp, #40	@ 0x28
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	607a      	str	r2, [r7, #4]
 80097b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80097b2:	2300      	movs	r3, #0
 80097b4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d10b      	bne.n	80097d4 <xTimerGenericCommand+0x30>
	__asm volatile
 80097bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c0:	f383 8811 	msr	BASEPRI, r3
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	f3bf 8f4f 	dsb	sy
 80097cc:	623b      	str	r3, [r7, #32]
}
 80097ce:	bf00      	nop
 80097d0:	bf00      	nop
 80097d2:	e7fd      	b.n	80097d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80097d4:	4b19      	ldr	r3, [pc, #100]	@ (800983c <xTimerGenericCommand+0x98>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d02a      	beq.n	8009832 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	2b05      	cmp	r3, #5
 80097ec:	dc18      	bgt.n	8009820 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80097ee:	f7ff fccb 	bl	8009188 <xTaskGetSchedulerState>
 80097f2:	4603      	mov	r3, r0
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	d109      	bne.n	800980c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80097f8:	4b10      	ldr	r3, [pc, #64]	@ (800983c <xTimerGenericCommand+0x98>)
 80097fa:	6818      	ldr	r0, [r3, #0]
 80097fc:	f107 0114 	add.w	r1, r7, #20
 8009800:	2300      	movs	r3, #0
 8009802:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009804:	f7fd feb8 	bl	8007578 <xQueueGenericSend>
 8009808:	6278      	str	r0, [r7, #36]	@ 0x24
 800980a:	e012      	b.n	8009832 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800980c:	4b0b      	ldr	r3, [pc, #44]	@ (800983c <xTimerGenericCommand+0x98>)
 800980e:	6818      	ldr	r0, [r3, #0]
 8009810:	f107 0114 	add.w	r1, r7, #20
 8009814:	2300      	movs	r3, #0
 8009816:	2200      	movs	r2, #0
 8009818:	f7fd feae 	bl	8007578 <xQueueGenericSend>
 800981c:	6278      	str	r0, [r7, #36]	@ 0x24
 800981e:	e008      	b.n	8009832 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009820:	4b06      	ldr	r3, [pc, #24]	@ (800983c <xTimerGenericCommand+0x98>)
 8009822:	6818      	ldr	r0, [r3, #0]
 8009824:	f107 0114 	add.w	r1, r7, #20
 8009828:	2300      	movs	r3, #0
 800982a:	683a      	ldr	r2, [r7, #0]
 800982c:	f7fd ffa6 	bl	800777c <xQueueGenericSendFromISR>
 8009830:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009834:	4618      	mov	r0, r3
 8009836:	3728      	adds	r7, #40	@ 0x28
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}
 800983c:	20000d1c 	.word	0x20000d1c

08009840 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b088      	sub	sp, #32
 8009844:	af02      	add	r7, sp, #8
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800984a:	4b23      	ldr	r3, [pc, #140]	@ (80098d8 <prvProcessExpiredTimer+0x98>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	68db      	ldr	r3, [r3, #12]
 8009850:	68db      	ldr	r3, [r3, #12]
 8009852:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	3304      	adds	r3, #4
 8009858:	4618      	mov	r0, r3
 800985a:	f7fd fd21 	bl	80072a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009864:	f003 0304 	and.w	r3, r3, #4
 8009868:	2b00      	cmp	r3, #0
 800986a:	d023      	beq.n	80098b4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	699a      	ldr	r2, [r3, #24]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	18d1      	adds	r1, r2, r3
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	683a      	ldr	r2, [r7, #0]
 8009878:	6978      	ldr	r0, [r7, #20]
 800987a:	f000 f8d5 	bl	8009a28 <prvInsertTimerInActiveList>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	d020      	beq.n	80098c6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009884:	2300      	movs	r3, #0
 8009886:	9300      	str	r3, [sp, #0]
 8009888:	2300      	movs	r3, #0
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	2100      	movs	r1, #0
 800988e:	6978      	ldr	r0, [r7, #20]
 8009890:	f7ff ff88 	bl	80097a4 <xTimerGenericCommand>
 8009894:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d114      	bne.n	80098c6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800989c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098a0:	f383 8811 	msr	BASEPRI, r3
 80098a4:	f3bf 8f6f 	isb	sy
 80098a8:	f3bf 8f4f 	dsb	sy
 80098ac:	60fb      	str	r3, [r7, #12]
}
 80098ae:	bf00      	nop
 80098b0:	bf00      	nop
 80098b2:	e7fd      	b.n	80098b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80098ba:	f023 0301 	bic.w	r3, r3, #1
 80098be:	b2da      	uxtb	r2, r3
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	6a1b      	ldr	r3, [r3, #32]
 80098ca:	6978      	ldr	r0, [r7, #20]
 80098cc:	4798      	blx	r3
}
 80098ce:	bf00      	nop
 80098d0:	3718      	adds	r7, #24
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	20000d14 	.word	0x20000d14

080098dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b084      	sub	sp, #16
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80098e4:	f107 0308 	add.w	r3, r7, #8
 80098e8:	4618      	mov	r0, r3
 80098ea:	f000 f859 	bl	80099a0 <prvGetNextExpireTime>
 80098ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	4619      	mov	r1, r3
 80098f4:	68f8      	ldr	r0, [r7, #12]
 80098f6:	f000 f805 	bl	8009904 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80098fa:	f000 f8d7 	bl	8009aac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80098fe:	bf00      	nop
 8009900:	e7f0      	b.n	80098e4 <prvTimerTask+0x8>
	...

08009904 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800990e:	f7ff f849 	bl	80089a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009912:	f107 0308 	add.w	r3, r7, #8
 8009916:	4618      	mov	r0, r3
 8009918:	f000 f866 	bl	80099e8 <prvSampleTimeNow>
 800991c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d130      	bne.n	8009986 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d10a      	bne.n	8009940 <prvProcessTimerOrBlockTask+0x3c>
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	429a      	cmp	r2, r3
 8009930:	d806      	bhi.n	8009940 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009932:	f7ff f845 	bl	80089c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009936:	68f9      	ldr	r1, [r7, #12]
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f7ff ff81 	bl	8009840 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800993e:	e024      	b.n	800998a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d008      	beq.n	8009958 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009946:	4b13      	ldr	r3, [pc, #76]	@ (8009994 <prvProcessTimerOrBlockTask+0x90>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d101      	bne.n	8009954 <prvProcessTimerOrBlockTask+0x50>
 8009950:	2301      	movs	r3, #1
 8009952:	e000      	b.n	8009956 <prvProcessTimerOrBlockTask+0x52>
 8009954:	2300      	movs	r3, #0
 8009956:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009958:	4b0f      	ldr	r3, [pc, #60]	@ (8009998 <prvProcessTimerOrBlockTask+0x94>)
 800995a:	6818      	ldr	r0, [r3, #0]
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	1ad3      	subs	r3, r2, r3
 8009962:	683a      	ldr	r2, [r7, #0]
 8009964:	4619      	mov	r1, r3
 8009966:	f7fe fbfd 	bl	8008164 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800996a:	f7ff f829 	bl	80089c0 <xTaskResumeAll>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d10a      	bne.n	800998a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009974:	4b09      	ldr	r3, [pc, #36]	@ (800999c <prvProcessTimerOrBlockTask+0x98>)
 8009976:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800997a:	601a      	str	r2, [r3, #0]
 800997c:	f3bf 8f4f 	dsb	sy
 8009980:	f3bf 8f6f 	isb	sy
}
 8009984:	e001      	b.n	800998a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009986:	f7ff f81b 	bl	80089c0 <xTaskResumeAll>
}
 800998a:	bf00      	nop
 800998c:	3710      	adds	r7, #16
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	20000d18 	.word	0x20000d18
 8009998:	20000d1c 	.word	0x20000d1c
 800999c:	e000ed04 	.word	0xe000ed04

080099a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80099a0:	b480      	push	{r7}
 80099a2:	b085      	sub	sp, #20
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80099a8:	4b0e      	ldr	r3, [pc, #56]	@ (80099e4 <prvGetNextExpireTime+0x44>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d101      	bne.n	80099b6 <prvGetNextExpireTime+0x16>
 80099b2:	2201      	movs	r2, #1
 80099b4:	e000      	b.n	80099b8 <prvGetNextExpireTime+0x18>
 80099b6:	2200      	movs	r2, #0
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d105      	bne.n	80099d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099c4:	4b07      	ldr	r3, [pc, #28]	@ (80099e4 <prvGetNextExpireTime+0x44>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	60fb      	str	r3, [r7, #12]
 80099ce:	e001      	b.n	80099d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80099d0:	2300      	movs	r3, #0
 80099d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80099d4:	68fb      	ldr	r3, [r7, #12]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3714      	adds	r7, #20
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop
 80099e4:	20000d14 	.word	0x20000d14

080099e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80099f0:	f7ff f884 	bl	8008afc <xTaskGetTickCount>
 80099f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80099f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009a24 <prvSampleTimeNow+0x3c>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d205      	bcs.n	8009a0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009a00:	f000 f91e 	bl	8009c40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2201      	movs	r2, #1
 8009a08:	601a      	str	r2, [r3, #0]
 8009a0a:	e002      	b.n	8009a12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009a12:	4a04      	ldr	r2, [pc, #16]	@ (8009a24 <prvSampleTimeNow+0x3c>)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009a18:	68fb      	ldr	r3, [r7, #12]
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	20000d24 	.word	0x20000d24

08009a28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b086      	sub	sp, #24
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	607a      	str	r2, [r7, #4]
 8009a34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009a36:	2300      	movs	r3, #0
 8009a38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	68ba      	ldr	r2, [r7, #8]
 8009a3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	68fa      	ldr	r2, [r7, #12]
 8009a44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009a46:	68ba      	ldr	r2, [r7, #8]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d812      	bhi.n	8009a74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	1ad2      	subs	r2, r2, r3
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	699b      	ldr	r3, [r3, #24]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d302      	bcc.n	8009a62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	617b      	str	r3, [r7, #20]
 8009a60:	e01b      	b.n	8009a9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009a62:	4b10      	ldr	r3, [pc, #64]	@ (8009aa4 <prvInsertTimerInActiveList+0x7c>)
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	3304      	adds	r3, #4
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	4610      	mov	r0, r2
 8009a6e:	f7fd fbde 	bl	800722e <vListInsert>
 8009a72:	e012      	b.n	8009a9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009a74:	687a      	ldr	r2, [r7, #4]
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d206      	bcs.n	8009a8a <prvInsertTimerInActiveList+0x62>
 8009a7c:	68ba      	ldr	r2, [r7, #8]
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d302      	bcc.n	8009a8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009a84:	2301      	movs	r3, #1
 8009a86:	617b      	str	r3, [r7, #20]
 8009a88:	e007      	b.n	8009a9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a8a:	4b07      	ldr	r3, [pc, #28]	@ (8009aa8 <prvInsertTimerInActiveList+0x80>)
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	3304      	adds	r3, #4
 8009a92:	4619      	mov	r1, r3
 8009a94:	4610      	mov	r0, r2
 8009a96:	f7fd fbca 	bl	800722e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009a9a:	697b      	ldr	r3, [r7, #20]
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3718      	adds	r7, #24
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	20000d18 	.word	0x20000d18
 8009aa8:	20000d14 	.word	0x20000d14

08009aac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b08c      	sub	sp, #48	@ 0x30
 8009ab0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009ab2:	e0b2      	b.n	8009c1a <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	f2c0 80af 	blt.w	8009c1a <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac2:	695b      	ldr	r3, [r3, #20]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d004      	beq.n	8009ad2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aca:	3304      	adds	r3, #4
 8009acc:	4618      	mov	r0, r3
 8009ace:	f7fd fbe7 	bl	80072a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009ad2:	1d3b      	adds	r3, r7, #4
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7ff ff87 	bl	80099e8 <prvSampleTimeNow>
 8009ada:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	2b09      	cmp	r3, #9
 8009ae0:	f200 8098 	bhi.w	8009c14 <prvProcessReceivedCommands+0x168>
 8009ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8009aec <prvProcessReceivedCommands+0x40>)
 8009ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aea:	bf00      	nop
 8009aec:	08009b15 	.word	0x08009b15
 8009af0:	08009b15 	.word	0x08009b15
 8009af4:	08009b15 	.word	0x08009b15
 8009af8:	08009b8b 	.word	0x08009b8b
 8009afc:	08009b9f 	.word	0x08009b9f
 8009b00:	08009beb 	.word	0x08009beb
 8009b04:	08009b15 	.word	0x08009b15
 8009b08:	08009b15 	.word	0x08009b15
 8009b0c:	08009b8b 	.word	0x08009b8b
 8009b10:	08009b9f 	.word	0x08009b9f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009b1a:	f043 0301 	orr.w	r3, r3, #1
 8009b1e:	b2da      	uxtb	r2, r3
 8009b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009b26:	68fa      	ldr	r2, [r7, #12]
 8009b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b2a:	699b      	ldr	r3, [r3, #24]
 8009b2c:	18d1      	adds	r1, r2, r3
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	6a3a      	ldr	r2, [r7, #32]
 8009b32:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009b34:	f7ff ff78 	bl	8009a28 <prvInsertTimerInActiveList>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d06c      	beq.n	8009c18 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b40:	6a1b      	ldr	r3, [r3, #32]
 8009b42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009b44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b48:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009b4c:	f003 0304 	and.w	r3, r3, #4
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d061      	beq.n	8009c18 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009b54:	68fa      	ldr	r2, [r7, #12]
 8009b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b58:	699b      	ldr	r3, [r3, #24]
 8009b5a:	441a      	add	r2, r3
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	9300      	str	r3, [sp, #0]
 8009b60:	2300      	movs	r3, #0
 8009b62:	2100      	movs	r1, #0
 8009b64:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009b66:	f7ff fe1d 	bl	80097a4 <xTimerGenericCommand>
 8009b6a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d152      	bne.n	8009c18 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8009b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b76:	f383 8811 	msr	BASEPRI, r3
 8009b7a:	f3bf 8f6f 	isb	sy
 8009b7e:	f3bf 8f4f 	dsb	sy
 8009b82:	61bb      	str	r3, [r7, #24]
}
 8009b84:	bf00      	nop
 8009b86:	bf00      	nop
 8009b88:	e7fd      	b.n	8009b86 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009b90:	f023 0301 	bic.w	r3, r3, #1
 8009b94:	b2da      	uxtb	r2, r3
 8009b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8009b9c:	e03d      	b.n	8009c1a <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009ba4:	f043 0301 	orr.w	r3, r3, #1
 8009ba8:	b2da      	uxtb	r2, r3
 8009baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009bb0:	68fa      	ldr	r2, [r7, #12]
 8009bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb8:	699b      	ldr	r3, [r3, #24]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d10b      	bne.n	8009bd6 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8009bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc2:	f383 8811 	msr	BASEPRI, r3
 8009bc6:	f3bf 8f6f 	isb	sy
 8009bca:	f3bf 8f4f 	dsb	sy
 8009bce:	617b      	str	r3, [r7, #20]
}
 8009bd0:	bf00      	nop
 8009bd2:	bf00      	nop
 8009bd4:	e7fd      	b.n	8009bd2 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bd8:	699a      	ldr	r2, [r3, #24]
 8009bda:	6a3b      	ldr	r3, [r7, #32]
 8009bdc:	18d1      	adds	r1, r2, r3
 8009bde:	6a3b      	ldr	r3, [r7, #32]
 8009be0:	6a3a      	ldr	r2, [r7, #32]
 8009be2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009be4:	f7ff ff20 	bl	8009a28 <prvInsertTimerInActiveList>
					break;
 8009be8:	e017      	b.n	8009c1a <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009bf0:	f003 0302 	and.w	r3, r3, #2
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d103      	bne.n	8009c00 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8009bf8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009bfa:	f000 fbe5 	bl	800a3c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009bfe:	e00c      	b.n	8009c1a <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c02:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009c06:	f023 0301 	bic.w	r3, r3, #1
 8009c0a:	b2da      	uxtb	r2, r3
 8009c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8009c12:	e002      	b.n	8009c1a <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8009c14:	bf00      	nop
 8009c16:	e000      	b.n	8009c1a <prvProcessReceivedCommands+0x16e>
					break;
 8009c18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c1a:	4b08      	ldr	r3, [pc, #32]	@ (8009c3c <prvProcessReceivedCommands+0x190>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f107 0108 	add.w	r1, r7, #8
 8009c22:	2200      	movs	r2, #0
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7fd fed7 	bl	80079d8 <xQueueReceive>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	f47f af41 	bne.w	8009ab4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009c32:	bf00      	nop
 8009c34:	bf00      	nop
 8009c36:	3728      	adds	r7, #40	@ 0x28
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	20000d1c 	.word	0x20000d1c

08009c40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b088      	sub	sp, #32
 8009c44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c46:	e049      	b.n	8009cdc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c48:	4b2e      	ldr	r3, [pc, #184]	@ (8009d04 <prvSwitchTimerLists+0xc4>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	68db      	ldr	r3, [r3, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c52:	4b2c      	ldr	r3, [pc, #176]	@ (8009d04 <prvSwitchTimerLists+0xc4>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	3304      	adds	r3, #4
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7fd fb1d 	bl	80072a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	6a1b      	ldr	r3, [r3, #32]
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009c74:	f003 0304 	and.w	r3, r3, #4
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d02f      	beq.n	8009cdc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	699b      	ldr	r3, [r3, #24]
 8009c80:	693a      	ldr	r2, [r7, #16]
 8009c82:	4413      	add	r3, r2
 8009c84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009c86:	68ba      	ldr	r2, [r7, #8]
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d90e      	bls.n	8009cac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	68ba      	ldr	r2, [r7, #8]
 8009c92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	68fa      	ldr	r2, [r7, #12]
 8009c98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8009d04 <prvSwitchTimerLists+0xc4>)
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	3304      	adds	r3, #4
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	4610      	mov	r0, r2
 8009ca6:	f7fd fac2 	bl	800722e <vListInsert>
 8009caa:	e017      	b.n	8009cdc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009cac:	2300      	movs	r3, #0
 8009cae:	9300      	str	r3, [sp, #0]
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	693a      	ldr	r2, [r7, #16]
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	68f8      	ldr	r0, [r7, #12]
 8009cb8:	f7ff fd74 	bl	80097a4 <xTimerGenericCommand>
 8009cbc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d10b      	bne.n	8009cdc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc8:	f383 8811 	msr	BASEPRI, r3
 8009ccc:	f3bf 8f6f 	isb	sy
 8009cd0:	f3bf 8f4f 	dsb	sy
 8009cd4:	603b      	str	r3, [r7, #0]
}
 8009cd6:	bf00      	nop
 8009cd8:	bf00      	nop
 8009cda:	e7fd      	b.n	8009cd8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009cdc:	4b09      	ldr	r3, [pc, #36]	@ (8009d04 <prvSwitchTimerLists+0xc4>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1b0      	bne.n	8009c48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009ce6:	4b07      	ldr	r3, [pc, #28]	@ (8009d04 <prvSwitchTimerLists+0xc4>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009cec:	4b06      	ldr	r3, [pc, #24]	@ (8009d08 <prvSwitchTimerLists+0xc8>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a04      	ldr	r2, [pc, #16]	@ (8009d04 <prvSwitchTimerLists+0xc4>)
 8009cf2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009cf4:	4a04      	ldr	r2, [pc, #16]	@ (8009d08 <prvSwitchTimerLists+0xc8>)
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	6013      	str	r3, [r2, #0]
}
 8009cfa:	bf00      	nop
 8009cfc:	3718      	adds	r7, #24
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	20000d14 	.word	0x20000d14
 8009d08:	20000d18 	.word	0x20000d18

08009d0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009d12:	f000 f969 	bl	8009fe8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009d16:	4b15      	ldr	r3, [pc, #84]	@ (8009d6c <prvCheckForValidListAndQueue+0x60>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d120      	bne.n	8009d60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009d1e:	4814      	ldr	r0, [pc, #80]	@ (8009d70 <prvCheckForValidListAndQueue+0x64>)
 8009d20:	f7fd fa34 	bl	800718c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009d24:	4813      	ldr	r0, [pc, #76]	@ (8009d74 <prvCheckForValidListAndQueue+0x68>)
 8009d26:	f7fd fa31 	bl	800718c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009d2a:	4b13      	ldr	r3, [pc, #76]	@ (8009d78 <prvCheckForValidListAndQueue+0x6c>)
 8009d2c:	4a10      	ldr	r2, [pc, #64]	@ (8009d70 <prvCheckForValidListAndQueue+0x64>)
 8009d2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009d30:	4b12      	ldr	r3, [pc, #72]	@ (8009d7c <prvCheckForValidListAndQueue+0x70>)
 8009d32:	4a10      	ldr	r2, [pc, #64]	@ (8009d74 <prvCheckForValidListAndQueue+0x68>)
 8009d34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009d36:	2300      	movs	r3, #0
 8009d38:	9300      	str	r3, [sp, #0]
 8009d3a:	4b11      	ldr	r3, [pc, #68]	@ (8009d80 <prvCheckForValidListAndQueue+0x74>)
 8009d3c:	4a11      	ldr	r2, [pc, #68]	@ (8009d84 <prvCheckForValidListAndQueue+0x78>)
 8009d3e:	210c      	movs	r1, #12
 8009d40:	200a      	movs	r0, #10
 8009d42:	f7fd fb41 	bl	80073c8 <xQueueGenericCreateStatic>
 8009d46:	4603      	mov	r3, r0
 8009d48:	4a08      	ldr	r2, [pc, #32]	@ (8009d6c <prvCheckForValidListAndQueue+0x60>)
 8009d4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009d4c:	4b07      	ldr	r3, [pc, #28]	@ (8009d6c <prvCheckForValidListAndQueue+0x60>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d005      	beq.n	8009d60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009d54:	4b05      	ldr	r3, [pc, #20]	@ (8009d6c <prvCheckForValidListAndQueue+0x60>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	490b      	ldr	r1, [pc, #44]	@ (8009d88 <prvCheckForValidListAndQueue+0x7c>)
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7fe f9d8 	bl	8008110 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d60:	f000 f974 	bl	800a04c <vPortExitCritical>
}
 8009d64:	bf00      	nop
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	20000d1c 	.word	0x20000d1c
 8009d70:	20000cec 	.word	0x20000cec
 8009d74:	20000d00 	.word	0x20000d00
 8009d78:	20000d14 	.word	0x20000d14
 8009d7c:	20000d18 	.word	0x20000d18
 8009d80:	20000da0 	.word	0x20000da0
 8009d84:	20000d28 	.word	0x20000d28
 8009d88:	0800efe4 	.word	0x0800efe4

08009d8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b085      	sub	sp, #20
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	3b04      	subs	r3, #4
 8009d9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009da4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	3b04      	subs	r3, #4
 8009daa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	f023 0201 	bic.w	r2, r3, #1
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	3b04      	subs	r3, #4
 8009dba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009dbc:	4a0c      	ldr	r2, [pc, #48]	@ (8009df0 <pxPortInitialiseStack+0x64>)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	3b14      	subs	r3, #20
 8009dc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	3b04      	subs	r3, #4
 8009dd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f06f 0202 	mvn.w	r2, #2
 8009dda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	3b20      	subs	r3, #32
 8009de0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009de2:	68fb      	ldr	r3, [r7, #12]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3714      	adds	r7, #20
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr
 8009df0:	08009df5 	.word	0x08009df5

08009df4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009df4:	b480      	push	{r7}
 8009df6:	b085      	sub	sp, #20
 8009df8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009dfe:	4b13      	ldr	r3, [pc, #76]	@ (8009e4c <prvTaskExitError+0x58>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e06:	d00b      	beq.n	8009e20 <prvTaskExitError+0x2c>
	__asm volatile
 8009e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e0c:	f383 8811 	msr	BASEPRI, r3
 8009e10:	f3bf 8f6f 	isb	sy
 8009e14:	f3bf 8f4f 	dsb	sy
 8009e18:	60fb      	str	r3, [r7, #12]
}
 8009e1a:	bf00      	nop
 8009e1c:	bf00      	nop
 8009e1e:	e7fd      	b.n	8009e1c <prvTaskExitError+0x28>
	__asm volatile
 8009e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e24:	f383 8811 	msr	BASEPRI, r3
 8009e28:	f3bf 8f6f 	isb	sy
 8009e2c:	f3bf 8f4f 	dsb	sy
 8009e30:	60bb      	str	r3, [r7, #8]
}
 8009e32:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009e34:	bf00      	nop
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d0fc      	beq.n	8009e36 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009e3c:	bf00      	nop
 8009e3e:	bf00      	nop
 8009e40:	3714      	adds	r7, #20
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr
 8009e4a:	bf00      	nop
 8009e4c:	20000020 	.word	0x20000020

08009e50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009e50:	4b07      	ldr	r3, [pc, #28]	@ (8009e70 <pxCurrentTCBConst2>)
 8009e52:	6819      	ldr	r1, [r3, #0]
 8009e54:	6808      	ldr	r0, [r1, #0]
 8009e56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e5a:	f380 8809 	msr	PSP, r0
 8009e5e:	f3bf 8f6f 	isb	sy
 8009e62:	f04f 0000 	mov.w	r0, #0
 8009e66:	f380 8811 	msr	BASEPRI, r0
 8009e6a:	4770      	bx	lr
 8009e6c:	f3af 8000 	nop.w

08009e70 <pxCurrentTCBConst2>:
 8009e70:	20000bc0 	.word	0x20000bc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009e74:	bf00      	nop
 8009e76:	bf00      	nop

08009e78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009e78:	4808      	ldr	r0, [pc, #32]	@ (8009e9c <prvPortStartFirstTask+0x24>)
 8009e7a:	6800      	ldr	r0, [r0, #0]
 8009e7c:	6800      	ldr	r0, [r0, #0]
 8009e7e:	f380 8808 	msr	MSP, r0
 8009e82:	f04f 0000 	mov.w	r0, #0
 8009e86:	f380 8814 	msr	CONTROL, r0
 8009e8a:	b662      	cpsie	i
 8009e8c:	b661      	cpsie	f
 8009e8e:	f3bf 8f4f 	dsb	sy
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	df00      	svc	0
 8009e98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009e9a:	bf00      	nop
 8009e9c:	e000ed08 	.word	0xe000ed08

08009ea0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b086      	sub	sp, #24
 8009ea4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009ea6:	4b47      	ldr	r3, [pc, #284]	@ (8009fc4 <xPortStartScheduler+0x124>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a47      	ldr	r2, [pc, #284]	@ (8009fc8 <xPortStartScheduler+0x128>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d10b      	bne.n	8009ec8 <xPortStartScheduler+0x28>
	__asm volatile
 8009eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eb4:	f383 8811 	msr	BASEPRI, r3
 8009eb8:	f3bf 8f6f 	isb	sy
 8009ebc:	f3bf 8f4f 	dsb	sy
 8009ec0:	613b      	str	r3, [r7, #16]
}
 8009ec2:	bf00      	nop
 8009ec4:	bf00      	nop
 8009ec6:	e7fd      	b.n	8009ec4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009ec8:	4b3e      	ldr	r3, [pc, #248]	@ (8009fc4 <xPortStartScheduler+0x124>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a3f      	ldr	r2, [pc, #252]	@ (8009fcc <xPortStartScheduler+0x12c>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d10b      	bne.n	8009eea <xPortStartScheduler+0x4a>
	__asm volatile
 8009ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed6:	f383 8811 	msr	BASEPRI, r3
 8009eda:	f3bf 8f6f 	isb	sy
 8009ede:	f3bf 8f4f 	dsb	sy
 8009ee2:	60fb      	str	r3, [r7, #12]
}
 8009ee4:	bf00      	nop
 8009ee6:	bf00      	nop
 8009ee8:	e7fd      	b.n	8009ee6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009eea:	4b39      	ldr	r3, [pc, #228]	@ (8009fd0 <xPortStartScheduler+0x130>)
 8009eec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	22ff      	movs	r2, #255	@ 0xff
 8009efa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f04:	78fb      	ldrb	r3, [r7, #3]
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009f0c:	b2da      	uxtb	r2, r3
 8009f0e:	4b31      	ldr	r3, [pc, #196]	@ (8009fd4 <xPortStartScheduler+0x134>)
 8009f10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009f12:	4b31      	ldr	r3, [pc, #196]	@ (8009fd8 <xPortStartScheduler+0x138>)
 8009f14:	2207      	movs	r2, #7
 8009f16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f18:	e009      	b.n	8009f2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8009fd8 <xPortStartScheduler+0x138>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	4a2d      	ldr	r2, [pc, #180]	@ (8009fd8 <xPortStartScheduler+0x138>)
 8009f22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009f24:	78fb      	ldrb	r3, [r7, #3]
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	005b      	lsls	r3, r3, #1
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f2e:	78fb      	ldrb	r3, [r7, #3]
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f36:	2b80      	cmp	r3, #128	@ 0x80
 8009f38:	d0ef      	beq.n	8009f1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009f3a:	4b27      	ldr	r3, [pc, #156]	@ (8009fd8 <xPortStartScheduler+0x138>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f1c3 0307 	rsb	r3, r3, #7
 8009f42:	2b04      	cmp	r3, #4
 8009f44:	d00b      	beq.n	8009f5e <xPortStartScheduler+0xbe>
	__asm volatile
 8009f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f4a:	f383 8811 	msr	BASEPRI, r3
 8009f4e:	f3bf 8f6f 	isb	sy
 8009f52:	f3bf 8f4f 	dsb	sy
 8009f56:	60bb      	str	r3, [r7, #8]
}
 8009f58:	bf00      	nop
 8009f5a:	bf00      	nop
 8009f5c:	e7fd      	b.n	8009f5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8009fd8 <xPortStartScheduler+0x138>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	021b      	lsls	r3, r3, #8
 8009f64:	4a1c      	ldr	r2, [pc, #112]	@ (8009fd8 <xPortStartScheduler+0x138>)
 8009f66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009f68:	4b1b      	ldr	r3, [pc, #108]	@ (8009fd8 <xPortStartScheduler+0x138>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009f70:	4a19      	ldr	r2, [pc, #100]	@ (8009fd8 <xPortStartScheduler+0x138>)
 8009f72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	b2da      	uxtb	r2, r3
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009f7c:	4b17      	ldr	r3, [pc, #92]	@ (8009fdc <xPortStartScheduler+0x13c>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a16      	ldr	r2, [pc, #88]	@ (8009fdc <xPortStartScheduler+0x13c>)
 8009f82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009f86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009f88:	4b14      	ldr	r3, [pc, #80]	@ (8009fdc <xPortStartScheduler+0x13c>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a13      	ldr	r2, [pc, #76]	@ (8009fdc <xPortStartScheduler+0x13c>)
 8009f8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009f92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009f94:	f000 f8da 	bl	800a14c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009f98:	4b11      	ldr	r3, [pc, #68]	@ (8009fe0 <xPortStartScheduler+0x140>)
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009f9e:	f000 f8f9 	bl	800a194 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009fa2:	4b10      	ldr	r3, [pc, #64]	@ (8009fe4 <xPortStartScheduler+0x144>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a0f      	ldr	r2, [pc, #60]	@ (8009fe4 <xPortStartScheduler+0x144>)
 8009fa8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009fac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009fae:	f7ff ff63 	bl	8009e78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009fb2:	f7fe fe6d 	bl	8008c90 <vTaskSwitchContext>
	prvTaskExitError();
 8009fb6:	f7ff ff1d 	bl	8009df4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3718      	adds	r7, #24
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	e000ed00 	.word	0xe000ed00
 8009fc8:	410fc271 	.word	0x410fc271
 8009fcc:	410fc270 	.word	0x410fc270
 8009fd0:	e000e400 	.word	0xe000e400
 8009fd4:	20000de8 	.word	0x20000de8
 8009fd8:	20000dec 	.word	0x20000dec
 8009fdc:	e000ed20 	.word	0xe000ed20
 8009fe0:	20000020 	.word	0x20000020
 8009fe4:	e000ef34 	.word	0xe000ef34

08009fe8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
	__asm volatile
 8009fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ff2:	f383 8811 	msr	BASEPRI, r3
 8009ff6:	f3bf 8f6f 	isb	sy
 8009ffa:	f3bf 8f4f 	dsb	sy
 8009ffe:	607b      	str	r3, [r7, #4]
}
 800a000:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a002:	4b10      	ldr	r3, [pc, #64]	@ (800a044 <vPortEnterCritical+0x5c>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	3301      	adds	r3, #1
 800a008:	4a0e      	ldr	r2, [pc, #56]	@ (800a044 <vPortEnterCritical+0x5c>)
 800a00a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a00c:	4b0d      	ldr	r3, [pc, #52]	@ (800a044 <vPortEnterCritical+0x5c>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	2b01      	cmp	r3, #1
 800a012:	d110      	bne.n	800a036 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a014:	4b0c      	ldr	r3, [pc, #48]	@ (800a048 <vPortEnterCritical+0x60>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d00b      	beq.n	800a036 <vPortEnterCritical+0x4e>
	__asm volatile
 800a01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a022:	f383 8811 	msr	BASEPRI, r3
 800a026:	f3bf 8f6f 	isb	sy
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	603b      	str	r3, [r7, #0]
}
 800a030:	bf00      	nop
 800a032:	bf00      	nop
 800a034:	e7fd      	b.n	800a032 <vPortEnterCritical+0x4a>
	}
}
 800a036:	bf00      	nop
 800a038:	370c      	adds	r7, #12
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr
 800a042:	bf00      	nop
 800a044:	20000020 	.word	0x20000020
 800a048:	e000ed04 	.word	0xe000ed04

0800a04c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a04c:	b480      	push	{r7}
 800a04e:	b083      	sub	sp, #12
 800a050:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a052:	4b12      	ldr	r3, [pc, #72]	@ (800a09c <vPortExitCritical+0x50>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d10b      	bne.n	800a072 <vPortExitCritical+0x26>
	__asm volatile
 800a05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a05e:	f383 8811 	msr	BASEPRI, r3
 800a062:	f3bf 8f6f 	isb	sy
 800a066:	f3bf 8f4f 	dsb	sy
 800a06a:	607b      	str	r3, [r7, #4]
}
 800a06c:	bf00      	nop
 800a06e:	bf00      	nop
 800a070:	e7fd      	b.n	800a06e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a072:	4b0a      	ldr	r3, [pc, #40]	@ (800a09c <vPortExitCritical+0x50>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	3b01      	subs	r3, #1
 800a078:	4a08      	ldr	r2, [pc, #32]	@ (800a09c <vPortExitCritical+0x50>)
 800a07a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a07c:	4b07      	ldr	r3, [pc, #28]	@ (800a09c <vPortExitCritical+0x50>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d105      	bne.n	800a090 <vPortExitCritical+0x44>
 800a084:	2300      	movs	r3, #0
 800a086:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	f383 8811 	msr	BASEPRI, r3
}
 800a08e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a090:	bf00      	nop
 800a092:	370c      	adds	r7, #12
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr
 800a09c:	20000020 	.word	0x20000020

0800a0a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a0a0:	f3ef 8009 	mrs	r0, PSP
 800a0a4:	f3bf 8f6f 	isb	sy
 800a0a8:	4b15      	ldr	r3, [pc, #84]	@ (800a100 <pxCurrentTCBConst>)
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	f01e 0f10 	tst.w	lr, #16
 800a0b0:	bf08      	it	eq
 800a0b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a0b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ba:	6010      	str	r0, [r2, #0]
 800a0bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a0c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a0c4:	f380 8811 	msr	BASEPRI, r0
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	f3bf 8f6f 	isb	sy
 800a0d0:	f7fe fdde 	bl	8008c90 <vTaskSwitchContext>
 800a0d4:	f04f 0000 	mov.w	r0, #0
 800a0d8:	f380 8811 	msr	BASEPRI, r0
 800a0dc:	bc09      	pop	{r0, r3}
 800a0de:	6819      	ldr	r1, [r3, #0]
 800a0e0:	6808      	ldr	r0, [r1, #0]
 800a0e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e6:	f01e 0f10 	tst.w	lr, #16
 800a0ea:	bf08      	it	eq
 800a0ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a0f0:	f380 8809 	msr	PSP, r0
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop
 800a0fc:	f3af 8000 	nop.w

0800a100 <pxCurrentTCBConst>:
 800a100:	20000bc0 	.word	0x20000bc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a104:	bf00      	nop
 800a106:	bf00      	nop

0800a108 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
	__asm volatile
 800a10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a112:	f383 8811 	msr	BASEPRI, r3
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	f3bf 8f4f 	dsb	sy
 800a11e:	607b      	str	r3, [r7, #4]
}
 800a120:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a122:	f7fe fcfb 	bl	8008b1c <xTaskIncrementTick>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d003      	beq.n	800a134 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a12c:	4b06      	ldr	r3, [pc, #24]	@ (800a148 <SysTick_Handler+0x40>)
 800a12e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a132:	601a      	str	r2, [r3, #0]
 800a134:	2300      	movs	r3, #0
 800a136:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	f383 8811 	msr	BASEPRI, r3
}
 800a13e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a140:	bf00      	nop
 800a142:	3708      	adds	r7, #8
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}
 800a148:	e000ed04 	.word	0xe000ed04

0800a14c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a14c:	b480      	push	{r7}
 800a14e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a150:	4b0b      	ldr	r3, [pc, #44]	@ (800a180 <vPortSetupTimerInterrupt+0x34>)
 800a152:	2200      	movs	r2, #0
 800a154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a156:	4b0b      	ldr	r3, [pc, #44]	@ (800a184 <vPortSetupTimerInterrupt+0x38>)
 800a158:	2200      	movs	r2, #0
 800a15a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a15c:	4b0a      	ldr	r3, [pc, #40]	@ (800a188 <vPortSetupTimerInterrupt+0x3c>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a0a      	ldr	r2, [pc, #40]	@ (800a18c <vPortSetupTimerInterrupt+0x40>)
 800a162:	fba2 2303 	umull	r2, r3, r2, r3
 800a166:	099b      	lsrs	r3, r3, #6
 800a168:	4a09      	ldr	r2, [pc, #36]	@ (800a190 <vPortSetupTimerInterrupt+0x44>)
 800a16a:	3b01      	subs	r3, #1
 800a16c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a16e:	4b04      	ldr	r3, [pc, #16]	@ (800a180 <vPortSetupTimerInterrupt+0x34>)
 800a170:	2207      	movs	r2, #7
 800a172:	601a      	str	r2, [r3, #0]
}
 800a174:	bf00      	nop
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr
 800a17e:	bf00      	nop
 800a180:	e000e010 	.word	0xe000e010
 800a184:	e000e018 	.word	0xe000e018
 800a188:	20000014 	.word	0x20000014
 800a18c:	10624dd3 	.word	0x10624dd3
 800a190:	e000e014 	.word	0xe000e014

0800a194 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a194:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a1a4 <vPortEnableVFP+0x10>
 800a198:	6801      	ldr	r1, [r0, #0]
 800a19a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a19e:	6001      	str	r1, [r0, #0]
 800a1a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a1a2:	bf00      	nop
 800a1a4:	e000ed88 	.word	0xe000ed88

0800a1a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b085      	sub	sp, #20
 800a1ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a1ae:	f3ef 8305 	mrs	r3, IPSR
 800a1b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2b0f      	cmp	r3, #15
 800a1b8:	d915      	bls.n	800a1e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a1ba:	4a18      	ldr	r2, [pc, #96]	@ (800a21c <vPortValidateInterruptPriority+0x74>)
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	4413      	add	r3, r2
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a1c4:	4b16      	ldr	r3, [pc, #88]	@ (800a220 <vPortValidateInterruptPriority+0x78>)
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	7afa      	ldrb	r2, [r7, #11]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d20b      	bcs.n	800a1e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a1ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1d2:	f383 8811 	msr	BASEPRI, r3
 800a1d6:	f3bf 8f6f 	isb	sy
 800a1da:	f3bf 8f4f 	dsb	sy
 800a1de:	607b      	str	r3, [r7, #4]
}
 800a1e0:	bf00      	nop
 800a1e2:	bf00      	nop
 800a1e4:	e7fd      	b.n	800a1e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a1e6:	4b0f      	ldr	r3, [pc, #60]	@ (800a224 <vPortValidateInterruptPriority+0x7c>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a1ee:	4b0e      	ldr	r3, [pc, #56]	@ (800a228 <vPortValidateInterruptPriority+0x80>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d90b      	bls.n	800a20e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1fa:	f383 8811 	msr	BASEPRI, r3
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	f3bf 8f4f 	dsb	sy
 800a206:	603b      	str	r3, [r7, #0]
}
 800a208:	bf00      	nop
 800a20a:	bf00      	nop
 800a20c:	e7fd      	b.n	800a20a <vPortValidateInterruptPriority+0x62>
	}
 800a20e:	bf00      	nop
 800a210:	3714      	adds	r7, #20
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr
 800a21a:	bf00      	nop
 800a21c:	e000e3f0 	.word	0xe000e3f0
 800a220:	20000de8 	.word	0x20000de8
 800a224:	e000ed0c 	.word	0xe000ed0c
 800a228:	20000dec 	.word	0x20000dec

0800a22c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b08a      	sub	sp, #40	@ 0x28
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a234:	2300      	movs	r3, #0
 800a236:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a238:	f7fe fbb4 	bl	80089a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a23c:	4b5c      	ldr	r3, [pc, #368]	@ (800a3b0 <pvPortMalloc+0x184>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d101      	bne.n	800a248 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a244:	f000 f924 	bl	800a490 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a248:	4b5a      	ldr	r3, [pc, #360]	@ (800a3b4 <pvPortMalloc+0x188>)
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	4013      	ands	r3, r2
 800a250:	2b00      	cmp	r3, #0
 800a252:	f040 8095 	bne.w	800a380 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d01e      	beq.n	800a29a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a25c:	2208      	movs	r2, #8
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	4413      	add	r3, r2
 800a262:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f003 0307 	and.w	r3, r3, #7
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d015      	beq.n	800a29a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f023 0307 	bic.w	r3, r3, #7
 800a274:	3308      	adds	r3, #8
 800a276:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f003 0307 	and.w	r3, r3, #7
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d00b      	beq.n	800a29a <pvPortMalloc+0x6e>
	__asm volatile
 800a282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a286:	f383 8811 	msr	BASEPRI, r3
 800a28a:	f3bf 8f6f 	isb	sy
 800a28e:	f3bf 8f4f 	dsb	sy
 800a292:	617b      	str	r3, [r7, #20]
}
 800a294:	bf00      	nop
 800a296:	bf00      	nop
 800a298:	e7fd      	b.n	800a296 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d06f      	beq.n	800a380 <pvPortMalloc+0x154>
 800a2a0:	4b45      	ldr	r3, [pc, #276]	@ (800a3b8 <pvPortMalloc+0x18c>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d86a      	bhi.n	800a380 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a2aa:	4b44      	ldr	r3, [pc, #272]	@ (800a3bc <pvPortMalloc+0x190>)
 800a2ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a2ae:	4b43      	ldr	r3, [pc, #268]	@ (800a3bc <pvPortMalloc+0x190>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2b4:	e004      	b.n	800a2c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d903      	bls.n	800a2d2 <pvPortMalloc+0xa6>
 800a2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d1f1      	bne.n	800a2b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a2d2:	4b37      	ldr	r3, [pc, #220]	@ (800a3b0 <pvPortMalloc+0x184>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d051      	beq.n	800a380 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a2dc:	6a3b      	ldr	r3, [r7, #32]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	2208      	movs	r2, #8
 800a2e2:	4413      	add	r3, r2
 800a2e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	6a3b      	ldr	r3, [r7, #32]
 800a2ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f0:	685a      	ldr	r2, [r3, #4]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	1ad2      	subs	r2, r2, r3
 800a2f6:	2308      	movs	r3, #8
 800a2f8:	005b      	lsls	r3, r3, #1
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d920      	bls.n	800a340 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a2fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	4413      	add	r3, r2
 800a304:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	f003 0307 	and.w	r3, r3, #7
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d00b      	beq.n	800a328 <pvPortMalloc+0xfc>
	__asm volatile
 800a310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a314:	f383 8811 	msr	BASEPRI, r3
 800a318:	f3bf 8f6f 	isb	sy
 800a31c:	f3bf 8f4f 	dsb	sy
 800a320:	613b      	str	r3, [r7, #16]
}
 800a322:	bf00      	nop
 800a324:	bf00      	nop
 800a326:	e7fd      	b.n	800a324 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a32a:	685a      	ldr	r2, [r3, #4]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	1ad2      	subs	r2, r2, r3
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a33a:	69b8      	ldr	r0, [r7, #24]
 800a33c:	f000 f90a 	bl	800a554 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a340:	4b1d      	ldr	r3, [pc, #116]	@ (800a3b8 <pvPortMalloc+0x18c>)
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	1ad3      	subs	r3, r2, r3
 800a34a:	4a1b      	ldr	r2, [pc, #108]	@ (800a3b8 <pvPortMalloc+0x18c>)
 800a34c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a34e:	4b1a      	ldr	r3, [pc, #104]	@ (800a3b8 <pvPortMalloc+0x18c>)
 800a350:	681a      	ldr	r2, [r3, #0]
 800a352:	4b1b      	ldr	r3, [pc, #108]	@ (800a3c0 <pvPortMalloc+0x194>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	429a      	cmp	r2, r3
 800a358:	d203      	bcs.n	800a362 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a35a:	4b17      	ldr	r3, [pc, #92]	@ (800a3b8 <pvPortMalloc+0x18c>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a18      	ldr	r2, [pc, #96]	@ (800a3c0 <pvPortMalloc+0x194>)
 800a360:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a364:	685a      	ldr	r2, [r3, #4]
 800a366:	4b13      	ldr	r3, [pc, #76]	@ (800a3b4 <pvPortMalloc+0x188>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	431a      	orrs	r2, r3
 800a36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a36e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a372:	2200      	movs	r2, #0
 800a374:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a376:	4b13      	ldr	r3, [pc, #76]	@ (800a3c4 <pvPortMalloc+0x198>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	3301      	adds	r3, #1
 800a37c:	4a11      	ldr	r2, [pc, #68]	@ (800a3c4 <pvPortMalloc+0x198>)
 800a37e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a380:	f7fe fb1e 	bl	80089c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a384:	69fb      	ldr	r3, [r7, #28]
 800a386:	f003 0307 	and.w	r3, r3, #7
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d00b      	beq.n	800a3a6 <pvPortMalloc+0x17a>
	__asm volatile
 800a38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a392:	f383 8811 	msr	BASEPRI, r3
 800a396:	f3bf 8f6f 	isb	sy
 800a39a:	f3bf 8f4f 	dsb	sy
 800a39e:	60fb      	str	r3, [r7, #12]
}
 800a3a0:	bf00      	nop
 800a3a2:	bf00      	nop
 800a3a4:	e7fd      	b.n	800a3a2 <pvPortMalloc+0x176>
	return pvReturn;
 800a3a6:	69fb      	ldr	r3, [r7, #28]
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3728      	adds	r7, #40	@ 0x28
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}
 800a3b0:	200049f8 	.word	0x200049f8
 800a3b4:	20004a0c 	.word	0x20004a0c
 800a3b8:	200049fc 	.word	0x200049fc
 800a3bc:	200049f0 	.word	0x200049f0
 800a3c0:	20004a00 	.word	0x20004a00
 800a3c4:	20004a04 	.word	0x20004a04

0800a3c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b086      	sub	sp, #24
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d04f      	beq.n	800a47a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a3da:	2308      	movs	r3, #8
 800a3dc:	425b      	negs	r3, r3
 800a3de:	697a      	ldr	r2, [r7, #20]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	685a      	ldr	r2, [r3, #4]
 800a3ec:	4b25      	ldr	r3, [pc, #148]	@ (800a484 <vPortFree+0xbc>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4013      	ands	r3, r2
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d10b      	bne.n	800a40e <vPortFree+0x46>
	__asm volatile
 800a3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3fa:	f383 8811 	msr	BASEPRI, r3
 800a3fe:	f3bf 8f6f 	isb	sy
 800a402:	f3bf 8f4f 	dsb	sy
 800a406:	60fb      	str	r3, [r7, #12]
}
 800a408:	bf00      	nop
 800a40a:	bf00      	nop
 800a40c:	e7fd      	b.n	800a40a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00b      	beq.n	800a42e <vPortFree+0x66>
	__asm volatile
 800a416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a41a:	f383 8811 	msr	BASEPRI, r3
 800a41e:	f3bf 8f6f 	isb	sy
 800a422:	f3bf 8f4f 	dsb	sy
 800a426:	60bb      	str	r3, [r7, #8]
}
 800a428:	bf00      	nop
 800a42a:	bf00      	nop
 800a42c:	e7fd      	b.n	800a42a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	685a      	ldr	r2, [r3, #4]
 800a432:	4b14      	ldr	r3, [pc, #80]	@ (800a484 <vPortFree+0xbc>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4013      	ands	r3, r2
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d01e      	beq.n	800a47a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d11a      	bne.n	800a47a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	685a      	ldr	r2, [r3, #4]
 800a448:	4b0e      	ldr	r3, [pc, #56]	@ (800a484 <vPortFree+0xbc>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	43db      	mvns	r3, r3
 800a44e:	401a      	ands	r2, r3
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a454:	f7fe faa6 	bl	80089a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	685a      	ldr	r2, [r3, #4]
 800a45c:	4b0a      	ldr	r3, [pc, #40]	@ (800a488 <vPortFree+0xc0>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4413      	add	r3, r2
 800a462:	4a09      	ldr	r2, [pc, #36]	@ (800a488 <vPortFree+0xc0>)
 800a464:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a466:	6938      	ldr	r0, [r7, #16]
 800a468:	f000 f874 	bl	800a554 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a46c:	4b07      	ldr	r3, [pc, #28]	@ (800a48c <vPortFree+0xc4>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	3301      	adds	r3, #1
 800a472:	4a06      	ldr	r2, [pc, #24]	@ (800a48c <vPortFree+0xc4>)
 800a474:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a476:	f7fe faa3 	bl	80089c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a47a:	bf00      	nop
 800a47c:	3718      	adds	r7, #24
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	20004a0c 	.word	0x20004a0c
 800a488:	200049fc 	.word	0x200049fc
 800a48c:	20004a08 	.word	0x20004a08

0800a490 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a490:	b480      	push	{r7}
 800a492:	b085      	sub	sp, #20
 800a494:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a496:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a49a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a49c:	4b27      	ldr	r3, [pc, #156]	@ (800a53c <prvHeapInit+0xac>)
 800a49e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f003 0307 	and.w	r3, r3, #7
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d00c      	beq.n	800a4c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	3307      	adds	r3, #7
 800a4ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f023 0307 	bic.w	r3, r3, #7
 800a4b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a4b8:	68ba      	ldr	r2, [r7, #8]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	1ad3      	subs	r3, r2, r3
 800a4be:	4a1f      	ldr	r2, [pc, #124]	@ (800a53c <prvHeapInit+0xac>)
 800a4c0:	4413      	add	r3, r2
 800a4c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a4c8:	4a1d      	ldr	r2, [pc, #116]	@ (800a540 <prvHeapInit+0xb0>)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a4ce:	4b1c      	ldr	r3, [pc, #112]	@ (800a540 <prvHeapInit+0xb0>)
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	68ba      	ldr	r2, [r7, #8]
 800a4d8:	4413      	add	r3, r2
 800a4da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a4dc:	2208      	movs	r2, #8
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	1a9b      	subs	r3, r3, r2
 800a4e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f023 0307 	bic.w	r3, r3, #7
 800a4ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	4a15      	ldr	r2, [pc, #84]	@ (800a544 <prvHeapInit+0xb4>)
 800a4f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a4f2:	4b14      	ldr	r3, [pc, #80]	@ (800a544 <prvHeapInit+0xb4>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a4fa:	4b12      	ldr	r3, [pc, #72]	@ (800a544 <prvHeapInit+0xb4>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	2200      	movs	r2, #0
 800a500:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	68fa      	ldr	r2, [r7, #12]
 800a50a:	1ad2      	subs	r2, r2, r3
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a510:	4b0c      	ldr	r3, [pc, #48]	@ (800a544 <prvHeapInit+0xb4>)
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	4a0a      	ldr	r2, [pc, #40]	@ (800a548 <prvHeapInit+0xb8>)
 800a51e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	4a09      	ldr	r2, [pc, #36]	@ (800a54c <prvHeapInit+0xbc>)
 800a526:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a528:	4b09      	ldr	r3, [pc, #36]	@ (800a550 <prvHeapInit+0xc0>)
 800a52a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a52e:	601a      	str	r2, [r3, #0]
}
 800a530:	bf00      	nop
 800a532:	3714      	adds	r7, #20
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr
 800a53c:	20000df0 	.word	0x20000df0
 800a540:	200049f0 	.word	0x200049f0
 800a544:	200049f8 	.word	0x200049f8
 800a548:	20004a00 	.word	0x20004a00
 800a54c:	200049fc 	.word	0x200049fc
 800a550:	20004a0c 	.word	0x20004a0c

0800a554 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a554:	b480      	push	{r7}
 800a556:	b085      	sub	sp, #20
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a55c:	4b28      	ldr	r3, [pc, #160]	@ (800a600 <prvInsertBlockIntoFreeList+0xac>)
 800a55e:	60fb      	str	r3, [r7, #12]
 800a560:	e002      	b.n	800a568 <prvInsertBlockIntoFreeList+0x14>
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	60fb      	str	r3, [r7, #12]
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	687a      	ldr	r2, [r7, #4]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d8f7      	bhi.n	800a562 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	68ba      	ldr	r2, [r7, #8]
 800a57c:	4413      	add	r3, r2
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	429a      	cmp	r2, r3
 800a582:	d108      	bne.n	800a596 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	685a      	ldr	r2, [r3, #4]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	441a      	add	r2, r3
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	68ba      	ldr	r2, [r7, #8]
 800a5a0:	441a      	add	r2, r3
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d118      	bne.n	800a5dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	4b15      	ldr	r3, [pc, #84]	@ (800a604 <prvInsertBlockIntoFreeList+0xb0>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d00d      	beq.n	800a5d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	685a      	ldr	r2, [r3, #4]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	441a      	add	r2, r3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	681a      	ldr	r2, [r3, #0]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	601a      	str	r2, [r3, #0]
 800a5d0:	e008      	b.n	800a5e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a5d2:	4b0c      	ldr	r3, [pc, #48]	@ (800a604 <prvInsertBlockIntoFreeList+0xb0>)
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	601a      	str	r2, [r3, #0]
 800a5da:	e003      	b.n	800a5e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a5e4:	68fa      	ldr	r2, [r7, #12]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d002      	beq.n	800a5f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5f2:	bf00      	nop
 800a5f4:	3714      	adds	r7, #20
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr
 800a5fe:	bf00      	nop
 800a600:	200049f0 	.word	0x200049f0
 800a604:	200049f8 	.word	0x200049f8

0800a608 <__cvt>:
 800a608:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a60c:	ec57 6b10 	vmov	r6, r7, d0
 800a610:	2f00      	cmp	r7, #0
 800a612:	460c      	mov	r4, r1
 800a614:	4619      	mov	r1, r3
 800a616:	463b      	mov	r3, r7
 800a618:	bfbb      	ittet	lt
 800a61a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a61e:	461f      	movlt	r7, r3
 800a620:	2300      	movge	r3, #0
 800a622:	232d      	movlt	r3, #45	@ 0x2d
 800a624:	700b      	strb	r3, [r1, #0]
 800a626:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a628:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a62c:	4691      	mov	r9, r2
 800a62e:	f023 0820 	bic.w	r8, r3, #32
 800a632:	bfbc      	itt	lt
 800a634:	4632      	movlt	r2, r6
 800a636:	4616      	movlt	r6, r2
 800a638:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a63c:	d005      	beq.n	800a64a <__cvt+0x42>
 800a63e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a642:	d100      	bne.n	800a646 <__cvt+0x3e>
 800a644:	3401      	adds	r4, #1
 800a646:	2102      	movs	r1, #2
 800a648:	e000      	b.n	800a64c <__cvt+0x44>
 800a64a:	2103      	movs	r1, #3
 800a64c:	ab03      	add	r3, sp, #12
 800a64e:	9301      	str	r3, [sp, #4]
 800a650:	ab02      	add	r3, sp, #8
 800a652:	9300      	str	r3, [sp, #0]
 800a654:	ec47 6b10 	vmov	d0, r6, r7
 800a658:	4653      	mov	r3, sl
 800a65a:	4622      	mov	r2, r4
 800a65c:	f001 f8d8 	bl	800b810 <_dtoa_r>
 800a660:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a664:	4605      	mov	r5, r0
 800a666:	d119      	bne.n	800a69c <__cvt+0x94>
 800a668:	f019 0f01 	tst.w	r9, #1
 800a66c:	d00e      	beq.n	800a68c <__cvt+0x84>
 800a66e:	eb00 0904 	add.w	r9, r0, r4
 800a672:	2200      	movs	r2, #0
 800a674:	2300      	movs	r3, #0
 800a676:	4630      	mov	r0, r6
 800a678:	4639      	mov	r1, r7
 800a67a:	f7f6 fa2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800a67e:	b108      	cbz	r0, 800a684 <__cvt+0x7c>
 800a680:	f8cd 900c 	str.w	r9, [sp, #12]
 800a684:	2230      	movs	r2, #48	@ 0x30
 800a686:	9b03      	ldr	r3, [sp, #12]
 800a688:	454b      	cmp	r3, r9
 800a68a:	d31e      	bcc.n	800a6ca <__cvt+0xc2>
 800a68c:	9b03      	ldr	r3, [sp, #12]
 800a68e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a690:	1b5b      	subs	r3, r3, r5
 800a692:	4628      	mov	r0, r5
 800a694:	6013      	str	r3, [r2, #0]
 800a696:	b004      	add	sp, #16
 800a698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a69c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a6a0:	eb00 0904 	add.w	r9, r0, r4
 800a6a4:	d1e5      	bne.n	800a672 <__cvt+0x6a>
 800a6a6:	7803      	ldrb	r3, [r0, #0]
 800a6a8:	2b30      	cmp	r3, #48	@ 0x30
 800a6aa:	d10a      	bne.n	800a6c2 <__cvt+0xba>
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	4630      	mov	r0, r6
 800a6b2:	4639      	mov	r1, r7
 800a6b4:	f7f6 fa10 	bl	8000ad8 <__aeabi_dcmpeq>
 800a6b8:	b918      	cbnz	r0, 800a6c2 <__cvt+0xba>
 800a6ba:	f1c4 0401 	rsb	r4, r4, #1
 800a6be:	f8ca 4000 	str.w	r4, [sl]
 800a6c2:	f8da 3000 	ldr.w	r3, [sl]
 800a6c6:	4499      	add	r9, r3
 800a6c8:	e7d3      	b.n	800a672 <__cvt+0x6a>
 800a6ca:	1c59      	adds	r1, r3, #1
 800a6cc:	9103      	str	r1, [sp, #12]
 800a6ce:	701a      	strb	r2, [r3, #0]
 800a6d0:	e7d9      	b.n	800a686 <__cvt+0x7e>

0800a6d2 <__exponent>:
 800a6d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6d4:	2900      	cmp	r1, #0
 800a6d6:	bfba      	itte	lt
 800a6d8:	4249      	neglt	r1, r1
 800a6da:	232d      	movlt	r3, #45	@ 0x2d
 800a6dc:	232b      	movge	r3, #43	@ 0x2b
 800a6de:	2909      	cmp	r1, #9
 800a6e0:	7002      	strb	r2, [r0, #0]
 800a6e2:	7043      	strb	r3, [r0, #1]
 800a6e4:	dd29      	ble.n	800a73a <__exponent+0x68>
 800a6e6:	f10d 0307 	add.w	r3, sp, #7
 800a6ea:	461d      	mov	r5, r3
 800a6ec:	270a      	movs	r7, #10
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	fbb1 f6f7 	udiv	r6, r1, r7
 800a6f4:	fb07 1416 	mls	r4, r7, r6, r1
 800a6f8:	3430      	adds	r4, #48	@ 0x30
 800a6fa:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a6fe:	460c      	mov	r4, r1
 800a700:	2c63      	cmp	r4, #99	@ 0x63
 800a702:	f103 33ff 	add.w	r3, r3, #4294967295
 800a706:	4631      	mov	r1, r6
 800a708:	dcf1      	bgt.n	800a6ee <__exponent+0x1c>
 800a70a:	3130      	adds	r1, #48	@ 0x30
 800a70c:	1e94      	subs	r4, r2, #2
 800a70e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a712:	1c41      	adds	r1, r0, #1
 800a714:	4623      	mov	r3, r4
 800a716:	42ab      	cmp	r3, r5
 800a718:	d30a      	bcc.n	800a730 <__exponent+0x5e>
 800a71a:	f10d 0309 	add.w	r3, sp, #9
 800a71e:	1a9b      	subs	r3, r3, r2
 800a720:	42ac      	cmp	r4, r5
 800a722:	bf88      	it	hi
 800a724:	2300      	movhi	r3, #0
 800a726:	3302      	adds	r3, #2
 800a728:	4403      	add	r3, r0
 800a72a:	1a18      	subs	r0, r3, r0
 800a72c:	b003      	add	sp, #12
 800a72e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a730:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a734:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a738:	e7ed      	b.n	800a716 <__exponent+0x44>
 800a73a:	2330      	movs	r3, #48	@ 0x30
 800a73c:	3130      	adds	r1, #48	@ 0x30
 800a73e:	7083      	strb	r3, [r0, #2]
 800a740:	70c1      	strb	r1, [r0, #3]
 800a742:	1d03      	adds	r3, r0, #4
 800a744:	e7f1      	b.n	800a72a <__exponent+0x58>
	...

0800a748 <_printf_float>:
 800a748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a74c:	b08d      	sub	sp, #52	@ 0x34
 800a74e:	460c      	mov	r4, r1
 800a750:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a754:	4616      	mov	r6, r2
 800a756:	461f      	mov	r7, r3
 800a758:	4605      	mov	r5, r0
 800a75a:	f000 feef 	bl	800b53c <_localeconv_r>
 800a75e:	6803      	ldr	r3, [r0, #0]
 800a760:	9304      	str	r3, [sp, #16]
 800a762:	4618      	mov	r0, r3
 800a764:	f7f5 fd8c 	bl	8000280 <strlen>
 800a768:	2300      	movs	r3, #0
 800a76a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a76c:	f8d8 3000 	ldr.w	r3, [r8]
 800a770:	9005      	str	r0, [sp, #20]
 800a772:	3307      	adds	r3, #7
 800a774:	f023 0307 	bic.w	r3, r3, #7
 800a778:	f103 0208 	add.w	r2, r3, #8
 800a77c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a780:	f8d4 b000 	ldr.w	fp, [r4]
 800a784:	f8c8 2000 	str.w	r2, [r8]
 800a788:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a78c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a790:	9307      	str	r3, [sp, #28]
 800a792:	f8cd 8018 	str.w	r8, [sp, #24]
 800a796:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a79a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a79e:	4b9c      	ldr	r3, [pc, #624]	@ (800aa10 <_printf_float+0x2c8>)
 800a7a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a7a4:	f7f6 f9ca 	bl	8000b3c <__aeabi_dcmpun>
 800a7a8:	bb70      	cbnz	r0, 800a808 <_printf_float+0xc0>
 800a7aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7ae:	4b98      	ldr	r3, [pc, #608]	@ (800aa10 <_printf_float+0x2c8>)
 800a7b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a7b4:	f7f6 f9a4 	bl	8000b00 <__aeabi_dcmple>
 800a7b8:	bb30      	cbnz	r0, 800a808 <_printf_float+0xc0>
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	2300      	movs	r3, #0
 800a7be:	4640      	mov	r0, r8
 800a7c0:	4649      	mov	r1, r9
 800a7c2:	f7f6 f993 	bl	8000aec <__aeabi_dcmplt>
 800a7c6:	b110      	cbz	r0, 800a7ce <_printf_float+0x86>
 800a7c8:	232d      	movs	r3, #45	@ 0x2d
 800a7ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7ce:	4a91      	ldr	r2, [pc, #580]	@ (800aa14 <_printf_float+0x2cc>)
 800a7d0:	4b91      	ldr	r3, [pc, #580]	@ (800aa18 <_printf_float+0x2d0>)
 800a7d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a7d6:	bf94      	ite	ls
 800a7d8:	4690      	movls	r8, r2
 800a7da:	4698      	movhi	r8, r3
 800a7dc:	2303      	movs	r3, #3
 800a7de:	6123      	str	r3, [r4, #16]
 800a7e0:	f02b 0304 	bic.w	r3, fp, #4
 800a7e4:	6023      	str	r3, [r4, #0]
 800a7e6:	f04f 0900 	mov.w	r9, #0
 800a7ea:	9700      	str	r7, [sp, #0]
 800a7ec:	4633      	mov	r3, r6
 800a7ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a7f0:	4621      	mov	r1, r4
 800a7f2:	4628      	mov	r0, r5
 800a7f4:	f000 f9d2 	bl	800ab9c <_printf_common>
 800a7f8:	3001      	adds	r0, #1
 800a7fa:	f040 808d 	bne.w	800a918 <_printf_float+0x1d0>
 800a7fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a802:	b00d      	add	sp, #52	@ 0x34
 800a804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a808:	4642      	mov	r2, r8
 800a80a:	464b      	mov	r3, r9
 800a80c:	4640      	mov	r0, r8
 800a80e:	4649      	mov	r1, r9
 800a810:	f7f6 f994 	bl	8000b3c <__aeabi_dcmpun>
 800a814:	b140      	cbz	r0, 800a828 <_printf_float+0xe0>
 800a816:	464b      	mov	r3, r9
 800a818:	2b00      	cmp	r3, #0
 800a81a:	bfbc      	itt	lt
 800a81c:	232d      	movlt	r3, #45	@ 0x2d
 800a81e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a822:	4a7e      	ldr	r2, [pc, #504]	@ (800aa1c <_printf_float+0x2d4>)
 800a824:	4b7e      	ldr	r3, [pc, #504]	@ (800aa20 <_printf_float+0x2d8>)
 800a826:	e7d4      	b.n	800a7d2 <_printf_float+0x8a>
 800a828:	6863      	ldr	r3, [r4, #4]
 800a82a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a82e:	9206      	str	r2, [sp, #24]
 800a830:	1c5a      	adds	r2, r3, #1
 800a832:	d13b      	bne.n	800a8ac <_printf_float+0x164>
 800a834:	2306      	movs	r3, #6
 800a836:	6063      	str	r3, [r4, #4]
 800a838:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a83c:	2300      	movs	r3, #0
 800a83e:	6022      	str	r2, [r4, #0]
 800a840:	9303      	str	r3, [sp, #12]
 800a842:	ab0a      	add	r3, sp, #40	@ 0x28
 800a844:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a848:	ab09      	add	r3, sp, #36	@ 0x24
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	6861      	ldr	r1, [r4, #4]
 800a84e:	ec49 8b10 	vmov	d0, r8, r9
 800a852:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a856:	4628      	mov	r0, r5
 800a858:	f7ff fed6 	bl	800a608 <__cvt>
 800a85c:	9b06      	ldr	r3, [sp, #24]
 800a85e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a860:	2b47      	cmp	r3, #71	@ 0x47
 800a862:	4680      	mov	r8, r0
 800a864:	d129      	bne.n	800a8ba <_printf_float+0x172>
 800a866:	1cc8      	adds	r0, r1, #3
 800a868:	db02      	blt.n	800a870 <_printf_float+0x128>
 800a86a:	6863      	ldr	r3, [r4, #4]
 800a86c:	4299      	cmp	r1, r3
 800a86e:	dd41      	ble.n	800a8f4 <_printf_float+0x1ac>
 800a870:	f1aa 0a02 	sub.w	sl, sl, #2
 800a874:	fa5f fa8a 	uxtb.w	sl, sl
 800a878:	3901      	subs	r1, #1
 800a87a:	4652      	mov	r2, sl
 800a87c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a880:	9109      	str	r1, [sp, #36]	@ 0x24
 800a882:	f7ff ff26 	bl	800a6d2 <__exponent>
 800a886:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a888:	1813      	adds	r3, r2, r0
 800a88a:	2a01      	cmp	r2, #1
 800a88c:	4681      	mov	r9, r0
 800a88e:	6123      	str	r3, [r4, #16]
 800a890:	dc02      	bgt.n	800a898 <_printf_float+0x150>
 800a892:	6822      	ldr	r2, [r4, #0]
 800a894:	07d2      	lsls	r2, r2, #31
 800a896:	d501      	bpl.n	800a89c <_printf_float+0x154>
 800a898:	3301      	adds	r3, #1
 800a89a:	6123      	str	r3, [r4, #16]
 800a89c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d0a2      	beq.n	800a7ea <_printf_float+0xa2>
 800a8a4:	232d      	movs	r3, #45	@ 0x2d
 800a8a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8aa:	e79e      	b.n	800a7ea <_printf_float+0xa2>
 800a8ac:	9a06      	ldr	r2, [sp, #24]
 800a8ae:	2a47      	cmp	r2, #71	@ 0x47
 800a8b0:	d1c2      	bne.n	800a838 <_printf_float+0xf0>
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d1c0      	bne.n	800a838 <_printf_float+0xf0>
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	e7bd      	b.n	800a836 <_printf_float+0xee>
 800a8ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a8be:	d9db      	bls.n	800a878 <_printf_float+0x130>
 800a8c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a8c4:	d118      	bne.n	800a8f8 <_printf_float+0x1b0>
 800a8c6:	2900      	cmp	r1, #0
 800a8c8:	6863      	ldr	r3, [r4, #4]
 800a8ca:	dd0b      	ble.n	800a8e4 <_printf_float+0x19c>
 800a8cc:	6121      	str	r1, [r4, #16]
 800a8ce:	b913      	cbnz	r3, 800a8d6 <_printf_float+0x18e>
 800a8d0:	6822      	ldr	r2, [r4, #0]
 800a8d2:	07d0      	lsls	r0, r2, #31
 800a8d4:	d502      	bpl.n	800a8dc <_printf_float+0x194>
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	440b      	add	r3, r1
 800a8da:	6123      	str	r3, [r4, #16]
 800a8dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a8de:	f04f 0900 	mov.w	r9, #0
 800a8e2:	e7db      	b.n	800a89c <_printf_float+0x154>
 800a8e4:	b913      	cbnz	r3, 800a8ec <_printf_float+0x1a4>
 800a8e6:	6822      	ldr	r2, [r4, #0]
 800a8e8:	07d2      	lsls	r2, r2, #31
 800a8ea:	d501      	bpl.n	800a8f0 <_printf_float+0x1a8>
 800a8ec:	3302      	adds	r3, #2
 800a8ee:	e7f4      	b.n	800a8da <_printf_float+0x192>
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	e7f2      	b.n	800a8da <_printf_float+0x192>
 800a8f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a8f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8fa:	4299      	cmp	r1, r3
 800a8fc:	db05      	blt.n	800a90a <_printf_float+0x1c2>
 800a8fe:	6823      	ldr	r3, [r4, #0]
 800a900:	6121      	str	r1, [r4, #16]
 800a902:	07d8      	lsls	r0, r3, #31
 800a904:	d5ea      	bpl.n	800a8dc <_printf_float+0x194>
 800a906:	1c4b      	adds	r3, r1, #1
 800a908:	e7e7      	b.n	800a8da <_printf_float+0x192>
 800a90a:	2900      	cmp	r1, #0
 800a90c:	bfd4      	ite	le
 800a90e:	f1c1 0202 	rsble	r2, r1, #2
 800a912:	2201      	movgt	r2, #1
 800a914:	4413      	add	r3, r2
 800a916:	e7e0      	b.n	800a8da <_printf_float+0x192>
 800a918:	6823      	ldr	r3, [r4, #0]
 800a91a:	055a      	lsls	r2, r3, #21
 800a91c:	d407      	bmi.n	800a92e <_printf_float+0x1e6>
 800a91e:	6923      	ldr	r3, [r4, #16]
 800a920:	4642      	mov	r2, r8
 800a922:	4631      	mov	r1, r6
 800a924:	4628      	mov	r0, r5
 800a926:	47b8      	blx	r7
 800a928:	3001      	adds	r0, #1
 800a92a:	d12b      	bne.n	800a984 <_printf_float+0x23c>
 800a92c:	e767      	b.n	800a7fe <_printf_float+0xb6>
 800a92e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a932:	f240 80dd 	bls.w	800aaf0 <_printf_float+0x3a8>
 800a936:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a93a:	2200      	movs	r2, #0
 800a93c:	2300      	movs	r3, #0
 800a93e:	f7f6 f8cb 	bl	8000ad8 <__aeabi_dcmpeq>
 800a942:	2800      	cmp	r0, #0
 800a944:	d033      	beq.n	800a9ae <_printf_float+0x266>
 800a946:	4a37      	ldr	r2, [pc, #220]	@ (800aa24 <_printf_float+0x2dc>)
 800a948:	2301      	movs	r3, #1
 800a94a:	4631      	mov	r1, r6
 800a94c:	4628      	mov	r0, r5
 800a94e:	47b8      	blx	r7
 800a950:	3001      	adds	r0, #1
 800a952:	f43f af54 	beq.w	800a7fe <_printf_float+0xb6>
 800a956:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a95a:	4543      	cmp	r3, r8
 800a95c:	db02      	blt.n	800a964 <_printf_float+0x21c>
 800a95e:	6823      	ldr	r3, [r4, #0]
 800a960:	07d8      	lsls	r0, r3, #31
 800a962:	d50f      	bpl.n	800a984 <_printf_float+0x23c>
 800a964:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a968:	4631      	mov	r1, r6
 800a96a:	4628      	mov	r0, r5
 800a96c:	47b8      	blx	r7
 800a96e:	3001      	adds	r0, #1
 800a970:	f43f af45 	beq.w	800a7fe <_printf_float+0xb6>
 800a974:	f04f 0900 	mov.w	r9, #0
 800a978:	f108 38ff 	add.w	r8, r8, #4294967295
 800a97c:	f104 0a1a 	add.w	sl, r4, #26
 800a980:	45c8      	cmp	r8, r9
 800a982:	dc09      	bgt.n	800a998 <_printf_float+0x250>
 800a984:	6823      	ldr	r3, [r4, #0]
 800a986:	079b      	lsls	r3, r3, #30
 800a988:	f100 8103 	bmi.w	800ab92 <_printf_float+0x44a>
 800a98c:	68e0      	ldr	r0, [r4, #12]
 800a98e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a990:	4298      	cmp	r0, r3
 800a992:	bfb8      	it	lt
 800a994:	4618      	movlt	r0, r3
 800a996:	e734      	b.n	800a802 <_printf_float+0xba>
 800a998:	2301      	movs	r3, #1
 800a99a:	4652      	mov	r2, sl
 800a99c:	4631      	mov	r1, r6
 800a99e:	4628      	mov	r0, r5
 800a9a0:	47b8      	blx	r7
 800a9a2:	3001      	adds	r0, #1
 800a9a4:	f43f af2b 	beq.w	800a7fe <_printf_float+0xb6>
 800a9a8:	f109 0901 	add.w	r9, r9, #1
 800a9ac:	e7e8      	b.n	800a980 <_printf_float+0x238>
 800a9ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	dc39      	bgt.n	800aa28 <_printf_float+0x2e0>
 800a9b4:	4a1b      	ldr	r2, [pc, #108]	@ (800aa24 <_printf_float+0x2dc>)
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	4631      	mov	r1, r6
 800a9ba:	4628      	mov	r0, r5
 800a9bc:	47b8      	blx	r7
 800a9be:	3001      	adds	r0, #1
 800a9c0:	f43f af1d 	beq.w	800a7fe <_printf_float+0xb6>
 800a9c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a9c8:	ea59 0303 	orrs.w	r3, r9, r3
 800a9cc:	d102      	bne.n	800a9d4 <_printf_float+0x28c>
 800a9ce:	6823      	ldr	r3, [r4, #0]
 800a9d0:	07d9      	lsls	r1, r3, #31
 800a9d2:	d5d7      	bpl.n	800a984 <_printf_float+0x23c>
 800a9d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9d8:	4631      	mov	r1, r6
 800a9da:	4628      	mov	r0, r5
 800a9dc:	47b8      	blx	r7
 800a9de:	3001      	adds	r0, #1
 800a9e0:	f43f af0d 	beq.w	800a7fe <_printf_float+0xb6>
 800a9e4:	f04f 0a00 	mov.w	sl, #0
 800a9e8:	f104 0b1a 	add.w	fp, r4, #26
 800a9ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9ee:	425b      	negs	r3, r3
 800a9f0:	4553      	cmp	r3, sl
 800a9f2:	dc01      	bgt.n	800a9f8 <_printf_float+0x2b0>
 800a9f4:	464b      	mov	r3, r9
 800a9f6:	e793      	b.n	800a920 <_printf_float+0x1d8>
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	465a      	mov	r2, fp
 800a9fc:	4631      	mov	r1, r6
 800a9fe:	4628      	mov	r0, r5
 800aa00:	47b8      	blx	r7
 800aa02:	3001      	adds	r0, #1
 800aa04:	f43f aefb 	beq.w	800a7fe <_printf_float+0xb6>
 800aa08:	f10a 0a01 	add.w	sl, sl, #1
 800aa0c:	e7ee      	b.n	800a9ec <_printf_float+0x2a4>
 800aa0e:	bf00      	nop
 800aa10:	7fefffff 	.word	0x7fefffff
 800aa14:	0800f00c 	.word	0x0800f00c
 800aa18:	0800f010 	.word	0x0800f010
 800aa1c:	0800f014 	.word	0x0800f014
 800aa20:	0800f018 	.word	0x0800f018
 800aa24:	0800f01c 	.word	0x0800f01c
 800aa28:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aa2a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aa2e:	4553      	cmp	r3, sl
 800aa30:	bfa8      	it	ge
 800aa32:	4653      	movge	r3, sl
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	4699      	mov	r9, r3
 800aa38:	dc36      	bgt.n	800aaa8 <_printf_float+0x360>
 800aa3a:	f04f 0b00 	mov.w	fp, #0
 800aa3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa42:	f104 021a 	add.w	r2, r4, #26
 800aa46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aa48:	9306      	str	r3, [sp, #24]
 800aa4a:	eba3 0309 	sub.w	r3, r3, r9
 800aa4e:	455b      	cmp	r3, fp
 800aa50:	dc31      	bgt.n	800aab6 <_printf_float+0x36e>
 800aa52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa54:	459a      	cmp	sl, r3
 800aa56:	dc3a      	bgt.n	800aace <_printf_float+0x386>
 800aa58:	6823      	ldr	r3, [r4, #0]
 800aa5a:	07da      	lsls	r2, r3, #31
 800aa5c:	d437      	bmi.n	800aace <_printf_float+0x386>
 800aa5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa60:	ebaa 0903 	sub.w	r9, sl, r3
 800aa64:	9b06      	ldr	r3, [sp, #24]
 800aa66:	ebaa 0303 	sub.w	r3, sl, r3
 800aa6a:	4599      	cmp	r9, r3
 800aa6c:	bfa8      	it	ge
 800aa6e:	4699      	movge	r9, r3
 800aa70:	f1b9 0f00 	cmp.w	r9, #0
 800aa74:	dc33      	bgt.n	800aade <_printf_float+0x396>
 800aa76:	f04f 0800 	mov.w	r8, #0
 800aa7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa7e:	f104 0b1a 	add.w	fp, r4, #26
 800aa82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa84:	ebaa 0303 	sub.w	r3, sl, r3
 800aa88:	eba3 0309 	sub.w	r3, r3, r9
 800aa8c:	4543      	cmp	r3, r8
 800aa8e:	f77f af79 	ble.w	800a984 <_printf_float+0x23c>
 800aa92:	2301      	movs	r3, #1
 800aa94:	465a      	mov	r2, fp
 800aa96:	4631      	mov	r1, r6
 800aa98:	4628      	mov	r0, r5
 800aa9a:	47b8      	blx	r7
 800aa9c:	3001      	adds	r0, #1
 800aa9e:	f43f aeae 	beq.w	800a7fe <_printf_float+0xb6>
 800aaa2:	f108 0801 	add.w	r8, r8, #1
 800aaa6:	e7ec      	b.n	800aa82 <_printf_float+0x33a>
 800aaa8:	4642      	mov	r2, r8
 800aaaa:	4631      	mov	r1, r6
 800aaac:	4628      	mov	r0, r5
 800aaae:	47b8      	blx	r7
 800aab0:	3001      	adds	r0, #1
 800aab2:	d1c2      	bne.n	800aa3a <_printf_float+0x2f2>
 800aab4:	e6a3      	b.n	800a7fe <_printf_float+0xb6>
 800aab6:	2301      	movs	r3, #1
 800aab8:	4631      	mov	r1, r6
 800aaba:	4628      	mov	r0, r5
 800aabc:	9206      	str	r2, [sp, #24]
 800aabe:	47b8      	blx	r7
 800aac0:	3001      	adds	r0, #1
 800aac2:	f43f ae9c 	beq.w	800a7fe <_printf_float+0xb6>
 800aac6:	9a06      	ldr	r2, [sp, #24]
 800aac8:	f10b 0b01 	add.w	fp, fp, #1
 800aacc:	e7bb      	b.n	800aa46 <_printf_float+0x2fe>
 800aace:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aad2:	4631      	mov	r1, r6
 800aad4:	4628      	mov	r0, r5
 800aad6:	47b8      	blx	r7
 800aad8:	3001      	adds	r0, #1
 800aada:	d1c0      	bne.n	800aa5e <_printf_float+0x316>
 800aadc:	e68f      	b.n	800a7fe <_printf_float+0xb6>
 800aade:	9a06      	ldr	r2, [sp, #24]
 800aae0:	464b      	mov	r3, r9
 800aae2:	4442      	add	r2, r8
 800aae4:	4631      	mov	r1, r6
 800aae6:	4628      	mov	r0, r5
 800aae8:	47b8      	blx	r7
 800aaea:	3001      	adds	r0, #1
 800aaec:	d1c3      	bne.n	800aa76 <_printf_float+0x32e>
 800aaee:	e686      	b.n	800a7fe <_printf_float+0xb6>
 800aaf0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aaf4:	f1ba 0f01 	cmp.w	sl, #1
 800aaf8:	dc01      	bgt.n	800aafe <_printf_float+0x3b6>
 800aafa:	07db      	lsls	r3, r3, #31
 800aafc:	d536      	bpl.n	800ab6c <_printf_float+0x424>
 800aafe:	2301      	movs	r3, #1
 800ab00:	4642      	mov	r2, r8
 800ab02:	4631      	mov	r1, r6
 800ab04:	4628      	mov	r0, r5
 800ab06:	47b8      	blx	r7
 800ab08:	3001      	adds	r0, #1
 800ab0a:	f43f ae78 	beq.w	800a7fe <_printf_float+0xb6>
 800ab0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab12:	4631      	mov	r1, r6
 800ab14:	4628      	mov	r0, r5
 800ab16:	47b8      	blx	r7
 800ab18:	3001      	adds	r0, #1
 800ab1a:	f43f ae70 	beq.w	800a7fe <_printf_float+0xb6>
 800ab1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ab22:	2200      	movs	r2, #0
 800ab24:	2300      	movs	r3, #0
 800ab26:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab2a:	f7f5 ffd5 	bl	8000ad8 <__aeabi_dcmpeq>
 800ab2e:	b9c0      	cbnz	r0, 800ab62 <_printf_float+0x41a>
 800ab30:	4653      	mov	r3, sl
 800ab32:	f108 0201 	add.w	r2, r8, #1
 800ab36:	4631      	mov	r1, r6
 800ab38:	4628      	mov	r0, r5
 800ab3a:	47b8      	blx	r7
 800ab3c:	3001      	adds	r0, #1
 800ab3e:	d10c      	bne.n	800ab5a <_printf_float+0x412>
 800ab40:	e65d      	b.n	800a7fe <_printf_float+0xb6>
 800ab42:	2301      	movs	r3, #1
 800ab44:	465a      	mov	r2, fp
 800ab46:	4631      	mov	r1, r6
 800ab48:	4628      	mov	r0, r5
 800ab4a:	47b8      	blx	r7
 800ab4c:	3001      	adds	r0, #1
 800ab4e:	f43f ae56 	beq.w	800a7fe <_printf_float+0xb6>
 800ab52:	f108 0801 	add.w	r8, r8, #1
 800ab56:	45d0      	cmp	r8, sl
 800ab58:	dbf3      	blt.n	800ab42 <_printf_float+0x3fa>
 800ab5a:	464b      	mov	r3, r9
 800ab5c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ab60:	e6df      	b.n	800a922 <_printf_float+0x1da>
 800ab62:	f04f 0800 	mov.w	r8, #0
 800ab66:	f104 0b1a 	add.w	fp, r4, #26
 800ab6a:	e7f4      	b.n	800ab56 <_printf_float+0x40e>
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	4642      	mov	r2, r8
 800ab70:	e7e1      	b.n	800ab36 <_printf_float+0x3ee>
 800ab72:	2301      	movs	r3, #1
 800ab74:	464a      	mov	r2, r9
 800ab76:	4631      	mov	r1, r6
 800ab78:	4628      	mov	r0, r5
 800ab7a:	47b8      	blx	r7
 800ab7c:	3001      	adds	r0, #1
 800ab7e:	f43f ae3e 	beq.w	800a7fe <_printf_float+0xb6>
 800ab82:	f108 0801 	add.w	r8, r8, #1
 800ab86:	68e3      	ldr	r3, [r4, #12]
 800ab88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab8a:	1a5b      	subs	r3, r3, r1
 800ab8c:	4543      	cmp	r3, r8
 800ab8e:	dcf0      	bgt.n	800ab72 <_printf_float+0x42a>
 800ab90:	e6fc      	b.n	800a98c <_printf_float+0x244>
 800ab92:	f04f 0800 	mov.w	r8, #0
 800ab96:	f104 0919 	add.w	r9, r4, #25
 800ab9a:	e7f4      	b.n	800ab86 <_printf_float+0x43e>

0800ab9c <_printf_common>:
 800ab9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aba0:	4616      	mov	r6, r2
 800aba2:	4698      	mov	r8, r3
 800aba4:	688a      	ldr	r2, [r1, #8]
 800aba6:	690b      	ldr	r3, [r1, #16]
 800aba8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800abac:	4293      	cmp	r3, r2
 800abae:	bfb8      	it	lt
 800abb0:	4613      	movlt	r3, r2
 800abb2:	6033      	str	r3, [r6, #0]
 800abb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800abb8:	4607      	mov	r7, r0
 800abba:	460c      	mov	r4, r1
 800abbc:	b10a      	cbz	r2, 800abc2 <_printf_common+0x26>
 800abbe:	3301      	adds	r3, #1
 800abc0:	6033      	str	r3, [r6, #0]
 800abc2:	6823      	ldr	r3, [r4, #0]
 800abc4:	0699      	lsls	r1, r3, #26
 800abc6:	bf42      	ittt	mi
 800abc8:	6833      	ldrmi	r3, [r6, #0]
 800abca:	3302      	addmi	r3, #2
 800abcc:	6033      	strmi	r3, [r6, #0]
 800abce:	6825      	ldr	r5, [r4, #0]
 800abd0:	f015 0506 	ands.w	r5, r5, #6
 800abd4:	d106      	bne.n	800abe4 <_printf_common+0x48>
 800abd6:	f104 0a19 	add.w	sl, r4, #25
 800abda:	68e3      	ldr	r3, [r4, #12]
 800abdc:	6832      	ldr	r2, [r6, #0]
 800abde:	1a9b      	subs	r3, r3, r2
 800abe0:	42ab      	cmp	r3, r5
 800abe2:	dc26      	bgt.n	800ac32 <_printf_common+0x96>
 800abe4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800abe8:	6822      	ldr	r2, [r4, #0]
 800abea:	3b00      	subs	r3, #0
 800abec:	bf18      	it	ne
 800abee:	2301      	movne	r3, #1
 800abf0:	0692      	lsls	r2, r2, #26
 800abf2:	d42b      	bmi.n	800ac4c <_printf_common+0xb0>
 800abf4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800abf8:	4641      	mov	r1, r8
 800abfa:	4638      	mov	r0, r7
 800abfc:	47c8      	blx	r9
 800abfe:	3001      	adds	r0, #1
 800ac00:	d01e      	beq.n	800ac40 <_printf_common+0xa4>
 800ac02:	6823      	ldr	r3, [r4, #0]
 800ac04:	6922      	ldr	r2, [r4, #16]
 800ac06:	f003 0306 	and.w	r3, r3, #6
 800ac0a:	2b04      	cmp	r3, #4
 800ac0c:	bf02      	ittt	eq
 800ac0e:	68e5      	ldreq	r5, [r4, #12]
 800ac10:	6833      	ldreq	r3, [r6, #0]
 800ac12:	1aed      	subeq	r5, r5, r3
 800ac14:	68a3      	ldr	r3, [r4, #8]
 800ac16:	bf0c      	ite	eq
 800ac18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac1c:	2500      	movne	r5, #0
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	bfc4      	itt	gt
 800ac22:	1a9b      	subgt	r3, r3, r2
 800ac24:	18ed      	addgt	r5, r5, r3
 800ac26:	2600      	movs	r6, #0
 800ac28:	341a      	adds	r4, #26
 800ac2a:	42b5      	cmp	r5, r6
 800ac2c:	d11a      	bne.n	800ac64 <_printf_common+0xc8>
 800ac2e:	2000      	movs	r0, #0
 800ac30:	e008      	b.n	800ac44 <_printf_common+0xa8>
 800ac32:	2301      	movs	r3, #1
 800ac34:	4652      	mov	r2, sl
 800ac36:	4641      	mov	r1, r8
 800ac38:	4638      	mov	r0, r7
 800ac3a:	47c8      	blx	r9
 800ac3c:	3001      	adds	r0, #1
 800ac3e:	d103      	bne.n	800ac48 <_printf_common+0xac>
 800ac40:	f04f 30ff 	mov.w	r0, #4294967295
 800ac44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac48:	3501      	adds	r5, #1
 800ac4a:	e7c6      	b.n	800abda <_printf_common+0x3e>
 800ac4c:	18e1      	adds	r1, r4, r3
 800ac4e:	1c5a      	adds	r2, r3, #1
 800ac50:	2030      	movs	r0, #48	@ 0x30
 800ac52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ac56:	4422      	add	r2, r4
 800ac58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ac5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac60:	3302      	adds	r3, #2
 800ac62:	e7c7      	b.n	800abf4 <_printf_common+0x58>
 800ac64:	2301      	movs	r3, #1
 800ac66:	4622      	mov	r2, r4
 800ac68:	4641      	mov	r1, r8
 800ac6a:	4638      	mov	r0, r7
 800ac6c:	47c8      	blx	r9
 800ac6e:	3001      	adds	r0, #1
 800ac70:	d0e6      	beq.n	800ac40 <_printf_common+0xa4>
 800ac72:	3601      	adds	r6, #1
 800ac74:	e7d9      	b.n	800ac2a <_printf_common+0x8e>
	...

0800ac78 <_printf_i>:
 800ac78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac7c:	7e0f      	ldrb	r7, [r1, #24]
 800ac7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac80:	2f78      	cmp	r7, #120	@ 0x78
 800ac82:	4691      	mov	r9, r2
 800ac84:	4680      	mov	r8, r0
 800ac86:	460c      	mov	r4, r1
 800ac88:	469a      	mov	sl, r3
 800ac8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac8e:	d807      	bhi.n	800aca0 <_printf_i+0x28>
 800ac90:	2f62      	cmp	r7, #98	@ 0x62
 800ac92:	d80a      	bhi.n	800acaa <_printf_i+0x32>
 800ac94:	2f00      	cmp	r7, #0
 800ac96:	f000 80d2 	beq.w	800ae3e <_printf_i+0x1c6>
 800ac9a:	2f58      	cmp	r7, #88	@ 0x58
 800ac9c:	f000 80b9 	beq.w	800ae12 <_printf_i+0x19a>
 800aca0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aca4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aca8:	e03a      	b.n	800ad20 <_printf_i+0xa8>
 800acaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800acae:	2b15      	cmp	r3, #21
 800acb0:	d8f6      	bhi.n	800aca0 <_printf_i+0x28>
 800acb2:	a101      	add	r1, pc, #4	@ (adr r1, 800acb8 <_printf_i+0x40>)
 800acb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800acb8:	0800ad11 	.word	0x0800ad11
 800acbc:	0800ad25 	.word	0x0800ad25
 800acc0:	0800aca1 	.word	0x0800aca1
 800acc4:	0800aca1 	.word	0x0800aca1
 800acc8:	0800aca1 	.word	0x0800aca1
 800accc:	0800aca1 	.word	0x0800aca1
 800acd0:	0800ad25 	.word	0x0800ad25
 800acd4:	0800aca1 	.word	0x0800aca1
 800acd8:	0800aca1 	.word	0x0800aca1
 800acdc:	0800aca1 	.word	0x0800aca1
 800ace0:	0800aca1 	.word	0x0800aca1
 800ace4:	0800ae25 	.word	0x0800ae25
 800ace8:	0800ad4f 	.word	0x0800ad4f
 800acec:	0800addf 	.word	0x0800addf
 800acf0:	0800aca1 	.word	0x0800aca1
 800acf4:	0800aca1 	.word	0x0800aca1
 800acf8:	0800ae47 	.word	0x0800ae47
 800acfc:	0800aca1 	.word	0x0800aca1
 800ad00:	0800ad4f 	.word	0x0800ad4f
 800ad04:	0800aca1 	.word	0x0800aca1
 800ad08:	0800aca1 	.word	0x0800aca1
 800ad0c:	0800ade7 	.word	0x0800ade7
 800ad10:	6833      	ldr	r3, [r6, #0]
 800ad12:	1d1a      	adds	r2, r3, #4
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	6032      	str	r2, [r6, #0]
 800ad18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ad20:	2301      	movs	r3, #1
 800ad22:	e09d      	b.n	800ae60 <_printf_i+0x1e8>
 800ad24:	6833      	ldr	r3, [r6, #0]
 800ad26:	6820      	ldr	r0, [r4, #0]
 800ad28:	1d19      	adds	r1, r3, #4
 800ad2a:	6031      	str	r1, [r6, #0]
 800ad2c:	0606      	lsls	r6, r0, #24
 800ad2e:	d501      	bpl.n	800ad34 <_printf_i+0xbc>
 800ad30:	681d      	ldr	r5, [r3, #0]
 800ad32:	e003      	b.n	800ad3c <_printf_i+0xc4>
 800ad34:	0645      	lsls	r5, r0, #25
 800ad36:	d5fb      	bpl.n	800ad30 <_printf_i+0xb8>
 800ad38:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ad3c:	2d00      	cmp	r5, #0
 800ad3e:	da03      	bge.n	800ad48 <_printf_i+0xd0>
 800ad40:	232d      	movs	r3, #45	@ 0x2d
 800ad42:	426d      	negs	r5, r5
 800ad44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad48:	4859      	ldr	r0, [pc, #356]	@ (800aeb0 <_printf_i+0x238>)
 800ad4a:	230a      	movs	r3, #10
 800ad4c:	e011      	b.n	800ad72 <_printf_i+0xfa>
 800ad4e:	6821      	ldr	r1, [r4, #0]
 800ad50:	6833      	ldr	r3, [r6, #0]
 800ad52:	0608      	lsls	r0, r1, #24
 800ad54:	f853 5b04 	ldr.w	r5, [r3], #4
 800ad58:	d402      	bmi.n	800ad60 <_printf_i+0xe8>
 800ad5a:	0649      	lsls	r1, r1, #25
 800ad5c:	bf48      	it	mi
 800ad5e:	b2ad      	uxthmi	r5, r5
 800ad60:	2f6f      	cmp	r7, #111	@ 0x6f
 800ad62:	4853      	ldr	r0, [pc, #332]	@ (800aeb0 <_printf_i+0x238>)
 800ad64:	6033      	str	r3, [r6, #0]
 800ad66:	bf14      	ite	ne
 800ad68:	230a      	movne	r3, #10
 800ad6a:	2308      	moveq	r3, #8
 800ad6c:	2100      	movs	r1, #0
 800ad6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad72:	6866      	ldr	r6, [r4, #4]
 800ad74:	60a6      	str	r6, [r4, #8]
 800ad76:	2e00      	cmp	r6, #0
 800ad78:	bfa2      	ittt	ge
 800ad7a:	6821      	ldrge	r1, [r4, #0]
 800ad7c:	f021 0104 	bicge.w	r1, r1, #4
 800ad80:	6021      	strge	r1, [r4, #0]
 800ad82:	b90d      	cbnz	r5, 800ad88 <_printf_i+0x110>
 800ad84:	2e00      	cmp	r6, #0
 800ad86:	d04b      	beq.n	800ae20 <_printf_i+0x1a8>
 800ad88:	4616      	mov	r6, r2
 800ad8a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad8e:	fb03 5711 	mls	r7, r3, r1, r5
 800ad92:	5dc7      	ldrb	r7, [r0, r7]
 800ad94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad98:	462f      	mov	r7, r5
 800ad9a:	42bb      	cmp	r3, r7
 800ad9c:	460d      	mov	r5, r1
 800ad9e:	d9f4      	bls.n	800ad8a <_printf_i+0x112>
 800ada0:	2b08      	cmp	r3, #8
 800ada2:	d10b      	bne.n	800adbc <_printf_i+0x144>
 800ada4:	6823      	ldr	r3, [r4, #0]
 800ada6:	07df      	lsls	r7, r3, #31
 800ada8:	d508      	bpl.n	800adbc <_printf_i+0x144>
 800adaa:	6923      	ldr	r3, [r4, #16]
 800adac:	6861      	ldr	r1, [r4, #4]
 800adae:	4299      	cmp	r1, r3
 800adb0:	bfde      	ittt	le
 800adb2:	2330      	movle	r3, #48	@ 0x30
 800adb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800adb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800adbc:	1b92      	subs	r2, r2, r6
 800adbe:	6122      	str	r2, [r4, #16]
 800adc0:	f8cd a000 	str.w	sl, [sp]
 800adc4:	464b      	mov	r3, r9
 800adc6:	aa03      	add	r2, sp, #12
 800adc8:	4621      	mov	r1, r4
 800adca:	4640      	mov	r0, r8
 800adcc:	f7ff fee6 	bl	800ab9c <_printf_common>
 800add0:	3001      	adds	r0, #1
 800add2:	d14a      	bne.n	800ae6a <_printf_i+0x1f2>
 800add4:	f04f 30ff 	mov.w	r0, #4294967295
 800add8:	b004      	add	sp, #16
 800adda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adde:	6823      	ldr	r3, [r4, #0]
 800ade0:	f043 0320 	orr.w	r3, r3, #32
 800ade4:	6023      	str	r3, [r4, #0]
 800ade6:	4833      	ldr	r0, [pc, #204]	@ (800aeb4 <_printf_i+0x23c>)
 800ade8:	2778      	movs	r7, #120	@ 0x78
 800adea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800adee:	6823      	ldr	r3, [r4, #0]
 800adf0:	6831      	ldr	r1, [r6, #0]
 800adf2:	061f      	lsls	r7, r3, #24
 800adf4:	f851 5b04 	ldr.w	r5, [r1], #4
 800adf8:	d402      	bmi.n	800ae00 <_printf_i+0x188>
 800adfa:	065f      	lsls	r7, r3, #25
 800adfc:	bf48      	it	mi
 800adfe:	b2ad      	uxthmi	r5, r5
 800ae00:	6031      	str	r1, [r6, #0]
 800ae02:	07d9      	lsls	r1, r3, #31
 800ae04:	bf44      	itt	mi
 800ae06:	f043 0320 	orrmi.w	r3, r3, #32
 800ae0a:	6023      	strmi	r3, [r4, #0]
 800ae0c:	b11d      	cbz	r5, 800ae16 <_printf_i+0x19e>
 800ae0e:	2310      	movs	r3, #16
 800ae10:	e7ac      	b.n	800ad6c <_printf_i+0xf4>
 800ae12:	4827      	ldr	r0, [pc, #156]	@ (800aeb0 <_printf_i+0x238>)
 800ae14:	e7e9      	b.n	800adea <_printf_i+0x172>
 800ae16:	6823      	ldr	r3, [r4, #0]
 800ae18:	f023 0320 	bic.w	r3, r3, #32
 800ae1c:	6023      	str	r3, [r4, #0]
 800ae1e:	e7f6      	b.n	800ae0e <_printf_i+0x196>
 800ae20:	4616      	mov	r6, r2
 800ae22:	e7bd      	b.n	800ada0 <_printf_i+0x128>
 800ae24:	6833      	ldr	r3, [r6, #0]
 800ae26:	6825      	ldr	r5, [r4, #0]
 800ae28:	6961      	ldr	r1, [r4, #20]
 800ae2a:	1d18      	adds	r0, r3, #4
 800ae2c:	6030      	str	r0, [r6, #0]
 800ae2e:	062e      	lsls	r6, r5, #24
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	d501      	bpl.n	800ae38 <_printf_i+0x1c0>
 800ae34:	6019      	str	r1, [r3, #0]
 800ae36:	e002      	b.n	800ae3e <_printf_i+0x1c6>
 800ae38:	0668      	lsls	r0, r5, #25
 800ae3a:	d5fb      	bpl.n	800ae34 <_printf_i+0x1bc>
 800ae3c:	8019      	strh	r1, [r3, #0]
 800ae3e:	2300      	movs	r3, #0
 800ae40:	6123      	str	r3, [r4, #16]
 800ae42:	4616      	mov	r6, r2
 800ae44:	e7bc      	b.n	800adc0 <_printf_i+0x148>
 800ae46:	6833      	ldr	r3, [r6, #0]
 800ae48:	1d1a      	adds	r2, r3, #4
 800ae4a:	6032      	str	r2, [r6, #0]
 800ae4c:	681e      	ldr	r6, [r3, #0]
 800ae4e:	6862      	ldr	r2, [r4, #4]
 800ae50:	2100      	movs	r1, #0
 800ae52:	4630      	mov	r0, r6
 800ae54:	f7f5 f9c4 	bl	80001e0 <memchr>
 800ae58:	b108      	cbz	r0, 800ae5e <_printf_i+0x1e6>
 800ae5a:	1b80      	subs	r0, r0, r6
 800ae5c:	6060      	str	r0, [r4, #4]
 800ae5e:	6863      	ldr	r3, [r4, #4]
 800ae60:	6123      	str	r3, [r4, #16]
 800ae62:	2300      	movs	r3, #0
 800ae64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae68:	e7aa      	b.n	800adc0 <_printf_i+0x148>
 800ae6a:	6923      	ldr	r3, [r4, #16]
 800ae6c:	4632      	mov	r2, r6
 800ae6e:	4649      	mov	r1, r9
 800ae70:	4640      	mov	r0, r8
 800ae72:	47d0      	blx	sl
 800ae74:	3001      	adds	r0, #1
 800ae76:	d0ad      	beq.n	800add4 <_printf_i+0x15c>
 800ae78:	6823      	ldr	r3, [r4, #0]
 800ae7a:	079b      	lsls	r3, r3, #30
 800ae7c:	d413      	bmi.n	800aea6 <_printf_i+0x22e>
 800ae7e:	68e0      	ldr	r0, [r4, #12]
 800ae80:	9b03      	ldr	r3, [sp, #12]
 800ae82:	4298      	cmp	r0, r3
 800ae84:	bfb8      	it	lt
 800ae86:	4618      	movlt	r0, r3
 800ae88:	e7a6      	b.n	800add8 <_printf_i+0x160>
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	4632      	mov	r2, r6
 800ae8e:	4649      	mov	r1, r9
 800ae90:	4640      	mov	r0, r8
 800ae92:	47d0      	blx	sl
 800ae94:	3001      	adds	r0, #1
 800ae96:	d09d      	beq.n	800add4 <_printf_i+0x15c>
 800ae98:	3501      	adds	r5, #1
 800ae9a:	68e3      	ldr	r3, [r4, #12]
 800ae9c:	9903      	ldr	r1, [sp, #12]
 800ae9e:	1a5b      	subs	r3, r3, r1
 800aea0:	42ab      	cmp	r3, r5
 800aea2:	dcf2      	bgt.n	800ae8a <_printf_i+0x212>
 800aea4:	e7eb      	b.n	800ae7e <_printf_i+0x206>
 800aea6:	2500      	movs	r5, #0
 800aea8:	f104 0619 	add.w	r6, r4, #25
 800aeac:	e7f5      	b.n	800ae9a <_printf_i+0x222>
 800aeae:	bf00      	nop
 800aeb0:	0800f01e 	.word	0x0800f01e
 800aeb4:	0800f02f 	.word	0x0800f02f

0800aeb8 <_scanf_float>:
 800aeb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aebc:	b087      	sub	sp, #28
 800aebe:	4617      	mov	r7, r2
 800aec0:	9303      	str	r3, [sp, #12]
 800aec2:	688b      	ldr	r3, [r1, #8]
 800aec4:	1e5a      	subs	r2, r3, #1
 800aec6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800aeca:	bf81      	itttt	hi
 800aecc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800aed0:	eb03 0b05 	addhi.w	fp, r3, r5
 800aed4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800aed8:	608b      	strhi	r3, [r1, #8]
 800aeda:	680b      	ldr	r3, [r1, #0]
 800aedc:	460a      	mov	r2, r1
 800aede:	f04f 0500 	mov.w	r5, #0
 800aee2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800aee6:	f842 3b1c 	str.w	r3, [r2], #28
 800aeea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aeee:	4680      	mov	r8, r0
 800aef0:	460c      	mov	r4, r1
 800aef2:	bf98      	it	ls
 800aef4:	f04f 0b00 	movls.w	fp, #0
 800aef8:	9201      	str	r2, [sp, #4]
 800aefa:	4616      	mov	r6, r2
 800aefc:	46aa      	mov	sl, r5
 800aefe:	46a9      	mov	r9, r5
 800af00:	9502      	str	r5, [sp, #8]
 800af02:	68a2      	ldr	r2, [r4, #8]
 800af04:	b152      	cbz	r2, 800af1c <_scanf_float+0x64>
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	2b4e      	cmp	r3, #78	@ 0x4e
 800af0c:	d864      	bhi.n	800afd8 <_scanf_float+0x120>
 800af0e:	2b40      	cmp	r3, #64	@ 0x40
 800af10:	d83c      	bhi.n	800af8c <_scanf_float+0xd4>
 800af12:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800af16:	b2c8      	uxtb	r0, r1
 800af18:	280e      	cmp	r0, #14
 800af1a:	d93a      	bls.n	800af92 <_scanf_float+0xda>
 800af1c:	f1b9 0f00 	cmp.w	r9, #0
 800af20:	d003      	beq.n	800af2a <_scanf_float+0x72>
 800af22:	6823      	ldr	r3, [r4, #0]
 800af24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800af28:	6023      	str	r3, [r4, #0]
 800af2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af2e:	f1ba 0f01 	cmp.w	sl, #1
 800af32:	f200 8117 	bhi.w	800b164 <_scanf_float+0x2ac>
 800af36:	9b01      	ldr	r3, [sp, #4]
 800af38:	429e      	cmp	r6, r3
 800af3a:	f200 8108 	bhi.w	800b14e <_scanf_float+0x296>
 800af3e:	2001      	movs	r0, #1
 800af40:	b007      	add	sp, #28
 800af42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af46:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800af4a:	2a0d      	cmp	r2, #13
 800af4c:	d8e6      	bhi.n	800af1c <_scanf_float+0x64>
 800af4e:	a101      	add	r1, pc, #4	@ (adr r1, 800af54 <_scanf_float+0x9c>)
 800af50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800af54:	0800b09b 	.word	0x0800b09b
 800af58:	0800af1d 	.word	0x0800af1d
 800af5c:	0800af1d 	.word	0x0800af1d
 800af60:	0800af1d 	.word	0x0800af1d
 800af64:	0800b0fb 	.word	0x0800b0fb
 800af68:	0800b0d3 	.word	0x0800b0d3
 800af6c:	0800af1d 	.word	0x0800af1d
 800af70:	0800af1d 	.word	0x0800af1d
 800af74:	0800b0a9 	.word	0x0800b0a9
 800af78:	0800af1d 	.word	0x0800af1d
 800af7c:	0800af1d 	.word	0x0800af1d
 800af80:	0800af1d 	.word	0x0800af1d
 800af84:	0800af1d 	.word	0x0800af1d
 800af88:	0800b061 	.word	0x0800b061
 800af8c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800af90:	e7db      	b.n	800af4a <_scanf_float+0x92>
 800af92:	290e      	cmp	r1, #14
 800af94:	d8c2      	bhi.n	800af1c <_scanf_float+0x64>
 800af96:	a001      	add	r0, pc, #4	@ (adr r0, 800af9c <_scanf_float+0xe4>)
 800af98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800af9c:	0800b051 	.word	0x0800b051
 800afa0:	0800af1d 	.word	0x0800af1d
 800afa4:	0800b051 	.word	0x0800b051
 800afa8:	0800b0e7 	.word	0x0800b0e7
 800afac:	0800af1d 	.word	0x0800af1d
 800afb0:	0800aff9 	.word	0x0800aff9
 800afb4:	0800b037 	.word	0x0800b037
 800afb8:	0800b037 	.word	0x0800b037
 800afbc:	0800b037 	.word	0x0800b037
 800afc0:	0800b037 	.word	0x0800b037
 800afc4:	0800b037 	.word	0x0800b037
 800afc8:	0800b037 	.word	0x0800b037
 800afcc:	0800b037 	.word	0x0800b037
 800afd0:	0800b037 	.word	0x0800b037
 800afd4:	0800b037 	.word	0x0800b037
 800afd8:	2b6e      	cmp	r3, #110	@ 0x6e
 800afda:	d809      	bhi.n	800aff0 <_scanf_float+0x138>
 800afdc:	2b60      	cmp	r3, #96	@ 0x60
 800afde:	d8b2      	bhi.n	800af46 <_scanf_float+0x8e>
 800afe0:	2b54      	cmp	r3, #84	@ 0x54
 800afe2:	d07b      	beq.n	800b0dc <_scanf_float+0x224>
 800afe4:	2b59      	cmp	r3, #89	@ 0x59
 800afe6:	d199      	bne.n	800af1c <_scanf_float+0x64>
 800afe8:	2d07      	cmp	r5, #7
 800afea:	d197      	bne.n	800af1c <_scanf_float+0x64>
 800afec:	2508      	movs	r5, #8
 800afee:	e02c      	b.n	800b04a <_scanf_float+0x192>
 800aff0:	2b74      	cmp	r3, #116	@ 0x74
 800aff2:	d073      	beq.n	800b0dc <_scanf_float+0x224>
 800aff4:	2b79      	cmp	r3, #121	@ 0x79
 800aff6:	e7f6      	b.n	800afe6 <_scanf_float+0x12e>
 800aff8:	6821      	ldr	r1, [r4, #0]
 800affa:	05c8      	lsls	r0, r1, #23
 800affc:	d51b      	bpl.n	800b036 <_scanf_float+0x17e>
 800affe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b002:	6021      	str	r1, [r4, #0]
 800b004:	f109 0901 	add.w	r9, r9, #1
 800b008:	f1bb 0f00 	cmp.w	fp, #0
 800b00c:	d003      	beq.n	800b016 <_scanf_float+0x15e>
 800b00e:	3201      	adds	r2, #1
 800b010:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b014:	60a2      	str	r2, [r4, #8]
 800b016:	68a3      	ldr	r3, [r4, #8]
 800b018:	3b01      	subs	r3, #1
 800b01a:	60a3      	str	r3, [r4, #8]
 800b01c:	6923      	ldr	r3, [r4, #16]
 800b01e:	3301      	adds	r3, #1
 800b020:	6123      	str	r3, [r4, #16]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	3b01      	subs	r3, #1
 800b026:	2b00      	cmp	r3, #0
 800b028:	607b      	str	r3, [r7, #4]
 800b02a:	f340 8087 	ble.w	800b13c <_scanf_float+0x284>
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	3301      	adds	r3, #1
 800b032:	603b      	str	r3, [r7, #0]
 800b034:	e765      	b.n	800af02 <_scanf_float+0x4a>
 800b036:	eb1a 0105 	adds.w	r1, sl, r5
 800b03a:	f47f af6f 	bne.w	800af1c <_scanf_float+0x64>
 800b03e:	6822      	ldr	r2, [r4, #0]
 800b040:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b044:	6022      	str	r2, [r4, #0]
 800b046:	460d      	mov	r5, r1
 800b048:	468a      	mov	sl, r1
 800b04a:	f806 3b01 	strb.w	r3, [r6], #1
 800b04e:	e7e2      	b.n	800b016 <_scanf_float+0x15e>
 800b050:	6822      	ldr	r2, [r4, #0]
 800b052:	0610      	lsls	r0, r2, #24
 800b054:	f57f af62 	bpl.w	800af1c <_scanf_float+0x64>
 800b058:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b05c:	6022      	str	r2, [r4, #0]
 800b05e:	e7f4      	b.n	800b04a <_scanf_float+0x192>
 800b060:	f1ba 0f00 	cmp.w	sl, #0
 800b064:	d10e      	bne.n	800b084 <_scanf_float+0x1cc>
 800b066:	f1b9 0f00 	cmp.w	r9, #0
 800b06a:	d10e      	bne.n	800b08a <_scanf_float+0x1d2>
 800b06c:	6822      	ldr	r2, [r4, #0]
 800b06e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b072:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b076:	d108      	bne.n	800b08a <_scanf_float+0x1d2>
 800b078:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b07c:	6022      	str	r2, [r4, #0]
 800b07e:	f04f 0a01 	mov.w	sl, #1
 800b082:	e7e2      	b.n	800b04a <_scanf_float+0x192>
 800b084:	f1ba 0f02 	cmp.w	sl, #2
 800b088:	d055      	beq.n	800b136 <_scanf_float+0x27e>
 800b08a:	2d01      	cmp	r5, #1
 800b08c:	d002      	beq.n	800b094 <_scanf_float+0x1dc>
 800b08e:	2d04      	cmp	r5, #4
 800b090:	f47f af44 	bne.w	800af1c <_scanf_float+0x64>
 800b094:	3501      	adds	r5, #1
 800b096:	b2ed      	uxtb	r5, r5
 800b098:	e7d7      	b.n	800b04a <_scanf_float+0x192>
 800b09a:	f1ba 0f01 	cmp.w	sl, #1
 800b09e:	f47f af3d 	bne.w	800af1c <_scanf_float+0x64>
 800b0a2:	f04f 0a02 	mov.w	sl, #2
 800b0a6:	e7d0      	b.n	800b04a <_scanf_float+0x192>
 800b0a8:	b97d      	cbnz	r5, 800b0ca <_scanf_float+0x212>
 800b0aa:	f1b9 0f00 	cmp.w	r9, #0
 800b0ae:	f47f af38 	bne.w	800af22 <_scanf_float+0x6a>
 800b0b2:	6822      	ldr	r2, [r4, #0]
 800b0b4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b0b8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b0bc:	f040 8108 	bne.w	800b2d0 <_scanf_float+0x418>
 800b0c0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b0c4:	6022      	str	r2, [r4, #0]
 800b0c6:	2501      	movs	r5, #1
 800b0c8:	e7bf      	b.n	800b04a <_scanf_float+0x192>
 800b0ca:	2d03      	cmp	r5, #3
 800b0cc:	d0e2      	beq.n	800b094 <_scanf_float+0x1dc>
 800b0ce:	2d05      	cmp	r5, #5
 800b0d0:	e7de      	b.n	800b090 <_scanf_float+0x1d8>
 800b0d2:	2d02      	cmp	r5, #2
 800b0d4:	f47f af22 	bne.w	800af1c <_scanf_float+0x64>
 800b0d8:	2503      	movs	r5, #3
 800b0da:	e7b6      	b.n	800b04a <_scanf_float+0x192>
 800b0dc:	2d06      	cmp	r5, #6
 800b0de:	f47f af1d 	bne.w	800af1c <_scanf_float+0x64>
 800b0e2:	2507      	movs	r5, #7
 800b0e4:	e7b1      	b.n	800b04a <_scanf_float+0x192>
 800b0e6:	6822      	ldr	r2, [r4, #0]
 800b0e8:	0591      	lsls	r1, r2, #22
 800b0ea:	f57f af17 	bpl.w	800af1c <_scanf_float+0x64>
 800b0ee:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b0f2:	6022      	str	r2, [r4, #0]
 800b0f4:	f8cd 9008 	str.w	r9, [sp, #8]
 800b0f8:	e7a7      	b.n	800b04a <_scanf_float+0x192>
 800b0fa:	6822      	ldr	r2, [r4, #0]
 800b0fc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b100:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b104:	d006      	beq.n	800b114 <_scanf_float+0x25c>
 800b106:	0550      	lsls	r0, r2, #21
 800b108:	f57f af08 	bpl.w	800af1c <_scanf_float+0x64>
 800b10c:	f1b9 0f00 	cmp.w	r9, #0
 800b110:	f000 80de 	beq.w	800b2d0 <_scanf_float+0x418>
 800b114:	0591      	lsls	r1, r2, #22
 800b116:	bf58      	it	pl
 800b118:	9902      	ldrpl	r1, [sp, #8]
 800b11a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b11e:	bf58      	it	pl
 800b120:	eba9 0101 	subpl.w	r1, r9, r1
 800b124:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b128:	bf58      	it	pl
 800b12a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b12e:	6022      	str	r2, [r4, #0]
 800b130:	f04f 0900 	mov.w	r9, #0
 800b134:	e789      	b.n	800b04a <_scanf_float+0x192>
 800b136:	f04f 0a03 	mov.w	sl, #3
 800b13a:	e786      	b.n	800b04a <_scanf_float+0x192>
 800b13c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b140:	4639      	mov	r1, r7
 800b142:	4640      	mov	r0, r8
 800b144:	4798      	blx	r3
 800b146:	2800      	cmp	r0, #0
 800b148:	f43f aedb 	beq.w	800af02 <_scanf_float+0x4a>
 800b14c:	e6e6      	b.n	800af1c <_scanf_float+0x64>
 800b14e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b152:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b156:	463a      	mov	r2, r7
 800b158:	4640      	mov	r0, r8
 800b15a:	4798      	blx	r3
 800b15c:	6923      	ldr	r3, [r4, #16]
 800b15e:	3b01      	subs	r3, #1
 800b160:	6123      	str	r3, [r4, #16]
 800b162:	e6e8      	b.n	800af36 <_scanf_float+0x7e>
 800b164:	1e6b      	subs	r3, r5, #1
 800b166:	2b06      	cmp	r3, #6
 800b168:	d824      	bhi.n	800b1b4 <_scanf_float+0x2fc>
 800b16a:	2d02      	cmp	r5, #2
 800b16c:	d836      	bhi.n	800b1dc <_scanf_float+0x324>
 800b16e:	9b01      	ldr	r3, [sp, #4]
 800b170:	429e      	cmp	r6, r3
 800b172:	f67f aee4 	bls.w	800af3e <_scanf_float+0x86>
 800b176:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b17a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b17e:	463a      	mov	r2, r7
 800b180:	4640      	mov	r0, r8
 800b182:	4798      	blx	r3
 800b184:	6923      	ldr	r3, [r4, #16]
 800b186:	3b01      	subs	r3, #1
 800b188:	6123      	str	r3, [r4, #16]
 800b18a:	e7f0      	b.n	800b16e <_scanf_float+0x2b6>
 800b18c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b190:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b194:	463a      	mov	r2, r7
 800b196:	4640      	mov	r0, r8
 800b198:	4798      	blx	r3
 800b19a:	6923      	ldr	r3, [r4, #16]
 800b19c:	3b01      	subs	r3, #1
 800b19e:	6123      	str	r3, [r4, #16]
 800b1a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1a4:	fa5f fa8a 	uxtb.w	sl, sl
 800b1a8:	f1ba 0f02 	cmp.w	sl, #2
 800b1ac:	d1ee      	bne.n	800b18c <_scanf_float+0x2d4>
 800b1ae:	3d03      	subs	r5, #3
 800b1b0:	b2ed      	uxtb	r5, r5
 800b1b2:	1b76      	subs	r6, r6, r5
 800b1b4:	6823      	ldr	r3, [r4, #0]
 800b1b6:	05da      	lsls	r2, r3, #23
 800b1b8:	d530      	bpl.n	800b21c <_scanf_float+0x364>
 800b1ba:	055b      	lsls	r3, r3, #21
 800b1bc:	d511      	bpl.n	800b1e2 <_scanf_float+0x32a>
 800b1be:	9b01      	ldr	r3, [sp, #4]
 800b1c0:	429e      	cmp	r6, r3
 800b1c2:	f67f aebc 	bls.w	800af3e <_scanf_float+0x86>
 800b1c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b1ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b1ce:	463a      	mov	r2, r7
 800b1d0:	4640      	mov	r0, r8
 800b1d2:	4798      	blx	r3
 800b1d4:	6923      	ldr	r3, [r4, #16]
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	6123      	str	r3, [r4, #16]
 800b1da:	e7f0      	b.n	800b1be <_scanf_float+0x306>
 800b1dc:	46aa      	mov	sl, r5
 800b1de:	46b3      	mov	fp, r6
 800b1e0:	e7de      	b.n	800b1a0 <_scanf_float+0x2e8>
 800b1e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b1e6:	6923      	ldr	r3, [r4, #16]
 800b1e8:	2965      	cmp	r1, #101	@ 0x65
 800b1ea:	f103 33ff 	add.w	r3, r3, #4294967295
 800b1ee:	f106 35ff 	add.w	r5, r6, #4294967295
 800b1f2:	6123      	str	r3, [r4, #16]
 800b1f4:	d00c      	beq.n	800b210 <_scanf_float+0x358>
 800b1f6:	2945      	cmp	r1, #69	@ 0x45
 800b1f8:	d00a      	beq.n	800b210 <_scanf_float+0x358>
 800b1fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b1fe:	463a      	mov	r2, r7
 800b200:	4640      	mov	r0, r8
 800b202:	4798      	blx	r3
 800b204:	6923      	ldr	r3, [r4, #16]
 800b206:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b20a:	3b01      	subs	r3, #1
 800b20c:	1eb5      	subs	r5, r6, #2
 800b20e:	6123      	str	r3, [r4, #16]
 800b210:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b214:	463a      	mov	r2, r7
 800b216:	4640      	mov	r0, r8
 800b218:	4798      	blx	r3
 800b21a:	462e      	mov	r6, r5
 800b21c:	6822      	ldr	r2, [r4, #0]
 800b21e:	f012 0210 	ands.w	r2, r2, #16
 800b222:	d001      	beq.n	800b228 <_scanf_float+0x370>
 800b224:	2000      	movs	r0, #0
 800b226:	e68b      	b.n	800af40 <_scanf_float+0x88>
 800b228:	7032      	strb	r2, [r6, #0]
 800b22a:	6823      	ldr	r3, [r4, #0]
 800b22c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b234:	d11c      	bne.n	800b270 <_scanf_float+0x3b8>
 800b236:	9b02      	ldr	r3, [sp, #8]
 800b238:	454b      	cmp	r3, r9
 800b23a:	eba3 0209 	sub.w	r2, r3, r9
 800b23e:	d123      	bne.n	800b288 <_scanf_float+0x3d0>
 800b240:	9901      	ldr	r1, [sp, #4]
 800b242:	2200      	movs	r2, #0
 800b244:	4640      	mov	r0, r8
 800b246:	f002 fc5b 	bl	800db00 <_strtod_r>
 800b24a:	9b03      	ldr	r3, [sp, #12]
 800b24c:	6821      	ldr	r1, [r4, #0]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f011 0f02 	tst.w	r1, #2
 800b254:	ec57 6b10 	vmov	r6, r7, d0
 800b258:	f103 0204 	add.w	r2, r3, #4
 800b25c:	d01f      	beq.n	800b29e <_scanf_float+0x3e6>
 800b25e:	9903      	ldr	r1, [sp, #12]
 800b260:	600a      	str	r2, [r1, #0]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	e9c3 6700 	strd	r6, r7, [r3]
 800b268:	68e3      	ldr	r3, [r4, #12]
 800b26a:	3301      	adds	r3, #1
 800b26c:	60e3      	str	r3, [r4, #12]
 800b26e:	e7d9      	b.n	800b224 <_scanf_float+0x36c>
 800b270:	9b04      	ldr	r3, [sp, #16]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d0e4      	beq.n	800b240 <_scanf_float+0x388>
 800b276:	9905      	ldr	r1, [sp, #20]
 800b278:	230a      	movs	r3, #10
 800b27a:	3101      	adds	r1, #1
 800b27c:	4640      	mov	r0, r8
 800b27e:	f002 fcbf 	bl	800dc00 <_strtol_r>
 800b282:	9b04      	ldr	r3, [sp, #16]
 800b284:	9e05      	ldr	r6, [sp, #20]
 800b286:	1ac2      	subs	r2, r0, r3
 800b288:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b28c:	429e      	cmp	r6, r3
 800b28e:	bf28      	it	cs
 800b290:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b294:	4910      	ldr	r1, [pc, #64]	@ (800b2d8 <_scanf_float+0x420>)
 800b296:	4630      	mov	r0, r6
 800b298:	f000 f8e4 	bl	800b464 <siprintf>
 800b29c:	e7d0      	b.n	800b240 <_scanf_float+0x388>
 800b29e:	f011 0f04 	tst.w	r1, #4
 800b2a2:	9903      	ldr	r1, [sp, #12]
 800b2a4:	600a      	str	r2, [r1, #0]
 800b2a6:	d1dc      	bne.n	800b262 <_scanf_float+0x3aa>
 800b2a8:	681d      	ldr	r5, [r3, #0]
 800b2aa:	4632      	mov	r2, r6
 800b2ac:	463b      	mov	r3, r7
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	4639      	mov	r1, r7
 800b2b2:	f7f5 fc43 	bl	8000b3c <__aeabi_dcmpun>
 800b2b6:	b128      	cbz	r0, 800b2c4 <_scanf_float+0x40c>
 800b2b8:	4808      	ldr	r0, [pc, #32]	@ (800b2dc <_scanf_float+0x424>)
 800b2ba:	f000 fa1b 	bl	800b6f4 <nanf>
 800b2be:	ed85 0a00 	vstr	s0, [r5]
 800b2c2:	e7d1      	b.n	800b268 <_scanf_float+0x3b0>
 800b2c4:	4630      	mov	r0, r6
 800b2c6:	4639      	mov	r1, r7
 800b2c8:	f7f5 fc96 	bl	8000bf8 <__aeabi_d2f>
 800b2cc:	6028      	str	r0, [r5, #0]
 800b2ce:	e7cb      	b.n	800b268 <_scanf_float+0x3b0>
 800b2d0:	f04f 0900 	mov.w	r9, #0
 800b2d4:	e629      	b.n	800af2a <_scanf_float+0x72>
 800b2d6:	bf00      	nop
 800b2d8:	0800f040 	.word	0x0800f040
 800b2dc:	0800f3d5 	.word	0x0800f3d5

0800b2e0 <std>:
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	b510      	push	{r4, lr}
 800b2e4:	4604      	mov	r4, r0
 800b2e6:	e9c0 3300 	strd	r3, r3, [r0]
 800b2ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b2ee:	6083      	str	r3, [r0, #8]
 800b2f0:	8181      	strh	r1, [r0, #12]
 800b2f2:	6643      	str	r3, [r0, #100]	@ 0x64
 800b2f4:	81c2      	strh	r2, [r0, #14]
 800b2f6:	6183      	str	r3, [r0, #24]
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	2208      	movs	r2, #8
 800b2fc:	305c      	adds	r0, #92	@ 0x5c
 800b2fe:	f000 f914 	bl	800b52a <memset>
 800b302:	4b0d      	ldr	r3, [pc, #52]	@ (800b338 <std+0x58>)
 800b304:	6263      	str	r3, [r4, #36]	@ 0x24
 800b306:	4b0d      	ldr	r3, [pc, #52]	@ (800b33c <std+0x5c>)
 800b308:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b30a:	4b0d      	ldr	r3, [pc, #52]	@ (800b340 <std+0x60>)
 800b30c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b30e:	4b0d      	ldr	r3, [pc, #52]	@ (800b344 <std+0x64>)
 800b310:	6323      	str	r3, [r4, #48]	@ 0x30
 800b312:	4b0d      	ldr	r3, [pc, #52]	@ (800b348 <std+0x68>)
 800b314:	6224      	str	r4, [r4, #32]
 800b316:	429c      	cmp	r4, r3
 800b318:	d006      	beq.n	800b328 <std+0x48>
 800b31a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b31e:	4294      	cmp	r4, r2
 800b320:	d002      	beq.n	800b328 <std+0x48>
 800b322:	33d0      	adds	r3, #208	@ 0xd0
 800b324:	429c      	cmp	r4, r3
 800b326:	d105      	bne.n	800b334 <std+0x54>
 800b328:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b32c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b330:	f000 b9ce 	b.w	800b6d0 <__retarget_lock_init_recursive>
 800b334:	bd10      	pop	{r4, pc}
 800b336:	bf00      	nop
 800b338:	0800b4a5 	.word	0x0800b4a5
 800b33c:	0800b4c7 	.word	0x0800b4c7
 800b340:	0800b4ff 	.word	0x0800b4ff
 800b344:	0800b523 	.word	0x0800b523
 800b348:	20004a10 	.word	0x20004a10

0800b34c <stdio_exit_handler>:
 800b34c:	4a02      	ldr	r2, [pc, #8]	@ (800b358 <stdio_exit_handler+0xc>)
 800b34e:	4903      	ldr	r1, [pc, #12]	@ (800b35c <stdio_exit_handler+0x10>)
 800b350:	4803      	ldr	r0, [pc, #12]	@ (800b360 <stdio_exit_handler+0x14>)
 800b352:	f000 b869 	b.w	800b428 <_fwalk_sglue>
 800b356:	bf00      	nop
 800b358:	20000024 	.word	0x20000024
 800b35c:	0800dfbd 	.word	0x0800dfbd
 800b360:	20000034 	.word	0x20000034

0800b364 <cleanup_stdio>:
 800b364:	6841      	ldr	r1, [r0, #4]
 800b366:	4b0c      	ldr	r3, [pc, #48]	@ (800b398 <cleanup_stdio+0x34>)
 800b368:	4299      	cmp	r1, r3
 800b36a:	b510      	push	{r4, lr}
 800b36c:	4604      	mov	r4, r0
 800b36e:	d001      	beq.n	800b374 <cleanup_stdio+0x10>
 800b370:	f002 fe24 	bl	800dfbc <_fflush_r>
 800b374:	68a1      	ldr	r1, [r4, #8]
 800b376:	4b09      	ldr	r3, [pc, #36]	@ (800b39c <cleanup_stdio+0x38>)
 800b378:	4299      	cmp	r1, r3
 800b37a:	d002      	beq.n	800b382 <cleanup_stdio+0x1e>
 800b37c:	4620      	mov	r0, r4
 800b37e:	f002 fe1d 	bl	800dfbc <_fflush_r>
 800b382:	68e1      	ldr	r1, [r4, #12]
 800b384:	4b06      	ldr	r3, [pc, #24]	@ (800b3a0 <cleanup_stdio+0x3c>)
 800b386:	4299      	cmp	r1, r3
 800b388:	d004      	beq.n	800b394 <cleanup_stdio+0x30>
 800b38a:	4620      	mov	r0, r4
 800b38c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b390:	f002 be14 	b.w	800dfbc <_fflush_r>
 800b394:	bd10      	pop	{r4, pc}
 800b396:	bf00      	nop
 800b398:	20004a10 	.word	0x20004a10
 800b39c:	20004a78 	.word	0x20004a78
 800b3a0:	20004ae0 	.word	0x20004ae0

0800b3a4 <global_stdio_init.part.0>:
 800b3a4:	b510      	push	{r4, lr}
 800b3a6:	4b0b      	ldr	r3, [pc, #44]	@ (800b3d4 <global_stdio_init.part.0+0x30>)
 800b3a8:	4c0b      	ldr	r4, [pc, #44]	@ (800b3d8 <global_stdio_init.part.0+0x34>)
 800b3aa:	4a0c      	ldr	r2, [pc, #48]	@ (800b3dc <global_stdio_init.part.0+0x38>)
 800b3ac:	601a      	str	r2, [r3, #0]
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	2104      	movs	r1, #4
 800b3b4:	f7ff ff94 	bl	800b2e0 <std>
 800b3b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b3bc:	2201      	movs	r2, #1
 800b3be:	2109      	movs	r1, #9
 800b3c0:	f7ff ff8e 	bl	800b2e0 <std>
 800b3c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b3c8:	2202      	movs	r2, #2
 800b3ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3ce:	2112      	movs	r1, #18
 800b3d0:	f7ff bf86 	b.w	800b2e0 <std>
 800b3d4:	20004b48 	.word	0x20004b48
 800b3d8:	20004a10 	.word	0x20004a10
 800b3dc:	0800b34d 	.word	0x0800b34d

0800b3e0 <__sfp_lock_acquire>:
 800b3e0:	4801      	ldr	r0, [pc, #4]	@ (800b3e8 <__sfp_lock_acquire+0x8>)
 800b3e2:	f000 b976 	b.w	800b6d2 <__retarget_lock_acquire_recursive>
 800b3e6:	bf00      	nop
 800b3e8:	20004b51 	.word	0x20004b51

0800b3ec <__sfp_lock_release>:
 800b3ec:	4801      	ldr	r0, [pc, #4]	@ (800b3f4 <__sfp_lock_release+0x8>)
 800b3ee:	f000 b971 	b.w	800b6d4 <__retarget_lock_release_recursive>
 800b3f2:	bf00      	nop
 800b3f4:	20004b51 	.word	0x20004b51

0800b3f8 <__sinit>:
 800b3f8:	b510      	push	{r4, lr}
 800b3fa:	4604      	mov	r4, r0
 800b3fc:	f7ff fff0 	bl	800b3e0 <__sfp_lock_acquire>
 800b400:	6a23      	ldr	r3, [r4, #32]
 800b402:	b11b      	cbz	r3, 800b40c <__sinit+0x14>
 800b404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b408:	f7ff bff0 	b.w	800b3ec <__sfp_lock_release>
 800b40c:	4b04      	ldr	r3, [pc, #16]	@ (800b420 <__sinit+0x28>)
 800b40e:	6223      	str	r3, [r4, #32]
 800b410:	4b04      	ldr	r3, [pc, #16]	@ (800b424 <__sinit+0x2c>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d1f5      	bne.n	800b404 <__sinit+0xc>
 800b418:	f7ff ffc4 	bl	800b3a4 <global_stdio_init.part.0>
 800b41c:	e7f2      	b.n	800b404 <__sinit+0xc>
 800b41e:	bf00      	nop
 800b420:	0800b365 	.word	0x0800b365
 800b424:	20004b48 	.word	0x20004b48

0800b428 <_fwalk_sglue>:
 800b428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b42c:	4607      	mov	r7, r0
 800b42e:	4688      	mov	r8, r1
 800b430:	4614      	mov	r4, r2
 800b432:	2600      	movs	r6, #0
 800b434:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b438:	f1b9 0901 	subs.w	r9, r9, #1
 800b43c:	d505      	bpl.n	800b44a <_fwalk_sglue+0x22>
 800b43e:	6824      	ldr	r4, [r4, #0]
 800b440:	2c00      	cmp	r4, #0
 800b442:	d1f7      	bne.n	800b434 <_fwalk_sglue+0xc>
 800b444:	4630      	mov	r0, r6
 800b446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b44a:	89ab      	ldrh	r3, [r5, #12]
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	d907      	bls.n	800b460 <_fwalk_sglue+0x38>
 800b450:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b454:	3301      	adds	r3, #1
 800b456:	d003      	beq.n	800b460 <_fwalk_sglue+0x38>
 800b458:	4629      	mov	r1, r5
 800b45a:	4638      	mov	r0, r7
 800b45c:	47c0      	blx	r8
 800b45e:	4306      	orrs	r6, r0
 800b460:	3568      	adds	r5, #104	@ 0x68
 800b462:	e7e9      	b.n	800b438 <_fwalk_sglue+0x10>

0800b464 <siprintf>:
 800b464:	b40e      	push	{r1, r2, r3}
 800b466:	b500      	push	{lr}
 800b468:	b09c      	sub	sp, #112	@ 0x70
 800b46a:	ab1d      	add	r3, sp, #116	@ 0x74
 800b46c:	9002      	str	r0, [sp, #8]
 800b46e:	9006      	str	r0, [sp, #24]
 800b470:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b474:	4809      	ldr	r0, [pc, #36]	@ (800b49c <siprintf+0x38>)
 800b476:	9107      	str	r1, [sp, #28]
 800b478:	9104      	str	r1, [sp, #16]
 800b47a:	4909      	ldr	r1, [pc, #36]	@ (800b4a0 <siprintf+0x3c>)
 800b47c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b480:	9105      	str	r1, [sp, #20]
 800b482:	6800      	ldr	r0, [r0, #0]
 800b484:	9301      	str	r3, [sp, #4]
 800b486:	a902      	add	r1, sp, #8
 800b488:	f002 fc18 	bl	800dcbc <_svfiprintf_r>
 800b48c:	9b02      	ldr	r3, [sp, #8]
 800b48e:	2200      	movs	r2, #0
 800b490:	701a      	strb	r2, [r3, #0]
 800b492:	b01c      	add	sp, #112	@ 0x70
 800b494:	f85d eb04 	ldr.w	lr, [sp], #4
 800b498:	b003      	add	sp, #12
 800b49a:	4770      	bx	lr
 800b49c:	20000030 	.word	0x20000030
 800b4a0:	ffff0208 	.word	0xffff0208

0800b4a4 <__sread>:
 800b4a4:	b510      	push	{r4, lr}
 800b4a6:	460c      	mov	r4, r1
 800b4a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ac:	f000 f8c2 	bl	800b634 <_read_r>
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	bfab      	itete	ge
 800b4b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b4b6:	89a3      	ldrhlt	r3, [r4, #12]
 800b4b8:	181b      	addge	r3, r3, r0
 800b4ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b4be:	bfac      	ite	ge
 800b4c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b4c2:	81a3      	strhlt	r3, [r4, #12]
 800b4c4:	bd10      	pop	{r4, pc}

0800b4c6 <__swrite>:
 800b4c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ca:	461f      	mov	r7, r3
 800b4cc:	898b      	ldrh	r3, [r1, #12]
 800b4ce:	05db      	lsls	r3, r3, #23
 800b4d0:	4605      	mov	r5, r0
 800b4d2:	460c      	mov	r4, r1
 800b4d4:	4616      	mov	r6, r2
 800b4d6:	d505      	bpl.n	800b4e4 <__swrite+0x1e>
 800b4d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4dc:	2302      	movs	r3, #2
 800b4de:	2200      	movs	r2, #0
 800b4e0:	f000 f896 	bl	800b610 <_lseek_r>
 800b4e4:	89a3      	ldrh	r3, [r4, #12]
 800b4e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b4ee:	81a3      	strh	r3, [r4, #12]
 800b4f0:	4632      	mov	r2, r6
 800b4f2:	463b      	mov	r3, r7
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4fa:	f000 b8ad 	b.w	800b658 <_write_r>

0800b4fe <__sseek>:
 800b4fe:	b510      	push	{r4, lr}
 800b500:	460c      	mov	r4, r1
 800b502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b506:	f000 f883 	bl	800b610 <_lseek_r>
 800b50a:	1c43      	adds	r3, r0, #1
 800b50c:	89a3      	ldrh	r3, [r4, #12]
 800b50e:	bf15      	itete	ne
 800b510:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b512:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b516:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b51a:	81a3      	strheq	r3, [r4, #12]
 800b51c:	bf18      	it	ne
 800b51e:	81a3      	strhne	r3, [r4, #12]
 800b520:	bd10      	pop	{r4, pc}

0800b522 <__sclose>:
 800b522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b526:	f000 b80d 	b.w	800b544 <_close_r>

0800b52a <memset>:
 800b52a:	4402      	add	r2, r0
 800b52c:	4603      	mov	r3, r0
 800b52e:	4293      	cmp	r3, r2
 800b530:	d100      	bne.n	800b534 <memset+0xa>
 800b532:	4770      	bx	lr
 800b534:	f803 1b01 	strb.w	r1, [r3], #1
 800b538:	e7f9      	b.n	800b52e <memset+0x4>
	...

0800b53c <_localeconv_r>:
 800b53c:	4800      	ldr	r0, [pc, #0]	@ (800b540 <_localeconv_r+0x4>)
 800b53e:	4770      	bx	lr
 800b540:	20000170 	.word	0x20000170

0800b544 <_close_r>:
 800b544:	b538      	push	{r3, r4, r5, lr}
 800b546:	4d06      	ldr	r5, [pc, #24]	@ (800b560 <_close_r+0x1c>)
 800b548:	2300      	movs	r3, #0
 800b54a:	4604      	mov	r4, r0
 800b54c:	4608      	mov	r0, r1
 800b54e:	602b      	str	r3, [r5, #0]
 800b550:	f7f7 fdda 	bl	8003108 <_close>
 800b554:	1c43      	adds	r3, r0, #1
 800b556:	d102      	bne.n	800b55e <_close_r+0x1a>
 800b558:	682b      	ldr	r3, [r5, #0]
 800b55a:	b103      	cbz	r3, 800b55e <_close_r+0x1a>
 800b55c:	6023      	str	r3, [r4, #0]
 800b55e:	bd38      	pop	{r3, r4, r5, pc}
 800b560:	20004b4c 	.word	0x20004b4c

0800b564 <_reclaim_reent>:
 800b564:	4b29      	ldr	r3, [pc, #164]	@ (800b60c <_reclaim_reent+0xa8>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4283      	cmp	r3, r0
 800b56a:	b570      	push	{r4, r5, r6, lr}
 800b56c:	4604      	mov	r4, r0
 800b56e:	d04b      	beq.n	800b608 <_reclaim_reent+0xa4>
 800b570:	69c3      	ldr	r3, [r0, #28]
 800b572:	b1ab      	cbz	r3, 800b5a0 <_reclaim_reent+0x3c>
 800b574:	68db      	ldr	r3, [r3, #12]
 800b576:	b16b      	cbz	r3, 800b594 <_reclaim_reent+0x30>
 800b578:	2500      	movs	r5, #0
 800b57a:	69e3      	ldr	r3, [r4, #28]
 800b57c:	68db      	ldr	r3, [r3, #12]
 800b57e:	5959      	ldr	r1, [r3, r5]
 800b580:	2900      	cmp	r1, #0
 800b582:	d13b      	bne.n	800b5fc <_reclaim_reent+0x98>
 800b584:	3504      	adds	r5, #4
 800b586:	2d80      	cmp	r5, #128	@ 0x80
 800b588:	d1f7      	bne.n	800b57a <_reclaim_reent+0x16>
 800b58a:	69e3      	ldr	r3, [r4, #28]
 800b58c:	4620      	mov	r0, r4
 800b58e:	68d9      	ldr	r1, [r3, #12]
 800b590:	f000 ff02 	bl	800c398 <_free_r>
 800b594:	69e3      	ldr	r3, [r4, #28]
 800b596:	6819      	ldr	r1, [r3, #0]
 800b598:	b111      	cbz	r1, 800b5a0 <_reclaim_reent+0x3c>
 800b59a:	4620      	mov	r0, r4
 800b59c:	f000 fefc 	bl	800c398 <_free_r>
 800b5a0:	6961      	ldr	r1, [r4, #20]
 800b5a2:	b111      	cbz	r1, 800b5aa <_reclaim_reent+0x46>
 800b5a4:	4620      	mov	r0, r4
 800b5a6:	f000 fef7 	bl	800c398 <_free_r>
 800b5aa:	69e1      	ldr	r1, [r4, #28]
 800b5ac:	b111      	cbz	r1, 800b5b4 <_reclaim_reent+0x50>
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	f000 fef2 	bl	800c398 <_free_r>
 800b5b4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b5b6:	b111      	cbz	r1, 800b5be <_reclaim_reent+0x5a>
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	f000 feed 	bl	800c398 <_free_r>
 800b5be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b5c0:	b111      	cbz	r1, 800b5c8 <_reclaim_reent+0x64>
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	f000 fee8 	bl	800c398 <_free_r>
 800b5c8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b5ca:	b111      	cbz	r1, 800b5d2 <_reclaim_reent+0x6e>
 800b5cc:	4620      	mov	r0, r4
 800b5ce:	f000 fee3 	bl	800c398 <_free_r>
 800b5d2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b5d4:	b111      	cbz	r1, 800b5dc <_reclaim_reent+0x78>
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	f000 fede 	bl	800c398 <_free_r>
 800b5dc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b5de:	b111      	cbz	r1, 800b5e6 <_reclaim_reent+0x82>
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	f000 fed9 	bl	800c398 <_free_r>
 800b5e6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b5e8:	b111      	cbz	r1, 800b5f0 <_reclaim_reent+0x8c>
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	f000 fed4 	bl	800c398 <_free_r>
 800b5f0:	6a23      	ldr	r3, [r4, #32]
 800b5f2:	b14b      	cbz	r3, 800b608 <_reclaim_reent+0xa4>
 800b5f4:	4620      	mov	r0, r4
 800b5f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b5fa:	4718      	bx	r3
 800b5fc:	680e      	ldr	r6, [r1, #0]
 800b5fe:	4620      	mov	r0, r4
 800b600:	f000 feca 	bl	800c398 <_free_r>
 800b604:	4631      	mov	r1, r6
 800b606:	e7bb      	b.n	800b580 <_reclaim_reent+0x1c>
 800b608:	bd70      	pop	{r4, r5, r6, pc}
 800b60a:	bf00      	nop
 800b60c:	20000030 	.word	0x20000030

0800b610 <_lseek_r>:
 800b610:	b538      	push	{r3, r4, r5, lr}
 800b612:	4d07      	ldr	r5, [pc, #28]	@ (800b630 <_lseek_r+0x20>)
 800b614:	4604      	mov	r4, r0
 800b616:	4608      	mov	r0, r1
 800b618:	4611      	mov	r1, r2
 800b61a:	2200      	movs	r2, #0
 800b61c:	602a      	str	r2, [r5, #0]
 800b61e:	461a      	mov	r2, r3
 800b620:	f7f7 fd99 	bl	8003156 <_lseek>
 800b624:	1c43      	adds	r3, r0, #1
 800b626:	d102      	bne.n	800b62e <_lseek_r+0x1e>
 800b628:	682b      	ldr	r3, [r5, #0]
 800b62a:	b103      	cbz	r3, 800b62e <_lseek_r+0x1e>
 800b62c:	6023      	str	r3, [r4, #0]
 800b62e:	bd38      	pop	{r3, r4, r5, pc}
 800b630:	20004b4c 	.word	0x20004b4c

0800b634 <_read_r>:
 800b634:	b538      	push	{r3, r4, r5, lr}
 800b636:	4d07      	ldr	r5, [pc, #28]	@ (800b654 <_read_r+0x20>)
 800b638:	4604      	mov	r4, r0
 800b63a:	4608      	mov	r0, r1
 800b63c:	4611      	mov	r1, r2
 800b63e:	2200      	movs	r2, #0
 800b640:	602a      	str	r2, [r5, #0]
 800b642:	461a      	mov	r2, r3
 800b644:	f7f7 fd27 	bl	8003096 <_read>
 800b648:	1c43      	adds	r3, r0, #1
 800b64a:	d102      	bne.n	800b652 <_read_r+0x1e>
 800b64c:	682b      	ldr	r3, [r5, #0]
 800b64e:	b103      	cbz	r3, 800b652 <_read_r+0x1e>
 800b650:	6023      	str	r3, [r4, #0]
 800b652:	bd38      	pop	{r3, r4, r5, pc}
 800b654:	20004b4c 	.word	0x20004b4c

0800b658 <_write_r>:
 800b658:	b538      	push	{r3, r4, r5, lr}
 800b65a:	4d07      	ldr	r5, [pc, #28]	@ (800b678 <_write_r+0x20>)
 800b65c:	4604      	mov	r4, r0
 800b65e:	4608      	mov	r0, r1
 800b660:	4611      	mov	r1, r2
 800b662:	2200      	movs	r2, #0
 800b664:	602a      	str	r2, [r5, #0]
 800b666:	461a      	mov	r2, r3
 800b668:	f7f7 fd32 	bl	80030d0 <_write>
 800b66c:	1c43      	adds	r3, r0, #1
 800b66e:	d102      	bne.n	800b676 <_write_r+0x1e>
 800b670:	682b      	ldr	r3, [r5, #0]
 800b672:	b103      	cbz	r3, 800b676 <_write_r+0x1e>
 800b674:	6023      	str	r3, [r4, #0]
 800b676:	bd38      	pop	{r3, r4, r5, pc}
 800b678:	20004b4c 	.word	0x20004b4c

0800b67c <__errno>:
 800b67c:	4b01      	ldr	r3, [pc, #4]	@ (800b684 <__errno+0x8>)
 800b67e:	6818      	ldr	r0, [r3, #0]
 800b680:	4770      	bx	lr
 800b682:	bf00      	nop
 800b684:	20000030 	.word	0x20000030

0800b688 <__libc_init_array>:
 800b688:	b570      	push	{r4, r5, r6, lr}
 800b68a:	4d0d      	ldr	r5, [pc, #52]	@ (800b6c0 <__libc_init_array+0x38>)
 800b68c:	4c0d      	ldr	r4, [pc, #52]	@ (800b6c4 <__libc_init_array+0x3c>)
 800b68e:	1b64      	subs	r4, r4, r5
 800b690:	10a4      	asrs	r4, r4, #2
 800b692:	2600      	movs	r6, #0
 800b694:	42a6      	cmp	r6, r4
 800b696:	d109      	bne.n	800b6ac <__libc_init_array+0x24>
 800b698:	4d0b      	ldr	r5, [pc, #44]	@ (800b6c8 <__libc_init_array+0x40>)
 800b69a:	4c0c      	ldr	r4, [pc, #48]	@ (800b6cc <__libc_init_array+0x44>)
 800b69c:	f003 fb72 	bl	800ed84 <_init>
 800b6a0:	1b64      	subs	r4, r4, r5
 800b6a2:	10a4      	asrs	r4, r4, #2
 800b6a4:	2600      	movs	r6, #0
 800b6a6:	42a6      	cmp	r6, r4
 800b6a8:	d105      	bne.n	800b6b6 <__libc_init_array+0x2e>
 800b6aa:	bd70      	pop	{r4, r5, r6, pc}
 800b6ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6b0:	4798      	blx	r3
 800b6b2:	3601      	adds	r6, #1
 800b6b4:	e7ee      	b.n	800b694 <__libc_init_array+0xc>
 800b6b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6ba:	4798      	blx	r3
 800b6bc:	3601      	adds	r6, #1
 800b6be:	e7f2      	b.n	800b6a6 <__libc_init_array+0x1e>
 800b6c0:	0800f440 	.word	0x0800f440
 800b6c4:	0800f440 	.word	0x0800f440
 800b6c8:	0800f440 	.word	0x0800f440
 800b6cc:	0800f444 	.word	0x0800f444

0800b6d0 <__retarget_lock_init_recursive>:
 800b6d0:	4770      	bx	lr

0800b6d2 <__retarget_lock_acquire_recursive>:
 800b6d2:	4770      	bx	lr

0800b6d4 <__retarget_lock_release_recursive>:
 800b6d4:	4770      	bx	lr

0800b6d6 <memcpy>:
 800b6d6:	440a      	add	r2, r1
 800b6d8:	4291      	cmp	r1, r2
 800b6da:	f100 33ff 	add.w	r3, r0, #4294967295
 800b6de:	d100      	bne.n	800b6e2 <memcpy+0xc>
 800b6e0:	4770      	bx	lr
 800b6e2:	b510      	push	{r4, lr}
 800b6e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6ec:	4291      	cmp	r1, r2
 800b6ee:	d1f9      	bne.n	800b6e4 <memcpy+0xe>
 800b6f0:	bd10      	pop	{r4, pc}
	...

0800b6f4 <nanf>:
 800b6f4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b6fc <nanf+0x8>
 800b6f8:	4770      	bx	lr
 800b6fa:	bf00      	nop
 800b6fc:	7fc00000 	.word	0x7fc00000

0800b700 <quorem>:
 800b700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b704:	6903      	ldr	r3, [r0, #16]
 800b706:	690c      	ldr	r4, [r1, #16]
 800b708:	42a3      	cmp	r3, r4
 800b70a:	4607      	mov	r7, r0
 800b70c:	db7e      	blt.n	800b80c <quorem+0x10c>
 800b70e:	3c01      	subs	r4, #1
 800b710:	f101 0814 	add.w	r8, r1, #20
 800b714:	00a3      	lsls	r3, r4, #2
 800b716:	f100 0514 	add.w	r5, r0, #20
 800b71a:	9300      	str	r3, [sp, #0]
 800b71c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b720:	9301      	str	r3, [sp, #4]
 800b722:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b726:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b72a:	3301      	adds	r3, #1
 800b72c:	429a      	cmp	r2, r3
 800b72e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b732:	fbb2 f6f3 	udiv	r6, r2, r3
 800b736:	d32e      	bcc.n	800b796 <quorem+0x96>
 800b738:	f04f 0a00 	mov.w	sl, #0
 800b73c:	46c4      	mov	ip, r8
 800b73e:	46ae      	mov	lr, r5
 800b740:	46d3      	mov	fp, sl
 800b742:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b746:	b298      	uxth	r0, r3
 800b748:	fb06 a000 	mla	r0, r6, r0, sl
 800b74c:	0c02      	lsrs	r2, r0, #16
 800b74e:	0c1b      	lsrs	r3, r3, #16
 800b750:	fb06 2303 	mla	r3, r6, r3, r2
 800b754:	f8de 2000 	ldr.w	r2, [lr]
 800b758:	b280      	uxth	r0, r0
 800b75a:	b292      	uxth	r2, r2
 800b75c:	1a12      	subs	r2, r2, r0
 800b75e:	445a      	add	r2, fp
 800b760:	f8de 0000 	ldr.w	r0, [lr]
 800b764:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b768:	b29b      	uxth	r3, r3
 800b76a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b76e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b772:	b292      	uxth	r2, r2
 800b774:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b778:	45e1      	cmp	r9, ip
 800b77a:	f84e 2b04 	str.w	r2, [lr], #4
 800b77e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b782:	d2de      	bcs.n	800b742 <quorem+0x42>
 800b784:	9b00      	ldr	r3, [sp, #0]
 800b786:	58eb      	ldr	r3, [r5, r3]
 800b788:	b92b      	cbnz	r3, 800b796 <quorem+0x96>
 800b78a:	9b01      	ldr	r3, [sp, #4]
 800b78c:	3b04      	subs	r3, #4
 800b78e:	429d      	cmp	r5, r3
 800b790:	461a      	mov	r2, r3
 800b792:	d32f      	bcc.n	800b7f4 <quorem+0xf4>
 800b794:	613c      	str	r4, [r7, #16]
 800b796:	4638      	mov	r0, r7
 800b798:	f001 f9c2 	bl	800cb20 <__mcmp>
 800b79c:	2800      	cmp	r0, #0
 800b79e:	db25      	blt.n	800b7ec <quorem+0xec>
 800b7a0:	4629      	mov	r1, r5
 800b7a2:	2000      	movs	r0, #0
 800b7a4:	f858 2b04 	ldr.w	r2, [r8], #4
 800b7a8:	f8d1 c000 	ldr.w	ip, [r1]
 800b7ac:	fa1f fe82 	uxth.w	lr, r2
 800b7b0:	fa1f f38c 	uxth.w	r3, ip
 800b7b4:	eba3 030e 	sub.w	r3, r3, lr
 800b7b8:	4403      	add	r3, r0
 800b7ba:	0c12      	lsrs	r2, r2, #16
 800b7bc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b7c0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b7c4:	b29b      	uxth	r3, r3
 800b7c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7ca:	45c1      	cmp	r9, r8
 800b7cc:	f841 3b04 	str.w	r3, [r1], #4
 800b7d0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b7d4:	d2e6      	bcs.n	800b7a4 <quorem+0xa4>
 800b7d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7de:	b922      	cbnz	r2, 800b7ea <quorem+0xea>
 800b7e0:	3b04      	subs	r3, #4
 800b7e2:	429d      	cmp	r5, r3
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	d30b      	bcc.n	800b800 <quorem+0x100>
 800b7e8:	613c      	str	r4, [r7, #16]
 800b7ea:	3601      	adds	r6, #1
 800b7ec:	4630      	mov	r0, r6
 800b7ee:	b003      	add	sp, #12
 800b7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f4:	6812      	ldr	r2, [r2, #0]
 800b7f6:	3b04      	subs	r3, #4
 800b7f8:	2a00      	cmp	r2, #0
 800b7fa:	d1cb      	bne.n	800b794 <quorem+0x94>
 800b7fc:	3c01      	subs	r4, #1
 800b7fe:	e7c6      	b.n	800b78e <quorem+0x8e>
 800b800:	6812      	ldr	r2, [r2, #0]
 800b802:	3b04      	subs	r3, #4
 800b804:	2a00      	cmp	r2, #0
 800b806:	d1ef      	bne.n	800b7e8 <quorem+0xe8>
 800b808:	3c01      	subs	r4, #1
 800b80a:	e7ea      	b.n	800b7e2 <quorem+0xe2>
 800b80c:	2000      	movs	r0, #0
 800b80e:	e7ee      	b.n	800b7ee <quorem+0xee>

0800b810 <_dtoa_r>:
 800b810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b814:	69c7      	ldr	r7, [r0, #28]
 800b816:	b099      	sub	sp, #100	@ 0x64
 800b818:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b81c:	ec55 4b10 	vmov	r4, r5, d0
 800b820:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b822:	9109      	str	r1, [sp, #36]	@ 0x24
 800b824:	4683      	mov	fp, r0
 800b826:	920e      	str	r2, [sp, #56]	@ 0x38
 800b828:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b82a:	b97f      	cbnz	r7, 800b84c <_dtoa_r+0x3c>
 800b82c:	2010      	movs	r0, #16
 800b82e:	f000 fdfd 	bl	800c42c <malloc>
 800b832:	4602      	mov	r2, r0
 800b834:	f8cb 001c 	str.w	r0, [fp, #28]
 800b838:	b920      	cbnz	r0, 800b844 <_dtoa_r+0x34>
 800b83a:	4ba7      	ldr	r3, [pc, #668]	@ (800bad8 <_dtoa_r+0x2c8>)
 800b83c:	21ef      	movs	r1, #239	@ 0xef
 800b83e:	48a7      	ldr	r0, [pc, #668]	@ (800badc <_dtoa_r+0x2cc>)
 800b840:	f002 fc2a 	bl	800e098 <__assert_func>
 800b844:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b848:	6007      	str	r7, [r0, #0]
 800b84a:	60c7      	str	r7, [r0, #12]
 800b84c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b850:	6819      	ldr	r1, [r3, #0]
 800b852:	b159      	cbz	r1, 800b86c <_dtoa_r+0x5c>
 800b854:	685a      	ldr	r2, [r3, #4]
 800b856:	604a      	str	r2, [r1, #4]
 800b858:	2301      	movs	r3, #1
 800b85a:	4093      	lsls	r3, r2
 800b85c:	608b      	str	r3, [r1, #8]
 800b85e:	4658      	mov	r0, fp
 800b860:	f000 feda 	bl	800c618 <_Bfree>
 800b864:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b868:	2200      	movs	r2, #0
 800b86a:	601a      	str	r2, [r3, #0]
 800b86c:	1e2b      	subs	r3, r5, #0
 800b86e:	bfb9      	ittee	lt
 800b870:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b874:	9303      	strlt	r3, [sp, #12]
 800b876:	2300      	movge	r3, #0
 800b878:	6033      	strge	r3, [r6, #0]
 800b87a:	9f03      	ldr	r7, [sp, #12]
 800b87c:	4b98      	ldr	r3, [pc, #608]	@ (800bae0 <_dtoa_r+0x2d0>)
 800b87e:	bfbc      	itt	lt
 800b880:	2201      	movlt	r2, #1
 800b882:	6032      	strlt	r2, [r6, #0]
 800b884:	43bb      	bics	r3, r7
 800b886:	d112      	bne.n	800b8ae <_dtoa_r+0x9e>
 800b888:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b88a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b88e:	6013      	str	r3, [r2, #0]
 800b890:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b894:	4323      	orrs	r3, r4
 800b896:	f000 854d 	beq.w	800c334 <_dtoa_r+0xb24>
 800b89a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b89c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800baf4 <_dtoa_r+0x2e4>
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	f000 854f 	beq.w	800c344 <_dtoa_r+0xb34>
 800b8a6:	f10a 0303 	add.w	r3, sl, #3
 800b8aa:	f000 bd49 	b.w	800c340 <_dtoa_r+0xb30>
 800b8ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	ec51 0b17 	vmov	r0, r1, d7
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b8be:	f7f5 f90b 	bl	8000ad8 <__aeabi_dcmpeq>
 800b8c2:	4680      	mov	r8, r0
 800b8c4:	b158      	cbz	r0, 800b8de <_dtoa_r+0xce>
 800b8c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	6013      	str	r3, [r2, #0]
 800b8cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b8ce:	b113      	cbz	r3, 800b8d6 <_dtoa_r+0xc6>
 800b8d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b8d2:	4b84      	ldr	r3, [pc, #528]	@ (800bae4 <_dtoa_r+0x2d4>)
 800b8d4:	6013      	str	r3, [r2, #0]
 800b8d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800baf8 <_dtoa_r+0x2e8>
 800b8da:	f000 bd33 	b.w	800c344 <_dtoa_r+0xb34>
 800b8de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b8e2:	aa16      	add	r2, sp, #88	@ 0x58
 800b8e4:	a917      	add	r1, sp, #92	@ 0x5c
 800b8e6:	4658      	mov	r0, fp
 800b8e8:	f001 fa3a 	bl	800cd60 <__d2b>
 800b8ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b8f0:	4681      	mov	r9, r0
 800b8f2:	2e00      	cmp	r6, #0
 800b8f4:	d077      	beq.n	800b9e6 <_dtoa_r+0x1d6>
 800b8f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b8f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b8fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b900:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b904:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b908:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b90c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b910:	4619      	mov	r1, r3
 800b912:	2200      	movs	r2, #0
 800b914:	4b74      	ldr	r3, [pc, #464]	@ (800bae8 <_dtoa_r+0x2d8>)
 800b916:	f7f4 fcbf 	bl	8000298 <__aeabi_dsub>
 800b91a:	a369      	add	r3, pc, #420	@ (adr r3, 800bac0 <_dtoa_r+0x2b0>)
 800b91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b920:	f7f4 fe72 	bl	8000608 <__aeabi_dmul>
 800b924:	a368      	add	r3, pc, #416	@ (adr r3, 800bac8 <_dtoa_r+0x2b8>)
 800b926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92a:	f7f4 fcb7 	bl	800029c <__adddf3>
 800b92e:	4604      	mov	r4, r0
 800b930:	4630      	mov	r0, r6
 800b932:	460d      	mov	r5, r1
 800b934:	f7f4 fdfe 	bl	8000534 <__aeabi_i2d>
 800b938:	a365      	add	r3, pc, #404	@ (adr r3, 800bad0 <_dtoa_r+0x2c0>)
 800b93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93e:	f7f4 fe63 	bl	8000608 <__aeabi_dmul>
 800b942:	4602      	mov	r2, r0
 800b944:	460b      	mov	r3, r1
 800b946:	4620      	mov	r0, r4
 800b948:	4629      	mov	r1, r5
 800b94a:	f7f4 fca7 	bl	800029c <__adddf3>
 800b94e:	4604      	mov	r4, r0
 800b950:	460d      	mov	r5, r1
 800b952:	f7f5 f909 	bl	8000b68 <__aeabi_d2iz>
 800b956:	2200      	movs	r2, #0
 800b958:	4607      	mov	r7, r0
 800b95a:	2300      	movs	r3, #0
 800b95c:	4620      	mov	r0, r4
 800b95e:	4629      	mov	r1, r5
 800b960:	f7f5 f8c4 	bl	8000aec <__aeabi_dcmplt>
 800b964:	b140      	cbz	r0, 800b978 <_dtoa_r+0x168>
 800b966:	4638      	mov	r0, r7
 800b968:	f7f4 fde4 	bl	8000534 <__aeabi_i2d>
 800b96c:	4622      	mov	r2, r4
 800b96e:	462b      	mov	r3, r5
 800b970:	f7f5 f8b2 	bl	8000ad8 <__aeabi_dcmpeq>
 800b974:	b900      	cbnz	r0, 800b978 <_dtoa_r+0x168>
 800b976:	3f01      	subs	r7, #1
 800b978:	2f16      	cmp	r7, #22
 800b97a:	d851      	bhi.n	800ba20 <_dtoa_r+0x210>
 800b97c:	4b5b      	ldr	r3, [pc, #364]	@ (800baec <_dtoa_r+0x2dc>)
 800b97e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b986:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b98a:	f7f5 f8af 	bl	8000aec <__aeabi_dcmplt>
 800b98e:	2800      	cmp	r0, #0
 800b990:	d048      	beq.n	800ba24 <_dtoa_r+0x214>
 800b992:	3f01      	subs	r7, #1
 800b994:	2300      	movs	r3, #0
 800b996:	9312      	str	r3, [sp, #72]	@ 0x48
 800b998:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b99a:	1b9b      	subs	r3, r3, r6
 800b99c:	1e5a      	subs	r2, r3, #1
 800b99e:	bf44      	itt	mi
 800b9a0:	f1c3 0801 	rsbmi	r8, r3, #1
 800b9a4:	2300      	movmi	r3, #0
 800b9a6:	9208      	str	r2, [sp, #32]
 800b9a8:	bf54      	ite	pl
 800b9aa:	f04f 0800 	movpl.w	r8, #0
 800b9ae:	9308      	strmi	r3, [sp, #32]
 800b9b0:	2f00      	cmp	r7, #0
 800b9b2:	db39      	blt.n	800ba28 <_dtoa_r+0x218>
 800b9b4:	9b08      	ldr	r3, [sp, #32]
 800b9b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b9b8:	443b      	add	r3, r7
 800b9ba:	9308      	str	r3, [sp, #32]
 800b9bc:	2300      	movs	r3, #0
 800b9be:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9c2:	2b09      	cmp	r3, #9
 800b9c4:	d864      	bhi.n	800ba90 <_dtoa_r+0x280>
 800b9c6:	2b05      	cmp	r3, #5
 800b9c8:	bfc4      	itt	gt
 800b9ca:	3b04      	subgt	r3, #4
 800b9cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b9ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9d0:	f1a3 0302 	sub.w	r3, r3, #2
 800b9d4:	bfcc      	ite	gt
 800b9d6:	2400      	movgt	r4, #0
 800b9d8:	2401      	movle	r4, #1
 800b9da:	2b03      	cmp	r3, #3
 800b9dc:	d863      	bhi.n	800baa6 <_dtoa_r+0x296>
 800b9de:	e8df f003 	tbb	[pc, r3]
 800b9e2:	372a      	.short	0x372a
 800b9e4:	5535      	.short	0x5535
 800b9e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b9ea:	441e      	add	r6, r3
 800b9ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b9f0:	2b20      	cmp	r3, #32
 800b9f2:	bfc1      	itttt	gt
 800b9f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b9f8:	409f      	lslgt	r7, r3
 800b9fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b9fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ba02:	bfd6      	itet	le
 800ba04:	f1c3 0320 	rsble	r3, r3, #32
 800ba08:	ea47 0003 	orrgt.w	r0, r7, r3
 800ba0c:	fa04 f003 	lslle.w	r0, r4, r3
 800ba10:	f7f4 fd80 	bl	8000514 <__aeabi_ui2d>
 800ba14:	2201      	movs	r2, #1
 800ba16:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ba1a:	3e01      	subs	r6, #1
 800ba1c:	9214      	str	r2, [sp, #80]	@ 0x50
 800ba1e:	e777      	b.n	800b910 <_dtoa_r+0x100>
 800ba20:	2301      	movs	r3, #1
 800ba22:	e7b8      	b.n	800b996 <_dtoa_r+0x186>
 800ba24:	9012      	str	r0, [sp, #72]	@ 0x48
 800ba26:	e7b7      	b.n	800b998 <_dtoa_r+0x188>
 800ba28:	427b      	negs	r3, r7
 800ba2a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	eba8 0807 	sub.w	r8, r8, r7
 800ba32:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ba34:	e7c4      	b.n	800b9c0 <_dtoa_r+0x1b0>
 800ba36:	2300      	movs	r3, #0
 800ba38:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	dc35      	bgt.n	800baac <_dtoa_r+0x29c>
 800ba40:	2301      	movs	r3, #1
 800ba42:	9300      	str	r3, [sp, #0]
 800ba44:	9307      	str	r3, [sp, #28]
 800ba46:	461a      	mov	r2, r3
 800ba48:	920e      	str	r2, [sp, #56]	@ 0x38
 800ba4a:	e00b      	b.n	800ba64 <_dtoa_r+0x254>
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	e7f3      	b.n	800ba38 <_dtoa_r+0x228>
 800ba50:	2300      	movs	r3, #0
 800ba52:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba56:	18fb      	adds	r3, r7, r3
 800ba58:	9300      	str	r3, [sp, #0]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	9307      	str	r3, [sp, #28]
 800ba60:	bfb8      	it	lt
 800ba62:	2301      	movlt	r3, #1
 800ba64:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ba68:	2100      	movs	r1, #0
 800ba6a:	2204      	movs	r2, #4
 800ba6c:	f102 0514 	add.w	r5, r2, #20
 800ba70:	429d      	cmp	r5, r3
 800ba72:	d91f      	bls.n	800bab4 <_dtoa_r+0x2a4>
 800ba74:	6041      	str	r1, [r0, #4]
 800ba76:	4658      	mov	r0, fp
 800ba78:	f000 fd8e 	bl	800c598 <_Balloc>
 800ba7c:	4682      	mov	sl, r0
 800ba7e:	2800      	cmp	r0, #0
 800ba80:	d13c      	bne.n	800bafc <_dtoa_r+0x2ec>
 800ba82:	4b1b      	ldr	r3, [pc, #108]	@ (800baf0 <_dtoa_r+0x2e0>)
 800ba84:	4602      	mov	r2, r0
 800ba86:	f240 11af 	movw	r1, #431	@ 0x1af
 800ba8a:	e6d8      	b.n	800b83e <_dtoa_r+0x2e>
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	e7e0      	b.n	800ba52 <_dtoa_r+0x242>
 800ba90:	2401      	movs	r4, #1
 800ba92:	2300      	movs	r3, #0
 800ba94:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba96:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ba98:	f04f 33ff 	mov.w	r3, #4294967295
 800ba9c:	9300      	str	r3, [sp, #0]
 800ba9e:	9307      	str	r3, [sp, #28]
 800baa0:	2200      	movs	r2, #0
 800baa2:	2312      	movs	r3, #18
 800baa4:	e7d0      	b.n	800ba48 <_dtoa_r+0x238>
 800baa6:	2301      	movs	r3, #1
 800baa8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800baaa:	e7f5      	b.n	800ba98 <_dtoa_r+0x288>
 800baac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800baae:	9300      	str	r3, [sp, #0]
 800bab0:	9307      	str	r3, [sp, #28]
 800bab2:	e7d7      	b.n	800ba64 <_dtoa_r+0x254>
 800bab4:	3101      	adds	r1, #1
 800bab6:	0052      	lsls	r2, r2, #1
 800bab8:	e7d8      	b.n	800ba6c <_dtoa_r+0x25c>
 800baba:	bf00      	nop
 800babc:	f3af 8000 	nop.w
 800bac0:	636f4361 	.word	0x636f4361
 800bac4:	3fd287a7 	.word	0x3fd287a7
 800bac8:	8b60c8b3 	.word	0x8b60c8b3
 800bacc:	3fc68a28 	.word	0x3fc68a28
 800bad0:	509f79fb 	.word	0x509f79fb
 800bad4:	3fd34413 	.word	0x3fd34413
 800bad8:	0800f052 	.word	0x0800f052
 800badc:	0800f069 	.word	0x0800f069
 800bae0:	7ff00000 	.word	0x7ff00000
 800bae4:	0800f01d 	.word	0x0800f01d
 800bae8:	3ff80000 	.word	0x3ff80000
 800baec:	0800f160 	.word	0x0800f160
 800baf0:	0800f0c1 	.word	0x0800f0c1
 800baf4:	0800f04e 	.word	0x0800f04e
 800baf8:	0800f01c 	.word	0x0800f01c
 800bafc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bb00:	6018      	str	r0, [r3, #0]
 800bb02:	9b07      	ldr	r3, [sp, #28]
 800bb04:	2b0e      	cmp	r3, #14
 800bb06:	f200 80a4 	bhi.w	800bc52 <_dtoa_r+0x442>
 800bb0a:	2c00      	cmp	r4, #0
 800bb0c:	f000 80a1 	beq.w	800bc52 <_dtoa_r+0x442>
 800bb10:	2f00      	cmp	r7, #0
 800bb12:	dd33      	ble.n	800bb7c <_dtoa_r+0x36c>
 800bb14:	4bad      	ldr	r3, [pc, #692]	@ (800bdcc <_dtoa_r+0x5bc>)
 800bb16:	f007 020f 	and.w	r2, r7, #15
 800bb1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb1e:	ed93 7b00 	vldr	d7, [r3]
 800bb22:	05f8      	lsls	r0, r7, #23
 800bb24:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bb28:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bb2c:	d516      	bpl.n	800bb5c <_dtoa_r+0x34c>
 800bb2e:	4ba8      	ldr	r3, [pc, #672]	@ (800bdd0 <_dtoa_r+0x5c0>)
 800bb30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb38:	f7f4 fe90 	bl	800085c <__aeabi_ddiv>
 800bb3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb40:	f004 040f 	and.w	r4, r4, #15
 800bb44:	2603      	movs	r6, #3
 800bb46:	4da2      	ldr	r5, [pc, #648]	@ (800bdd0 <_dtoa_r+0x5c0>)
 800bb48:	b954      	cbnz	r4, 800bb60 <_dtoa_r+0x350>
 800bb4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb52:	f7f4 fe83 	bl	800085c <__aeabi_ddiv>
 800bb56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb5a:	e028      	b.n	800bbae <_dtoa_r+0x39e>
 800bb5c:	2602      	movs	r6, #2
 800bb5e:	e7f2      	b.n	800bb46 <_dtoa_r+0x336>
 800bb60:	07e1      	lsls	r1, r4, #31
 800bb62:	d508      	bpl.n	800bb76 <_dtoa_r+0x366>
 800bb64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb68:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bb6c:	f7f4 fd4c 	bl	8000608 <__aeabi_dmul>
 800bb70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb74:	3601      	adds	r6, #1
 800bb76:	1064      	asrs	r4, r4, #1
 800bb78:	3508      	adds	r5, #8
 800bb7a:	e7e5      	b.n	800bb48 <_dtoa_r+0x338>
 800bb7c:	f000 80d2 	beq.w	800bd24 <_dtoa_r+0x514>
 800bb80:	427c      	negs	r4, r7
 800bb82:	4b92      	ldr	r3, [pc, #584]	@ (800bdcc <_dtoa_r+0x5bc>)
 800bb84:	4d92      	ldr	r5, [pc, #584]	@ (800bdd0 <_dtoa_r+0x5c0>)
 800bb86:	f004 020f 	and.w	r2, r4, #15
 800bb8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb96:	f7f4 fd37 	bl	8000608 <__aeabi_dmul>
 800bb9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb9e:	1124      	asrs	r4, r4, #4
 800bba0:	2300      	movs	r3, #0
 800bba2:	2602      	movs	r6, #2
 800bba4:	2c00      	cmp	r4, #0
 800bba6:	f040 80b2 	bne.w	800bd0e <_dtoa_r+0x4fe>
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d1d3      	bne.n	800bb56 <_dtoa_r+0x346>
 800bbae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bbb0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	f000 80b7 	beq.w	800bd28 <_dtoa_r+0x518>
 800bbba:	4b86      	ldr	r3, [pc, #536]	@ (800bdd4 <_dtoa_r+0x5c4>)
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	4629      	mov	r1, r5
 800bbc2:	f7f4 ff93 	bl	8000aec <__aeabi_dcmplt>
 800bbc6:	2800      	cmp	r0, #0
 800bbc8:	f000 80ae 	beq.w	800bd28 <_dtoa_r+0x518>
 800bbcc:	9b07      	ldr	r3, [sp, #28]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	f000 80aa 	beq.w	800bd28 <_dtoa_r+0x518>
 800bbd4:	9b00      	ldr	r3, [sp, #0]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	dd37      	ble.n	800bc4a <_dtoa_r+0x43a>
 800bbda:	1e7b      	subs	r3, r7, #1
 800bbdc:	9304      	str	r3, [sp, #16]
 800bbde:	4620      	mov	r0, r4
 800bbe0:	4b7d      	ldr	r3, [pc, #500]	@ (800bdd8 <_dtoa_r+0x5c8>)
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	4629      	mov	r1, r5
 800bbe6:	f7f4 fd0f 	bl	8000608 <__aeabi_dmul>
 800bbea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbee:	9c00      	ldr	r4, [sp, #0]
 800bbf0:	3601      	adds	r6, #1
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	f7f4 fc9e 	bl	8000534 <__aeabi_i2d>
 800bbf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bbfc:	f7f4 fd04 	bl	8000608 <__aeabi_dmul>
 800bc00:	4b76      	ldr	r3, [pc, #472]	@ (800bddc <_dtoa_r+0x5cc>)
 800bc02:	2200      	movs	r2, #0
 800bc04:	f7f4 fb4a 	bl	800029c <__adddf3>
 800bc08:	4605      	mov	r5, r0
 800bc0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bc0e:	2c00      	cmp	r4, #0
 800bc10:	f040 808d 	bne.w	800bd2e <_dtoa_r+0x51e>
 800bc14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc18:	4b71      	ldr	r3, [pc, #452]	@ (800bde0 <_dtoa_r+0x5d0>)
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f7f4 fb3c 	bl	8000298 <__aeabi_dsub>
 800bc20:	4602      	mov	r2, r0
 800bc22:	460b      	mov	r3, r1
 800bc24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc28:	462a      	mov	r2, r5
 800bc2a:	4633      	mov	r3, r6
 800bc2c:	f7f4 ff7c 	bl	8000b28 <__aeabi_dcmpgt>
 800bc30:	2800      	cmp	r0, #0
 800bc32:	f040 828b 	bne.w	800c14c <_dtoa_r+0x93c>
 800bc36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc3a:	462a      	mov	r2, r5
 800bc3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bc40:	f7f4 ff54 	bl	8000aec <__aeabi_dcmplt>
 800bc44:	2800      	cmp	r0, #0
 800bc46:	f040 8128 	bne.w	800be9a <_dtoa_r+0x68a>
 800bc4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bc4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bc52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	f2c0 815a 	blt.w	800bf0e <_dtoa_r+0x6fe>
 800bc5a:	2f0e      	cmp	r7, #14
 800bc5c:	f300 8157 	bgt.w	800bf0e <_dtoa_r+0x6fe>
 800bc60:	4b5a      	ldr	r3, [pc, #360]	@ (800bdcc <_dtoa_r+0x5bc>)
 800bc62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bc66:	ed93 7b00 	vldr	d7, [r3]
 800bc6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	ed8d 7b00 	vstr	d7, [sp]
 800bc72:	da03      	bge.n	800bc7c <_dtoa_r+0x46c>
 800bc74:	9b07      	ldr	r3, [sp, #28]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	f340 8101 	ble.w	800be7e <_dtoa_r+0x66e>
 800bc7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bc80:	4656      	mov	r6, sl
 800bc82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc86:	4620      	mov	r0, r4
 800bc88:	4629      	mov	r1, r5
 800bc8a:	f7f4 fde7 	bl	800085c <__aeabi_ddiv>
 800bc8e:	f7f4 ff6b 	bl	8000b68 <__aeabi_d2iz>
 800bc92:	4680      	mov	r8, r0
 800bc94:	f7f4 fc4e 	bl	8000534 <__aeabi_i2d>
 800bc98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc9c:	f7f4 fcb4 	bl	8000608 <__aeabi_dmul>
 800bca0:	4602      	mov	r2, r0
 800bca2:	460b      	mov	r3, r1
 800bca4:	4620      	mov	r0, r4
 800bca6:	4629      	mov	r1, r5
 800bca8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bcac:	f7f4 faf4 	bl	8000298 <__aeabi_dsub>
 800bcb0:	f806 4b01 	strb.w	r4, [r6], #1
 800bcb4:	9d07      	ldr	r5, [sp, #28]
 800bcb6:	eba6 040a 	sub.w	r4, r6, sl
 800bcba:	42a5      	cmp	r5, r4
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	460b      	mov	r3, r1
 800bcc0:	f040 8117 	bne.w	800bef2 <_dtoa_r+0x6e2>
 800bcc4:	f7f4 faea 	bl	800029c <__adddf3>
 800bcc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bccc:	4604      	mov	r4, r0
 800bcce:	460d      	mov	r5, r1
 800bcd0:	f7f4 ff2a 	bl	8000b28 <__aeabi_dcmpgt>
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	f040 80f9 	bne.w	800becc <_dtoa_r+0x6bc>
 800bcda:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcde:	4620      	mov	r0, r4
 800bce0:	4629      	mov	r1, r5
 800bce2:	f7f4 fef9 	bl	8000ad8 <__aeabi_dcmpeq>
 800bce6:	b118      	cbz	r0, 800bcf0 <_dtoa_r+0x4e0>
 800bce8:	f018 0f01 	tst.w	r8, #1
 800bcec:	f040 80ee 	bne.w	800becc <_dtoa_r+0x6bc>
 800bcf0:	4649      	mov	r1, r9
 800bcf2:	4658      	mov	r0, fp
 800bcf4:	f000 fc90 	bl	800c618 <_Bfree>
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	7033      	strb	r3, [r6, #0]
 800bcfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bcfe:	3701      	adds	r7, #1
 800bd00:	601f      	str	r7, [r3, #0]
 800bd02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	f000 831d 	beq.w	800c344 <_dtoa_r+0xb34>
 800bd0a:	601e      	str	r6, [r3, #0]
 800bd0c:	e31a      	b.n	800c344 <_dtoa_r+0xb34>
 800bd0e:	07e2      	lsls	r2, r4, #31
 800bd10:	d505      	bpl.n	800bd1e <_dtoa_r+0x50e>
 800bd12:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd16:	f7f4 fc77 	bl	8000608 <__aeabi_dmul>
 800bd1a:	3601      	adds	r6, #1
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	1064      	asrs	r4, r4, #1
 800bd20:	3508      	adds	r5, #8
 800bd22:	e73f      	b.n	800bba4 <_dtoa_r+0x394>
 800bd24:	2602      	movs	r6, #2
 800bd26:	e742      	b.n	800bbae <_dtoa_r+0x39e>
 800bd28:	9c07      	ldr	r4, [sp, #28]
 800bd2a:	9704      	str	r7, [sp, #16]
 800bd2c:	e761      	b.n	800bbf2 <_dtoa_r+0x3e2>
 800bd2e:	4b27      	ldr	r3, [pc, #156]	@ (800bdcc <_dtoa_r+0x5bc>)
 800bd30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bd32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bd36:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd3a:	4454      	add	r4, sl
 800bd3c:	2900      	cmp	r1, #0
 800bd3e:	d053      	beq.n	800bde8 <_dtoa_r+0x5d8>
 800bd40:	4928      	ldr	r1, [pc, #160]	@ (800bde4 <_dtoa_r+0x5d4>)
 800bd42:	2000      	movs	r0, #0
 800bd44:	f7f4 fd8a 	bl	800085c <__aeabi_ddiv>
 800bd48:	4633      	mov	r3, r6
 800bd4a:	462a      	mov	r2, r5
 800bd4c:	f7f4 faa4 	bl	8000298 <__aeabi_dsub>
 800bd50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bd54:	4656      	mov	r6, sl
 800bd56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd5a:	f7f4 ff05 	bl	8000b68 <__aeabi_d2iz>
 800bd5e:	4605      	mov	r5, r0
 800bd60:	f7f4 fbe8 	bl	8000534 <__aeabi_i2d>
 800bd64:	4602      	mov	r2, r0
 800bd66:	460b      	mov	r3, r1
 800bd68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd6c:	f7f4 fa94 	bl	8000298 <__aeabi_dsub>
 800bd70:	3530      	adds	r5, #48	@ 0x30
 800bd72:	4602      	mov	r2, r0
 800bd74:	460b      	mov	r3, r1
 800bd76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd7a:	f806 5b01 	strb.w	r5, [r6], #1
 800bd7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bd82:	f7f4 feb3 	bl	8000aec <__aeabi_dcmplt>
 800bd86:	2800      	cmp	r0, #0
 800bd88:	d171      	bne.n	800be6e <_dtoa_r+0x65e>
 800bd8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd8e:	4911      	ldr	r1, [pc, #68]	@ (800bdd4 <_dtoa_r+0x5c4>)
 800bd90:	2000      	movs	r0, #0
 800bd92:	f7f4 fa81 	bl	8000298 <__aeabi_dsub>
 800bd96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bd9a:	f7f4 fea7 	bl	8000aec <__aeabi_dcmplt>
 800bd9e:	2800      	cmp	r0, #0
 800bda0:	f040 8095 	bne.w	800bece <_dtoa_r+0x6be>
 800bda4:	42a6      	cmp	r6, r4
 800bda6:	f43f af50 	beq.w	800bc4a <_dtoa_r+0x43a>
 800bdaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bdae:	4b0a      	ldr	r3, [pc, #40]	@ (800bdd8 <_dtoa_r+0x5c8>)
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	f7f4 fc29 	bl	8000608 <__aeabi_dmul>
 800bdb6:	4b08      	ldr	r3, [pc, #32]	@ (800bdd8 <_dtoa_r+0x5c8>)
 800bdb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdc2:	f7f4 fc21 	bl	8000608 <__aeabi_dmul>
 800bdc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdca:	e7c4      	b.n	800bd56 <_dtoa_r+0x546>
 800bdcc:	0800f160 	.word	0x0800f160
 800bdd0:	0800f138 	.word	0x0800f138
 800bdd4:	3ff00000 	.word	0x3ff00000
 800bdd8:	40240000 	.word	0x40240000
 800bddc:	401c0000 	.word	0x401c0000
 800bde0:	40140000 	.word	0x40140000
 800bde4:	3fe00000 	.word	0x3fe00000
 800bde8:	4631      	mov	r1, r6
 800bdea:	4628      	mov	r0, r5
 800bdec:	f7f4 fc0c 	bl	8000608 <__aeabi_dmul>
 800bdf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bdf4:	9415      	str	r4, [sp, #84]	@ 0x54
 800bdf6:	4656      	mov	r6, sl
 800bdf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdfc:	f7f4 feb4 	bl	8000b68 <__aeabi_d2iz>
 800be00:	4605      	mov	r5, r0
 800be02:	f7f4 fb97 	bl	8000534 <__aeabi_i2d>
 800be06:	4602      	mov	r2, r0
 800be08:	460b      	mov	r3, r1
 800be0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be0e:	f7f4 fa43 	bl	8000298 <__aeabi_dsub>
 800be12:	3530      	adds	r5, #48	@ 0x30
 800be14:	f806 5b01 	strb.w	r5, [r6], #1
 800be18:	4602      	mov	r2, r0
 800be1a:	460b      	mov	r3, r1
 800be1c:	42a6      	cmp	r6, r4
 800be1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800be22:	f04f 0200 	mov.w	r2, #0
 800be26:	d124      	bne.n	800be72 <_dtoa_r+0x662>
 800be28:	4bac      	ldr	r3, [pc, #688]	@ (800c0dc <_dtoa_r+0x8cc>)
 800be2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800be2e:	f7f4 fa35 	bl	800029c <__adddf3>
 800be32:	4602      	mov	r2, r0
 800be34:	460b      	mov	r3, r1
 800be36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be3a:	f7f4 fe75 	bl	8000b28 <__aeabi_dcmpgt>
 800be3e:	2800      	cmp	r0, #0
 800be40:	d145      	bne.n	800bece <_dtoa_r+0x6be>
 800be42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800be46:	49a5      	ldr	r1, [pc, #660]	@ (800c0dc <_dtoa_r+0x8cc>)
 800be48:	2000      	movs	r0, #0
 800be4a:	f7f4 fa25 	bl	8000298 <__aeabi_dsub>
 800be4e:	4602      	mov	r2, r0
 800be50:	460b      	mov	r3, r1
 800be52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be56:	f7f4 fe49 	bl	8000aec <__aeabi_dcmplt>
 800be5a:	2800      	cmp	r0, #0
 800be5c:	f43f aef5 	beq.w	800bc4a <_dtoa_r+0x43a>
 800be60:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800be62:	1e73      	subs	r3, r6, #1
 800be64:	9315      	str	r3, [sp, #84]	@ 0x54
 800be66:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800be6a:	2b30      	cmp	r3, #48	@ 0x30
 800be6c:	d0f8      	beq.n	800be60 <_dtoa_r+0x650>
 800be6e:	9f04      	ldr	r7, [sp, #16]
 800be70:	e73e      	b.n	800bcf0 <_dtoa_r+0x4e0>
 800be72:	4b9b      	ldr	r3, [pc, #620]	@ (800c0e0 <_dtoa_r+0x8d0>)
 800be74:	f7f4 fbc8 	bl	8000608 <__aeabi_dmul>
 800be78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be7c:	e7bc      	b.n	800bdf8 <_dtoa_r+0x5e8>
 800be7e:	d10c      	bne.n	800be9a <_dtoa_r+0x68a>
 800be80:	4b98      	ldr	r3, [pc, #608]	@ (800c0e4 <_dtoa_r+0x8d4>)
 800be82:	2200      	movs	r2, #0
 800be84:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be88:	f7f4 fbbe 	bl	8000608 <__aeabi_dmul>
 800be8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be90:	f7f4 fe40 	bl	8000b14 <__aeabi_dcmpge>
 800be94:	2800      	cmp	r0, #0
 800be96:	f000 8157 	beq.w	800c148 <_dtoa_r+0x938>
 800be9a:	2400      	movs	r4, #0
 800be9c:	4625      	mov	r5, r4
 800be9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bea0:	43db      	mvns	r3, r3
 800bea2:	9304      	str	r3, [sp, #16]
 800bea4:	4656      	mov	r6, sl
 800bea6:	2700      	movs	r7, #0
 800bea8:	4621      	mov	r1, r4
 800beaa:	4658      	mov	r0, fp
 800beac:	f000 fbb4 	bl	800c618 <_Bfree>
 800beb0:	2d00      	cmp	r5, #0
 800beb2:	d0dc      	beq.n	800be6e <_dtoa_r+0x65e>
 800beb4:	b12f      	cbz	r7, 800bec2 <_dtoa_r+0x6b2>
 800beb6:	42af      	cmp	r7, r5
 800beb8:	d003      	beq.n	800bec2 <_dtoa_r+0x6b2>
 800beba:	4639      	mov	r1, r7
 800bebc:	4658      	mov	r0, fp
 800bebe:	f000 fbab 	bl	800c618 <_Bfree>
 800bec2:	4629      	mov	r1, r5
 800bec4:	4658      	mov	r0, fp
 800bec6:	f000 fba7 	bl	800c618 <_Bfree>
 800beca:	e7d0      	b.n	800be6e <_dtoa_r+0x65e>
 800becc:	9704      	str	r7, [sp, #16]
 800bece:	4633      	mov	r3, r6
 800bed0:	461e      	mov	r6, r3
 800bed2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bed6:	2a39      	cmp	r2, #57	@ 0x39
 800bed8:	d107      	bne.n	800beea <_dtoa_r+0x6da>
 800beda:	459a      	cmp	sl, r3
 800bedc:	d1f8      	bne.n	800bed0 <_dtoa_r+0x6c0>
 800bede:	9a04      	ldr	r2, [sp, #16]
 800bee0:	3201      	adds	r2, #1
 800bee2:	9204      	str	r2, [sp, #16]
 800bee4:	2230      	movs	r2, #48	@ 0x30
 800bee6:	f88a 2000 	strb.w	r2, [sl]
 800beea:	781a      	ldrb	r2, [r3, #0]
 800beec:	3201      	adds	r2, #1
 800beee:	701a      	strb	r2, [r3, #0]
 800bef0:	e7bd      	b.n	800be6e <_dtoa_r+0x65e>
 800bef2:	4b7b      	ldr	r3, [pc, #492]	@ (800c0e0 <_dtoa_r+0x8d0>)
 800bef4:	2200      	movs	r2, #0
 800bef6:	f7f4 fb87 	bl	8000608 <__aeabi_dmul>
 800befa:	2200      	movs	r2, #0
 800befc:	2300      	movs	r3, #0
 800befe:	4604      	mov	r4, r0
 800bf00:	460d      	mov	r5, r1
 800bf02:	f7f4 fde9 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf06:	2800      	cmp	r0, #0
 800bf08:	f43f aebb 	beq.w	800bc82 <_dtoa_r+0x472>
 800bf0c:	e6f0      	b.n	800bcf0 <_dtoa_r+0x4e0>
 800bf0e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bf10:	2a00      	cmp	r2, #0
 800bf12:	f000 80db 	beq.w	800c0cc <_dtoa_r+0x8bc>
 800bf16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf18:	2a01      	cmp	r2, #1
 800bf1a:	f300 80bf 	bgt.w	800c09c <_dtoa_r+0x88c>
 800bf1e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bf20:	2a00      	cmp	r2, #0
 800bf22:	f000 80b7 	beq.w	800c094 <_dtoa_r+0x884>
 800bf26:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bf2a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bf2c:	4646      	mov	r6, r8
 800bf2e:	9a08      	ldr	r2, [sp, #32]
 800bf30:	2101      	movs	r1, #1
 800bf32:	441a      	add	r2, r3
 800bf34:	4658      	mov	r0, fp
 800bf36:	4498      	add	r8, r3
 800bf38:	9208      	str	r2, [sp, #32]
 800bf3a:	f000 fc6b 	bl	800c814 <__i2b>
 800bf3e:	4605      	mov	r5, r0
 800bf40:	b15e      	cbz	r6, 800bf5a <_dtoa_r+0x74a>
 800bf42:	9b08      	ldr	r3, [sp, #32]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	dd08      	ble.n	800bf5a <_dtoa_r+0x74a>
 800bf48:	42b3      	cmp	r3, r6
 800bf4a:	9a08      	ldr	r2, [sp, #32]
 800bf4c:	bfa8      	it	ge
 800bf4e:	4633      	movge	r3, r6
 800bf50:	eba8 0803 	sub.w	r8, r8, r3
 800bf54:	1af6      	subs	r6, r6, r3
 800bf56:	1ad3      	subs	r3, r2, r3
 800bf58:	9308      	str	r3, [sp, #32]
 800bf5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf5c:	b1f3      	cbz	r3, 800bf9c <_dtoa_r+0x78c>
 800bf5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	f000 80b7 	beq.w	800c0d4 <_dtoa_r+0x8c4>
 800bf66:	b18c      	cbz	r4, 800bf8c <_dtoa_r+0x77c>
 800bf68:	4629      	mov	r1, r5
 800bf6a:	4622      	mov	r2, r4
 800bf6c:	4658      	mov	r0, fp
 800bf6e:	f000 fd11 	bl	800c994 <__pow5mult>
 800bf72:	464a      	mov	r2, r9
 800bf74:	4601      	mov	r1, r0
 800bf76:	4605      	mov	r5, r0
 800bf78:	4658      	mov	r0, fp
 800bf7a:	f000 fc61 	bl	800c840 <__multiply>
 800bf7e:	4649      	mov	r1, r9
 800bf80:	9004      	str	r0, [sp, #16]
 800bf82:	4658      	mov	r0, fp
 800bf84:	f000 fb48 	bl	800c618 <_Bfree>
 800bf88:	9b04      	ldr	r3, [sp, #16]
 800bf8a:	4699      	mov	r9, r3
 800bf8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf8e:	1b1a      	subs	r2, r3, r4
 800bf90:	d004      	beq.n	800bf9c <_dtoa_r+0x78c>
 800bf92:	4649      	mov	r1, r9
 800bf94:	4658      	mov	r0, fp
 800bf96:	f000 fcfd 	bl	800c994 <__pow5mult>
 800bf9a:	4681      	mov	r9, r0
 800bf9c:	2101      	movs	r1, #1
 800bf9e:	4658      	mov	r0, fp
 800bfa0:	f000 fc38 	bl	800c814 <__i2b>
 800bfa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfa6:	4604      	mov	r4, r0
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	f000 81cf 	beq.w	800c34c <_dtoa_r+0xb3c>
 800bfae:	461a      	mov	r2, r3
 800bfb0:	4601      	mov	r1, r0
 800bfb2:	4658      	mov	r0, fp
 800bfb4:	f000 fcee 	bl	800c994 <__pow5mult>
 800bfb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfba:	2b01      	cmp	r3, #1
 800bfbc:	4604      	mov	r4, r0
 800bfbe:	f300 8095 	bgt.w	800c0ec <_dtoa_r+0x8dc>
 800bfc2:	9b02      	ldr	r3, [sp, #8]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	f040 8087 	bne.w	800c0d8 <_dtoa_r+0x8c8>
 800bfca:	9b03      	ldr	r3, [sp, #12]
 800bfcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	f040 8089 	bne.w	800c0e8 <_dtoa_r+0x8d8>
 800bfd6:	9b03      	ldr	r3, [sp, #12]
 800bfd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bfdc:	0d1b      	lsrs	r3, r3, #20
 800bfde:	051b      	lsls	r3, r3, #20
 800bfe0:	b12b      	cbz	r3, 800bfee <_dtoa_r+0x7de>
 800bfe2:	9b08      	ldr	r3, [sp, #32]
 800bfe4:	3301      	adds	r3, #1
 800bfe6:	9308      	str	r3, [sp, #32]
 800bfe8:	f108 0801 	add.w	r8, r8, #1
 800bfec:	2301      	movs	r3, #1
 800bfee:	930a      	str	r3, [sp, #40]	@ 0x28
 800bff0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	f000 81b0 	beq.w	800c358 <_dtoa_r+0xb48>
 800bff8:	6923      	ldr	r3, [r4, #16]
 800bffa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bffe:	6918      	ldr	r0, [r3, #16]
 800c000:	f000 fbbc 	bl	800c77c <__hi0bits>
 800c004:	f1c0 0020 	rsb	r0, r0, #32
 800c008:	9b08      	ldr	r3, [sp, #32]
 800c00a:	4418      	add	r0, r3
 800c00c:	f010 001f 	ands.w	r0, r0, #31
 800c010:	d077      	beq.n	800c102 <_dtoa_r+0x8f2>
 800c012:	f1c0 0320 	rsb	r3, r0, #32
 800c016:	2b04      	cmp	r3, #4
 800c018:	dd6b      	ble.n	800c0f2 <_dtoa_r+0x8e2>
 800c01a:	9b08      	ldr	r3, [sp, #32]
 800c01c:	f1c0 001c 	rsb	r0, r0, #28
 800c020:	4403      	add	r3, r0
 800c022:	4480      	add	r8, r0
 800c024:	4406      	add	r6, r0
 800c026:	9308      	str	r3, [sp, #32]
 800c028:	f1b8 0f00 	cmp.w	r8, #0
 800c02c:	dd05      	ble.n	800c03a <_dtoa_r+0x82a>
 800c02e:	4649      	mov	r1, r9
 800c030:	4642      	mov	r2, r8
 800c032:	4658      	mov	r0, fp
 800c034:	f000 fd08 	bl	800ca48 <__lshift>
 800c038:	4681      	mov	r9, r0
 800c03a:	9b08      	ldr	r3, [sp, #32]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	dd05      	ble.n	800c04c <_dtoa_r+0x83c>
 800c040:	4621      	mov	r1, r4
 800c042:	461a      	mov	r2, r3
 800c044:	4658      	mov	r0, fp
 800c046:	f000 fcff 	bl	800ca48 <__lshift>
 800c04a:	4604      	mov	r4, r0
 800c04c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d059      	beq.n	800c106 <_dtoa_r+0x8f6>
 800c052:	4621      	mov	r1, r4
 800c054:	4648      	mov	r0, r9
 800c056:	f000 fd63 	bl	800cb20 <__mcmp>
 800c05a:	2800      	cmp	r0, #0
 800c05c:	da53      	bge.n	800c106 <_dtoa_r+0x8f6>
 800c05e:	1e7b      	subs	r3, r7, #1
 800c060:	9304      	str	r3, [sp, #16]
 800c062:	4649      	mov	r1, r9
 800c064:	2300      	movs	r3, #0
 800c066:	220a      	movs	r2, #10
 800c068:	4658      	mov	r0, fp
 800c06a:	f000 faf7 	bl	800c65c <__multadd>
 800c06e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c070:	4681      	mov	r9, r0
 800c072:	2b00      	cmp	r3, #0
 800c074:	f000 8172 	beq.w	800c35c <_dtoa_r+0xb4c>
 800c078:	2300      	movs	r3, #0
 800c07a:	4629      	mov	r1, r5
 800c07c:	220a      	movs	r2, #10
 800c07e:	4658      	mov	r0, fp
 800c080:	f000 faec 	bl	800c65c <__multadd>
 800c084:	9b00      	ldr	r3, [sp, #0]
 800c086:	2b00      	cmp	r3, #0
 800c088:	4605      	mov	r5, r0
 800c08a:	dc67      	bgt.n	800c15c <_dtoa_r+0x94c>
 800c08c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c08e:	2b02      	cmp	r3, #2
 800c090:	dc41      	bgt.n	800c116 <_dtoa_r+0x906>
 800c092:	e063      	b.n	800c15c <_dtoa_r+0x94c>
 800c094:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c096:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c09a:	e746      	b.n	800bf2a <_dtoa_r+0x71a>
 800c09c:	9b07      	ldr	r3, [sp, #28]
 800c09e:	1e5c      	subs	r4, r3, #1
 800c0a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0a2:	42a3      	cmp	r3, r4
 800c0a4:	bfbf      	itttt	lt
 800c0a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c0a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c0aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c0ac:	1ae3      	sublt	r3, r4, r3
 800c0ae:	bfb4      	ite	lt
 800c0b0:	18d2      	addlt	r2, r2, r3
 800c0b2:	1b1c      	subge	r4, r3, r4
 800c0b4:	9b07      	ldr	r3, [sp, #28]
 800c0b6:	bfbc      	itt	lt
 800c0b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c0ba:	2400      	movlt	r4, #0
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	bfb5      	itete	lt
 800c0c0:	eba8 0603 	sublt.w	r6, r8, r3
 800c0c4:	9b07      	ldrge	r3, [sp, #28]
 800c0c6:	2300      	movlt	r3, #0
 800c0c8:	4646      	movge	r6, r8
 800c0ca:	e730      	b.n	800bf2e <_dtoa_r+0x71e>
 800c0cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c0ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c0d0:	4646      	mov	r6, r8
 800c0d2:	e735      	b.n	800bf40 <_dtoa_r+0x730>
 800c0d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c0d6:	e75c      	b.n	800bf92 <_dtoa_r+0x782>
 800c0d8:	2300      	movs	r3, #0
 800c0da:	e788      	b.n	800bfee <_dtoa_r+0x7de>
 800c0dc:	3fe00000 	.word	0x3fe00000
 800c0e0:	40240000 	.word	0x40240000
 800c0e4:	40140000 	.word	0x40140000
 800c0e8:	9b02      	ldr	r3, [sp, #8]
 800c0ea:	e780      	b.n	800bfee <_dtoa_r+0x7de>
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800c0f0:	e782      	b.n	800bff8 <_dtoa_r+0x7e8>
 800c0f2:	d099      	beq.n	800c028 <_dtoa_r+0x818>
 800c0f4:	9a08      	ldr	r2, [sp, #32]
 800c0f6:	331c      	adds	r3, #28
 800c0f8:	441a      	add	r2, r3
 800c0fa:	4498      	add	r8, r3
 800c0fc:	441e      	add	r6, r3
 800c0fe:	9208      	str	r2, [sp, #32]
 800c100:	e792      	b.n	800c028 <_dtoa_r+0x818>
 800c102:	4603      	mov	r3, r0
 800c104:	e7f6      	b.n	800c0f4 <_dtoa_r+0x8e4>
 800c106:	9b07      	ldr	r3, [sp, #28]
 800c108:	9704      	str	r7, [sp, #16]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	dc20      	bgt.n	800c150 <_dtoa_r+0x940>
 800c10e:	9300      	str	r3, [sp, #0]
 800c110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c112:	2b02      	cmp	r3, #2
 800c114:	dd1e      	ble.n	800c154 <_dtoa_r+0x944>
 800c116:	9b00      	ldr	r3, [sp, #0]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	f47f aec0 	bne.w	800be9e <_dtoa_r+0x68e>
 800c11e:	4621      	mov	r1, r4
 800c120:	2205      	movs	r2, #5
 800c122:	4658      	mov	r0, fp
 800c124:	f000 fa9a 	bl	800c65c <__multadd>
 800c128:	4601      	mov	r1, r0
 800c12a:	4604      	mov	r4, r0
 800c12c:	4648      	mov	r0, r9
 800c12e:	f000 fcf7 	bl	800cb20 <__mcmp>
 800c132:	2800      	cmp	r0, #0
 800c134:	f77f aeb3 	ble.w	800be9e <_dtoa_r+0x68e>
 800c138:	4656      	mov	r6, sl
 800c13a:	2331      	movs	r3, #49	@ 0x31
 800c13c:	f806 3b01 	strb.w	r3, [r6], #1
 800c140:	9b04      	ldr	r3, [sp, #16]
 800c142:	3301      	adds	r3, #1
 800c144:	9304      	str	r3, [sp, #16]
 800c146:	e6ae      	b.n	800bea6 <_dtoa_r+0x696>
 800c148:	9c07      	ldr	r4, [sp, #28]
 800c14a:	9704      	str	r7, [sp, #16]
 800c14c:	4625      	mov	r5, r4
 800c14e:	e7f3      	b.n	800c138 <_dtoa_r+0x928>
 800c150:	9b07      	ldr	r3, [sp, #28]
 800c152:	9300      	str	r3, [sp, #0]
 800c154:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c156:	2b00      	cmp	r3, #0
 800c158:	f000 8104 	beq.w	800c364 <_dtoa_r+0xb54>
 800c15c:	2e00      	cmp	r6, #0
 800c15e:	dd05      	ble.n	800c16c <_dtoa_r+0x95c>
 800c160:	4629      	mov	r1, r5
 800c162:	4632      	mov	r2, r6
 800c164:	4658      	mov	r0, fp
 800c166:	f000 fc6f 	bl	800ca48 <__lshift>
 800c16a:	4605      	mov	r5, r0
 800c16c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d05a      	beq.n	800c228 <_dtoa_r+0xa18>
 800c172:	6869      	ldr	r1, [r5, #4]
 800c174:	4658      	mov	r0, fp
 800c176:	f000 fa0f 	bl	800c598 <_Balloc>
 800c17a:	4606      	mov	r6, r0
 800c17c:	b928      	cbnz	r0, 800c18a <_dtoa_r+0x97a>
 800c17e:	4b84      	ldr	r3, [pc, #528]	@ (800c390 <_dtoa_r+0xb80>)
 800c180:	4602      	mov	r2, r0
 800c182:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c186:	f7ff bb5a 	b.w	800b83e <_dtoa_r+0x2e>
 800c18a:	692a      	ldr	r2, [r5, #16]
 800c18c:	3202      	adds	r2, #2
 800c18e:	0092      	lsls	r2, r2, #2
 800c190:	f105 010c 	add.w	r1, r5, #12
 800c194:	300c      	adds	r0, #12
 800c196:	f7ff fa9e 	bl	800b6d6 <memcpy>
 800c19a:	2201      	movs	r2, #1
 800c19c:	4631      	mov	r1, r6
 800c19e:	4658      	mov	r0, fp
 800c1a0:	f000 fc52 	bl	800ca48 <__lshift>
 800c1a4:	f10a 0301 	add.w	r3, sl, #1
 800c1a8:	9307      	str	r3, [sp, #28]
 800c1aa:	9b00      	ldr	r3, [sp, #0]
 800c1ac:	4453      	add	r3, sl
 800c1ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1b0:	9b02      	ldr	r3, [sp, #8]
 800c1b2:	f003 0301 	and.w	r3, r3, #1
 800c1b6:	462f      	mov	r7, r5
 800c1b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1ba:	4605      	mov	r5, r0
 800c1bc:	9b07      	ldr	r3, [sp, #28]
 800c1be:	4621      	mov	r1, r4
 800c1c0:	3b01      	subs	r3, #1
 800c1c2:	4648      	mov	r0, r9
 800c1c4:	9300      	str	r3, [sp, #0]
 800c1c6:	f7ff fa9b 	bl	800b700 <quorem>
 800c1ca:	4639      	mov	r1, r7
 800c1cc:	9002      	str	r0, [sp, #8]
 800c1ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c1d2:	4648      	mov	r0, r9
 800c1d4:	f000 fca4 	bl	800cb20 <__mcmp>
 800c1d8:	462a      	mov	r2, r5
 800c1da:	9008      	str	r0, [sp, #32]
 800c1dc:	4621      	mov	r1, r4
 800c1de:	4658      	mov	r0, fp
 800c1e0:	f000 fcba 	bl	800cb58 <__mdiff>
 800c1e4:	68c2      	ldr	r2, [r0, #12]
 800c1e6:	4606      	mov	r6, r0
 800c1e8:	bb02      	cbnz	r2, 800c22c <_dtoa_r+0xa1c>
 800c1ea:	4601      	mov	r1, r0
 800c1ec:	4648      	mov	r0, r9
 800c1ee:	f000 fc97 	bl	800cb20 <__mcmp>
 800c1f2:	4602      	mov	r2, r0
 800c1f4:	4631      	mov	r1, r6
 800c1f6:	4658      	mov	r0, fp
 800c1f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c1fa:	f000 fa0d 	bl	800c618 <_Bfree>
 800c1fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c200:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c202:	9e07      	ldr	r6, [sp, #28]
 800c204:	ea43 0102 	orr.w	r1, r3, r2
 800c208:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c20a:	4319      	orrs	r1, r3
 800c20c:	d110      	bne.n	800c230 <_dtoa_r+0xa20>
 800c20e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c212:	d029      	beq.n	800c268 <_dtoa_r+0xa58>
 800c214:	9b08      	ldr	r3, [sp, #32]
 800c216:	2b00      	cmp	r3, #0
 800c218:	dd02      	ble.n	800c220 <_dtoa_r+0xa10>
 800c21a:	9b02      	ldr	r3, [sp, #8]
 800c21c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c220:	9b00      	ldr	r3, [sp, #0]
 800c222:	f883 8000 	strb.w	r8, [r3]
 800c226:	e63f      	b.n	800bea8 <_dtoa_r+0x698>
 800c228:	4628      	mov	r0, r5
 800c22a:	e7bb      	b.n	800c1a4 <_dtoa_r+0x994>
 800c22c:	2201      	movs	r2, #1
 800c22e:	e7e1      	b.n	800c1f4 <_dtoa_r+0x9e4>
 800c230:	9b08      	ldr	r3, [sp, #32]
 800c232:	2b00      	cmp	r3, #0
 800c234:	db04      	blt.n	800c240 <_dtoa_r+0xa30>
 800c236:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c238:	430b      	orrs	r3, r1
 800c23a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c23c:	430b      	orrs	r3, r1
 800c23e:	d120      	bne.n	800c282 <_dtoa_r+0xa72>
 800c240:	2a00      	cmp	r2, #0
 800c242:	dded      	ble.n	800c220 <_dtoa_r+0xa10>
 800c244:	4649      	mov	r1, r9
 800c246:	2201      	movs	r2, #1
 800c248:	4658      	mov	r0, fp
 800c24a:	f000 fbfd 	bl	800ca48 <__lshift>
 800c24e:	4621      	mov	r1, r4
 800c250:	4681      	mov	r9, r0
 800c252:	f000 fc65 	bl	800cb20 <__mcmp>
 800c256:	2800      	cmp	r0, #0
 800c258:	dc03      	bgt.n	800c262 <_dtoa_r+0xa52>
 800c25a:	d1e1      	bne.n	800c220 <_dtoa_r+0xa10>
 800c25c:	f018 0f01 	tst.w	r8, #1
 800c260:	d0de      	beq.n	800c220 <_dtoa_r+0xa10>
 800c262:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c266:	d1d8      	bne.n	800c21a <_dtoa_r+0xa0a>
 800c268:	9a00      	ldr	r2, [sp, #0]
 800c26a:	2339      	movs	r3, #57	@ 0x39
 800c26c:	7013      	strb	r3, [r2, #0]
 800c26e:	4633      	mov	r3, r6
 800c270:	461e      	mov	r6, r3
 800c272:	3b01      	subs	r3, #1
 800c274:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c278:	2a39      	cmp	r2, #57	@ 0x39
 800c27a:	d052      	beq.n	800c322 <_dtoa_r+0xb12>
 800c27c:	3201      	adds	r2, #1
 800c27e:	701a      	strb	r2, [r3, #0]
 800c280:	e612      	b.n	800bea8 <_dtoa_r+0x698>
 800c282:	2a00      	cmp	r2, #0
 800c284:	dd07      	ble.n	800c296 <_dtoa_r+0xa86>
 800c286:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c28a:	d0ed      	beq.n	800c268 <_dtoa_r+0xa58>
 800c28c:	9a00      	ldr	r2, [sp, #0]
 800c28e:	f108 0301 	add.w	r3, r8, #1
 800c292:	7013      	strb	r3, [r2, #0]
 800c294:	e608      	b.n	800bea8 <_dtoa_r+0x698>
 800c296:	9b07      	ldr	r3, [sp, #28]
 800c298:	9a07      	ldr	r2, [sp, #28]
 800c29a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c29e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d028      	beq.n	800c2f6 <_dtoa_r+0xae6>
 800c2a4:	4649      	mov	r1, r9
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	220a      	movs	r2, #10
 800c2aa:	4658      	mov	r0, fp
 800c2ac:	f000 f9d6 	bl	800c65c <__multadd>
 800c2b0:	42af      	cmp	r7, r5
 800c2b2:	4681      	mov	r9, r0
 800c2b4:	f04f 0300 	mov.w	r3, #0
 800c2b8:	f04f 020a 	mov.w	r2, #10
 800c2bc:	4639      	mov	r1, r7
 800c2be:	4658      	mov	r0, fp
 800c2c0:	d107      	bne.n	800c2d2 <_dtoa_r+0xac2>
 800c2c2:	f000 f9cb 	bl	800c65c <__multadd>
 800c2c6:	4607      	mov	r7, r0
 800c2c8:	4605      	mov	r5, r0
 800c2ca:	9b07      	ldr	r3, [sp, #28]
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	9307      	str	r3, [sp, #28]
 800c2d0:	e774      	b.n	800c1bc <_dtoa_r+0x9ac>
 800c2d2:	f000 f9c3 	bl	800c65c <__multadd>
 800c2d6:	4629      	mov	r1, r5
 800c2d8:	4607      	mov	r7, r0
 800c2da:	2300      	movs	r3, #0
 800c2dc:	220a      	movs	r2, #10
 800c2de:	4658      	mov	r0, fp
 800c2e0:	f000 f9bc 	bl	800c65c <__multadd>
 800c2e4:	4605      	mov	r5, r0
 800c2e6:	e7f0      	b.n	800c2ca <_dtoa_r+0xaba>
 800c2e8:	9b00      	ldr	r3, [sp, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	bfcc      	ite	gt
 800c2ee:	461e      	movgt	r6, r3
 800c2f0:	2601      	movle	r6, #1
 800c2f2:	4456      	add	r6, sl
 800c2f4:	2700      	movs	r7, #0
 800c2f6:	4649      	mov	r1, r9
 800c2f8:	2201      	movs	r2, #1
 800c2fa:	4658      	mov	r0, fp
 800c2fc:	f000 fba4 	bl	800ca48 <__lshift>
 800c300:	4621      	mov	r1, r4
 800c302:	4681      	mov	r9, r0
 800c304:	f000 fc0c 	bl	800cb20 <__mcmp>
 800c308:	2800      	cmp	r0, #0
 800c30a:	dcb0      	bgt.n	800c26e <_dtoa_r+0xa5e>
 800c30c:	d102      	bne.n	800c314 <_dtoa_r+0xb04>
 800c30e:	f018 0f01 	tst.w	r8, #1
 800c312:	d1ac      	bne.n	800c26e <_dtoa_r+0xa5e>
 800c314:	4633      	mov	r3, r6
 800c316:	461e      	mov	r6, r3
 800c318:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c31c:	2a30      	cmp	r2, #48	@ 0x30
 800c31e:	d0fa      	beq.n	800c316 <_dtoa_r+0xb06>
 800c320:	e5c2      	b.n	800bea8 <_dtoa_r+0x698>
 800c322:	459a      	cmp	sl, r3
 800c324:	d1a4      	bne.n	800c270 <_dtoa_r+0xa60>
 800c326:	9b04      	ldr	r3, [sp, #16]
 800c328:	3301      	adds	r3, #1
 800c32a:	9304      	str	r3, [sp, #16]
 800c32c:	2331      	movs	r3, #49	@ 0x31
 800c32e:	f88a 3000 	strb.w	r3, [sl]
 800c332:	e5b9      	b.n	800bea8 <_dtoa_r+0x698>
 800c334:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c336:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c394 <_dtoa_r+0xb84>
 800c33a:	b11b      	cbz	r3, 800c344 <_dtoa_r+0xb34>
 800c33c:	f10a 0308 	add.w	r3, sl, #8
 800c340:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c342:	6013      	str	r3, [r2, #0]
 800c344:	4650      	mov	r0, sl
 800c346:	b019      	add	sp, #100	@ 0x64
 800c348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c34c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c34e:	2b01      	cmp	r3, #1
 800c350:	f77f ae37 	ble.w	800bfc2 <_dtoa_r+0x7b2>
 800c354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c356:	930a      	str	r3, [sp, #40]	@ 0x28
 800c358:	2001      	movs	r0, #1
 800c35a:	e655      	b.n	800c008 <_dtoa_r+0x7f8>
 800c35c:	9b00      	ldr	r3, [sp, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	f77f aed6 	ble.w	800c110 <_dtoa_r+0x900>
 800c364:	4656      	mov	r6, sl
 800c366:	4621      	mov	r1, r4
 800c368:	4648      	mov	r0, r9
 800c36a:	f7ff f9c9 	bl	800b700 <quorem>
 800c36e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c372:	f806 8b01 	strb.w	r8, [r6], #1
 800c376:	9b00      	ldr	r3, [sp, #0]
 800c378:	eba6 020a 	sub.w	r2, r6, sl
 800c37c:	4293      	cmp	r3, r2
 800c37e:	ddb3      	ble.n	800c2e8 <_dtoa_r+0xad8>
 800c380:	4649      	mov	r1, r9
 800c382:	2300      	movs	r3, #0
 800c384:	220a      	movs	r2, #10
 800c386:	4658      	mov	r0, fp
 800c388:	f000 f968 	bl	800c65c <__multadd>
 800c38c:	4681      	mov	r9, r0
 800c38e:	e7ea      	b.n	800c366 <_dtoa_r+0xb56>
 800c390:	0800f0c1 	.word	0x0800f0c1
 800c394:	0800f045 	.word	0x0800f045

0800c398 <_free_r>:
 800c398:	b538      	push	{r3, r4, r5, lr}
 800c39a:	4605      	mov	r5, r0
 800c39c:	2900      	cmp	r1, #0
 800c39e:	d041      	beq.n	800c424 <_free_r+0x8c>
 800c3a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3a4:	1f0c      	subs	r4, r1, #4
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	bfb8      	it	lt
 800c3aa:	18e4      	addlt	r4, r4, r3
 800c3ac:	f000 f8e8 	bl	800c580 <__malloc_lock>
 800c3b0:	4a1d      	ldr	r2, [pc, #116]	@ (800c428 <_free_r+0x90>)
 800c3b2:	6813      	ldr	r3, [r2, #0]
 800c3b4:	b933      	cbnz	r3, 800c3c4 <_free_r+0x2c>
 800c3b6:	6063      	str	r3, [r4, #4]
 800c3b8:	6014      	str	r4, [r2, #0]
 800c3ba:	4628      	mov	r0, r5
 800c3bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3c0:	f000 b8e4 	b.w	800c58c <__malloc_unlock>
 800c3c4:	42a3      	cmp	r3, r4
 800c3c6:	d908      	bls.n	800c3da <_free_r+0x42>
 800c3c8:	6820      	ldr	r0, [r4, #0]
 800c3ca:	1821      	adds	r1, r4, r0
 800c3cc:	428b      	cmp	r3, r1
 800c3ce:	bf01      	itttt	eq
 800c3d0:	6819      	ldreq	r1, [r3, #0]
 800c3d2:	685b      	ldreq	r3, [r3, #4]
 800c3d4:	1809      	addeq	r1, r1, r0
 800c3d6:	6021      	streq	r1, [r4, #0]
 800c3d8:	e7ed      	b.n	800c3b6 <_free_r+0x1e>
 800c3da:	461a      	mov	r2, r3
 800c3dc:	685b      	ldr	r3, [r3, #4]
 800c3de:	b10b      	cbz	r3, 800c3e4 <_free_r+0x4c>
 800c3e0:	42a3      	cmp	r3, r4
 800c3e2:	d9fa      	bls.n	800c3da <_free_r+0x42>
 800c3e4:	6811      	ldr	r1, [r2, #0]
 800c3e6:	1850      	adds	r0, r2, r1
 800c3e8:	42a0      	cmp	r0, r4
 800c3ea:	d10b      	bne.n	800c404 <_free_r+0x6c>
 800c3ec:	6820      	ldr	r0, [r4, #0]
 800c3ee:	4401      	add	r1, r0
 800c3f0:	1850      	adds	r0, r2, r1
 800c3f2:	4283      	cmp	r3, r0
 800c3f4:	6011      	str	r1, [r2, #0]
 800c3f6:	d1e0      	bne.n	800c3ba <_free_r+0x22>
 800c3f8:	6818      	ldr	r0, [r3, #0]
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	6053      	str	r3, [r2, #4]
 800c3fe:	4408      	add	r0, r1
 800c400:	6010      	str	r0, [r2, #0]
 800c402:	e7da      	b.n	800c3ba <_free_r+0x22>
 800c404:	d902      	bls.n	800c40c <_free_r+0x74>
 800c406:	230c      	movs	r3, #12
 800c408:	602b      	str	r3, [r5, #0]
 800c40a:	e7d6      	b.n	800c3ba <_free_r+0x22>
 800c40c:	6820      	ldr	r0, [r4, #0]
 800c40e:	1821      	adds	r1, r4, r0
 800c410:	428b      	cmp	r3, r1
 800c412:	bf04      	itt	eq
 800c414:	6819      	ldreq	r1, [r3, #0]
 800c416:	685b      	ldreq	r3, [r3, #4]
 800c418:	6063      	str	r3, [r4, #4]
 800c41a:	bf04      	itt	eq
 800c41c:	1809      	addeq	r1, r1, r0
 800c41e:	6021      	streq	r1, [r4, #0]
 800c420:	6054      	str	r4, [r2, #4]
 800c422:	e7ca      	b.n	800c3ba <_free_r+0x22>
 800c424:	bd38      	pop	{r3, r4, r5, pc}
 800c426:	bf00      	nop
 800c428:	20004b58 	.word	0x20004b58

0800c42c <malloc>:
 800c42c:	4b02      	ldr	r3, [pc, #8]	@ (800c438 <malloc+0xc>)
 800c42e:	4601      	mov	r1, r0
 800c430:	6818      	ldr	r0, [r3, #0]
 800c432:	f000 b825 	b.w	800c480 <_malloc_r>
 800c436:	bf00      	nop
 800c438:	20000030 	.word	0x20000030

0800c43c <sbrk_aligned>:
 800c43c:	b570      	push	{r4, r5, r6, lr}
 800c43e:	4e0f      	ldr	r6, [pc, #60]	@ (800c47c <sbrk_aligned+0x40>)
 800c440:	460c      	mov	r4, r1
 800c442:	6831      	ldr	r1, [r6, #0]
 800c444:	4605      	mov	r5, r0
 800c446:	b911      	cbnz	r1, 800c44e <sbrk_aligned+0x12>
 800c448:	f001 fe0c 	bl	800e064 <_sbrk_r>
 800c44c:	6030      	str	r0, [r6, #0]
 800c44e:	4621      	mov	r1, r4
 800c450:	4628      	mov	r0, r5
 800c452:	f001 fe07 	bl	800e064 <_sbrk_r>
 800c456:	1c43      	adds	r3, r0, #1
 800c458:	d103      	bne.n	800c462 <sbrk_aligned+0x26>
 800c45a:	f04f 34ff 	mov.w	r4, #4294967295
 800c45e:	4620      	mov	r0, r4
 800c460:	bd70      	pop	{r4, r5, r6, pc}
 800c462:	1cc4      	adds	r4, r0, #3
 800c464:	f024 0403 	bic.w	r4, r4, #3
 800c468:	42a0      	cmp	r0, r4
 800c46a:	d0f8      	beq.n	800c45e <sbrk_aligned+0x22>
 800c46c:	1a21      	subs	r1, r4, r0
 800c46e:	4628      	mov	r0, r5
 800c470:	f001 fdf8 	bl	800e064 <_sbrk_r>
 800c474:	3001      	adds	r0, #1
 800c476:	d1f2      	bne.n	800c45e <sbrk_aligned+0x22>
 800c478:	e7ef      	b.n	800c45a <sbrk_aligned+0x1e>
 800c47a:	bf00      	nop
 800c47c:	20004b54 	.word	0x20004b54

0800c480 <_malloc_r>:
 800c480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c484:	1ccd      	adds	r5, r1, #3
 800c486:	f025 0503 	bic.w	r5, r5, #3
 800c48a:	3508      	adds	r5, #8
 800c48c:	2d0c      	cmp	r5, #12
 800c48e:	bf38      	it	cc
 800c490:	250c      	movcc	r5, #12
 800c492:	2d00      	cmp	r5, #0
 800c494:	4606      	mov	r6, r0
 800c496:	db01      	blt.n	800c49c <_malloc_r+0x1c>
 800c498:	42a9      	cmp	r1, r5
 800c49a:	d904      	bls.n	800c4a6 <_malloc_r+0x26>
 800c49c:	230c      	movs	r3, #12
 800c49e:	6033      	str	r3, [r6, #0]
 800c4a0:	2000      	movs	r0, #0
 800c4a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c57c <_malloc_r+0xfc>
 800c4aa:	f000 f869 	bl	800c580 <__malloc_lock>
 800c4ae:	f8d8 3000 	ldr.w	r3, [r8]
 800c4b2:	461c      	mov	r4, r3
 800c4b4:	bb44      	cbnz	r4, 800c508 <_malloc_r+0x88>
 800c4b6:	4629      	mov	r1, r5
 800c4b8:	4630      	mov	r0, r6
 800c4ba:	f7ff ffbf 	bl	800c43c <sbrk_aligned>
 800c4be:	1c43      	adds	r3, r0, #1
 800c4c0:	4604      	mov	r4, r0
 800c4c2:	d158      	bne.n	800c576 <_malloc_r+0xf6>
 800c4c4:	f8d8 4000 	ldr.w	r4, [r8]
 800c4c8:	4627      	mov	r7, r4
 800c4ca:	2f00      	cmp	r7, #0
 800c4cc:	d143      	bne.n	800c556 <_malloc_r+0xd6>
 800c4ce:	2c00      	cmp	r4, #0
 800c4d0:	d04b      	beq.n	800c56a <_malloc_r+0xea>
 800c4d2:	6823      	ldr	r3, [r4, #0]
 800c4d4:	4639      	mov	r1, r7
 800c4d6:	4630      	mov	r0, r6
 800c4d8:	eb04 0903 	add.w	r9, r4, r3
 800c4dc:	f001 fdc2 	bl	800e064 <_sbrk_r>
 800c4e0:	4581      	cmp	r9, r0
 800c4e2:	d142      	bne.n	800c56a <_malloc_r+0xea>
 800c4e4:	6821      	ldr	r1, [r4, #0]
 800c4e6:	1a6d      	subs	r5, r5, r1
 800c4e8:	4629      	mov	r1, r5
 800c4ea:	4630      	mov	r0, r6
 800c4ec:	f7ff ffa6 	bl	800c43c <sbrk_aligned>
 800c4f0:	3001      	adds	r0, #1
 800c4f2:	d03a      	beq.n	800c56a <_malloc_r+0xea>
 800c4f4:	6823      	ldr	r3, [r4, #0]
 800c4f6:	442b      	add	r3, r5
 800c4f8:	6023      	str	r3, [r4, #0]
 800c4fa:	f8d8 3000 	ldr.w	r3, [r8]
 800c4fe:	685a      	ldr	r2, [r3, #4]
 800c500:	bb62      	cbnz	r2, 800c55c <_malloc_r+0xdc>
 800c502:	f8c8 7000 	str.w	r7, [r8]
 800c506:	e00f      	b.n	800c528 <_malloc_r+0xa8>
 800c508:	6822      	ldr	r2, [r4, #0]
 800c50a:	1b52      	subs	r2, r2, r5
 800c50c:	d420      	bmi.n	800c550 <_malloc_r+0xd0>
 800c50e:	2a0b      	cmp	r2, #11
 800c510:	d917      	bls.n	800c542 <_malloc_r+0xc2>
 800c512:	1961      	adds	r1, r4, r5
 800c514:	42a3      	cmp	r3, r4
 800c516:	6025      	str	r5, [r4, #0]
 800c518:	bf18      	it	ne
 800c51a:	6059      	strne	r1, [r3, #4]
 800c51c:	6863      	ldr	r3, [r4, #4]
 800c51e:	bf08      	it	eq
 800c520:	f8c8 1000 	streq.w	r1, [r8]
 800c524:	5162      	str	r2, [r4, r5]
 800c526:	604b      	str	r3, [r1, #4]
 800c528:	4630      	mov	r0, r6
 800c52a:	f000 f82f 	bl	800c58c <__malloc_unlock>
 800c52e:	f104 000b 	add.w	r0, r4, #11
 800c532:	1d23      	adds	r3, r4, #4
 800c534:	f020 0007 	bic.w	r0, r0, #7
 800c538:	1ac2      	subs	r2, r0, r3
 800c53a:	bf1c      	itt	ne
 800c53c:	1a1b      	subne	r3, r3, r0
 800c53e:	50a3      	strne	r3, [r4, r2]
 800c540:	e7af      	b.n	800c4a2 <_malloc_r+0x22>
 800c542:	6862      	ldr	r2, [r4, #4]
 800c544:	42a3      	cmp	r3, r4
 800c546:	bf0c      	ite	eq
 800c548:	f8c8 2000 	streq.w	r2, [r8]
 800c54c:	605a      	strne	r2, [r3, #4]
 800c54e:	e7eb      	b.n	800c528 <_malloc_r+0xa8>
 800c550:	4623      	mov	r3, r4
 800c552:	6864      	ldr	r4, [r4, #4]
 800c554:	e7ae      	b.n	800c4b4 <_malloc_r+0x34>
 800c556:	463c      	mov	r4, r7
 800c558:	687f      	ldr	r7, [r7, #4]
 800c55a:	e7b6      	b.n	800c4ca <_malloc_r+0x4a>
 800c55c:	461a      	mov	r2, r3
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	42a3      	cmp	r3, r4
 800c562:	d1fb      	bne.n	800c55c <_malloc_r+0xdc>
 800c564:	2300      	movs	r3, #0
 800c566:	6053      	str	r3, [r2, #4]
 800c568:	e7de      	b.n	800c528 <_malloc_r+0xa8>
 800c56a:	230c      	movs	r3, #12
 800c56c:	6033      	str	r3, [r6, #0]
 800c56e:	4630      	mov	r0, r6
 800c570:	f000 f80c 	bl	800c58c <__malloc_unlock>
 800c574:	e794      	b.n	800c4a0 <_malloc_r+0x20>
 800c576:	6005      	str	r5, [r0, #0]
 800c578:	e7d6      	b.n	800c528 <_malloc_r+0xa8>
 800c57a:	bf00      	nop
 800c57c:	20004b58 	.word	0x20004b58

0800c580 <__malloc_lock>:
 800c580:	4801      	ldr	r0, [pc, #4]	@ (800c588 <__malloc_lock+0x8>)
 800c582:	f7ff b8a6 	b.w	800b6d2 <__retarget_lock_acquire_recursive>
 800c586:	bf00      	nop
 800c588:	20004b50 	.word	0x20004b50

0800c58c <__malloc_unlock>:
 800c58c:	4801      	ldr	r0, [pc, #4]	@ (800c594 <__malloc_unlock+0x8>)
 800c58e:	f7ff b8a1 	b.w	800b6d4 <__retarget_lock_release_recursive>
 800c592:	bf00      	nop
 800c594:	20004b50 	.word	0x20004b50

0800c598 <_Balloc>:
 800c598:	b570      	push	{r4, r5, r6, lr}
 800c59a:	69c6      	ldr	r6, [r0, #28]
 800c59c:	4604      	mov	r4, r0
 800c59e:	460d      	mov	r5, r1
 800c5a0:	b976      	cbnz	r6, 800c5c0 <_Balloc+0x28>
 800c5a2:	2010      	movs	r0, #16
 800c5a4:	f7ff ff42 	bl	800c42c <malloc>
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	61e0      	str	r0, [r4, #28]
 800c5ac:	b920      	cbnz	r0, 800c5b8 <_Balloc+0x20>
 800c5ae:	4b18      	ldr	r3, [pc, #96]	@ (800c610 <_Balloc+0x78>)
 800c5b0:	4818      	ldr	r0, [pc, #96]	@ (800c614 <_Balloc+0x7c>)
 800c5b2:	216b      	movs	r1, #107	@ 0x6b
 800c5b4:	f001 fd70 	bl	800e098 <__assert_func>
 800c5b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5bc:	6006      	str	r6, [r0, #0]
 800c5be:	60c6      	str	r6, [r0, #12]
 800c5c0:	69e6      	ldr	r6, [r4, #28]
 800c5c2:	68f3      	ldr	r3, [r6, #12]
 800c5c4:	b183      	cbz	r3, 800c5e8 <_Balloc+0x50>
 800c5c6:	69e3      	ldr	r3, [r4, #28]
 800c5c8:	68db      	ldr	r3, [r3, #12]
 800c5ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c5ce:	b9b8      	cbnz	r0, 800c600 <_Balloc+0x68>
 800c5d0:	2101      	movs	r1, #1
 800c5d2:	fa01 f605 	lsl.w	r6, r1, r5
 800c5d6:	1d72      	adds	r2, r6, #5
 800c5d8:	0092      	lsls	r2, r2, #2
 800c5da:	4620      	mov	r0, r4
 800c5dc:	f001 fd7a 	bl	800e0d4 <_calloc_r>
 800c5e0:	b160      	cbz	r0, 800c5fc <_Balloc+0x64>
 800c5e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c5e6:	e00e      	b.n	800c606 <_Balloc+0x6e>
 800c5e8:	2221      	movs	r2, #33	@ 0x21
 800c5ea:	2104      	movs	r1, #4
 800c5ec:	4620      	mov	r0, r4
 800c5ee:	f001 fd71 	bl	800e0d4 <_calloc_r>
 800c5f2:	69e3      	ldr	r3, [r4, #28]
 800c5f4:	60f0      	str	r0, [r6, #12]
 800c5f6:	68db      	ldr	r3, [r3, #12]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d1e4      	bne.n	800c5c6 <_Balloc+0x2e>
 800c5fc:	2000      	movs	r0, #0
 800c5fe:	bd70      	pop	{r4, r5, r6, pc}
 800c600:	6802      	ldr	r2, [r0, #0]
 800c602:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c606:	2300      	movs	r3, #0
 800c608:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c60c:	e7f7      	b.n	800c5fe <_Balloc+0x66>
 800c60e:	bf00      	nop
 800c610:	0800f052 	.word	0x0800f052
 800c614:	0800f0d2 	.word	0x0800f0d2

0800c618 <_Bfree>:
 800c618:	b570      	push	{r4, r5, r6, lr}
 800c61a:	69c6      	ldr	r6, [r0, #28]
 800c61c:	4605      	mov	r5, r0
 800c61e:	460c      	mov	r4, r1
 800c620:	b976      	cbnz	r6, 800c640 <_Bfree+0x28>
 800c622:	2010      	movs	r0, #16
 800c624:	f7ff ff02 	bl	800c42c <malloc>
 800c628:	4602      	mov	r2, r0
 800c62a:	61e8      	str	r0, [r5, #28]
 800c62c:	b920      	cbnz	r0, 800c638 <_Bfree+0x20>
 800c62e:	4b09      	ldr	r3, [pc, #36]	@ (800c654 <_Bfree+0x3c>)
 800c630:	4809      	ldr	r0, [pc, #36]	@ (800c658 <_Bfree+0x40>)
 800c632:	218f      	movs	r1, #143	@ 0x8f
 800c634:	f001 fd30 	bl	800e098 <__assert_func>
 800c638:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c63c:	6006      	str	r6, [r0, #0]
 800c63e:	60c6      	str	r6, [r0, #12]
 800c640:	b13c      	cbz	r4, 800c652 <_Bfree+0x3a>
 800c642:	69eb      	ldr	r3, [r5, #28]
 800c644:	6862      	ldr	r2, [r4, #4]
 800c646:	68db      	ldr	r3, [r3, #12]
 800c648:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c64c:	6021      	str	r1, [r4, #0]
 800c64e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c652:	bd70      	pop	{r4, r5, r6, pc}
 800c654:	0800f052 	.word	0x0800f052
 800c658:	0800f0d2 	.word	0x0800f0d2

0800c65c <__multadd>:
 800c65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c660:	690d      	ldr	r5, [r1, #16]
 800c662:	4607      	mov	r7, r0
 800c664:	460c      	mov	r4, r1
 800c666:	461e      	mov	r6, r3
 800c668:	f101 0c14 	add.w	ip, r1, #20
 800c66c:	2000      	movs	r0, #0
 800c66e:	f8dc 3000 	ldr.w	r3, [ip]
 800c672:	b299      	uxth	r1, r3
 800c674:	fb02 6101 	mla	r1, r2, r1, r6
 800c678:	0c1e      	lsrs	r6, r3, #16
 800c67a:	0c0b      	lsrs	r3, r1, #16
 800c67c:	fb02 3306 	mla	r3, r2, r6, r3
 800c680:	b289      	uxth	r1, r1
 800c682:	3001      	adds	r0, #1
 800c684:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c688:	4285      	cmp	r5, r0
 800c68a:	f84c 1b04 	str.w	r1, [ip], #4
 800c68e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c692:	dcec      	bgt.n	800c66e <__multadd+0x12>
 800c694:	b30e      	cbz	r6, 800c6da <__multadd+0x7e>
 800c696:	68a3      	ldr	r3, [r4, #8]
 800c698:	42ab      	cmp	r3, r5
 800c69a:	dc19      	bgt.n	800c6d0 <__multadd+0x74>
 800c69c:	6861      	ldr	r1, [r4, #4]
 800c69e:	4638      	mov	r0, r7
 800c6a0:	3101      	adds	r1, #1
 800c6a2:	f7ff ff79 	bl	800c598 <_Balloc>
 800c6a6:	4680      	mov	r8, r0
 800c6a8:	b928      	cbnz	r0, 800c6b6 <__multadd+0x5a>
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	4b0c      	ldr	r3, [pc, #48]	@ (800c6e0 <__multadd+0x84>)
 800c6ae:	480d      	ldr	r0, [pc, #52]	@ (800c6e4 <__multadd+0x88>)
 800c6b0:	21ba      	movs	r1, #186	@ 0xba
 800c6b2:	f001 fcf1 	bl	800e098 <__assert_func>
 800c6b6:	6922      	ldr	r2, [r4, #16]
 800c6b8:	3202      	adds	r2, #2
 800c6ba:	f104 010c 	add.w	r1, r4, #12
 800c6be:	0092      	lsls	r2, r2, #2
 800c6c0:	300c      	adds	r0, #12
 800c6c2:	f7ff f808 	bl	800b6d6 <memcpy>
 800c6c6:	4621      	mov	r1, r4
 800c6c8:	4638      	mov	r0, r7
 800c6ca:	f7ff ffa5 	bl	800c618 <_Bfree>
 800c6ce:	4644      	mov	r4, r8
 800c6d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c6d4:	3501      	adds	r5, #1
 800c6d6:	615e      	str	r6, [r3, #20]
 800c6d8:	6125      	str	r5, [r4, #16]
 800c6da:	4620      	mov	r0, r4
 800c6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6e0:	0800f0c1 	.word	0x0800f0c1
 800c6e4:	0800f0d2 	.word	0x0800f0d2

0800c6e8 <__s2b>:
 800c6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6ec:	460c      	mov	r4, r1
 800c6ee:	4615      	mov	r5, r2
 800c6f0:	461f      	mov	r7, r3
 800c6f2:	2209      	movs	r2, #9
 800c6f4:	3308      	adds	r3, #8
 800c6f6:	4606      	mov	r6, r0
 800c6f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6fc:	2100      	movs	r1, #0
 800c6fe:	2201      	movs	r2, #1
 800c700:	429a      	cmp	r2, r3
 800c702:	db09      	blt.n	800c718 <__s2b+0x30>
 800c704:	4630      	mov	r0, r6
 800c706:	f7ff ff47 	bl	800c598 <_Balloc>
 800c70a:	b940      	cbnz	r0, 800c71e <__s2b+0x36>
 800c70c:	4602      	mov	r2, r0
 800c70e:	4b19      	ldr	r3, [pc, #100]	@ (800c774 <__s2b+0x8c>)
 800c710:	4819      	ldr	r0, [pc, #100]	@ (800c778 <__s2b+0x90>)
 800c712:	21d3      	movs	r1, #211	@ 0xd3
 800c714:	f001 fcc0 	bl	800e098 <__assert_func>
 800c718:	0052      	lsls	r2, r2, #1
 800c71a:	3101      	adds	r1, #1
 800c71c:	e7f0      	b.n	800c700 <__s2b+0x18>
 800c71e:	9b08      	ldr	r3, [sp, #32]
 800c720:	6143      	str	r3, [r0, #20]
 800c722:	2d09      	cmp	r5, #9
 800c724:	f04f 0301 	mov.w	r3, #1
 800c728:	6103      	str	r3, [r0, #16]
 800c72a:	dd16      	ble.n	800c75a <__s2b+0x72>
 800c72c:	f104 0909 	add.w	r9, r4, #9
 800c730:	46c8      	mov	r8, r9
 800c732:	442c      	add	r4, r5
 800c734:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c738:	4601      	mov	r1, r0
 800c73a:	3b30      	subs	r3, #48	@ 0x30
 800c73c:	220a      	movs	r2, #10
 800c73e:	4630      	mov	r0, r6
 800c740:	f7ff ff8c 	bl	800c65c <__multadd>
 800c744:	45a0      	cmp	r8, r4
 800c746:	d1f5      	bne.n	800c734 <__s2b+0x4c>
 800c748:	f1a5 0408 	sub.w	r4, r5, #8
 800c74c:	444c      	add	r4, r9
 800c74e:	1b2d      	subs	r5, r5, r4
 800c750:	1963      	adds	r3, r4, r5
 800c752:	42bb      	cmp	r3, r7
 800c754:	db04      	blt.n	800c760 <__s2b+0x78>
 800c756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c75a:	340a      	adds	r4, #10
 800c75c:	2509      	movs	r5, #9
 800c75e:	e7f6      	b.n	800c74e <__s2b+0x66>
 800c760:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c764:	4601      	mov	r1, r0
 800c766:	3b30      	subs	r3, #48	@ 0x30
 800c768:	220a      	movs	r2, #10
 800c76a:	4630      	mov	r0, r6
 800c76c:	f7ff ff76 	bl	800c65c <__multadd>
 800c770:	e7ee      	b.n	800c750 <__s2b+0x68>
 800c772:	bf00      	nop
 800c774:	0800f0c1 	.word	0x0800f0c1
 800c778:	0800f0d2 	.word	0x0800f0d2

0800c77c <__hi0bits>:
 800c77c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c780:	4603      	mov	r3, r0
 800c782:	bf36      	itet	cc
 800c784:	0403      	lslcc	r3, r0, #16
 800c786:	2000      	movcs	r0, #0
 800c788:	2010      	movcc	r0, #16
 800c78a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c78e:	bf3c      	itt	cc
 800c790:	021b      	lslcc	r3, r3, #8
 800c792:	3008      	addcc	r0, #8
 800c794:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c798:	bf3c      	itt	cc
 800c79a:	011b      	lslcc	r3, r3, #4
 800c79c:	3004      	addcc	r0, #4
 800c79e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7a2:	bf3c      	itt	cc
 800c7a4:	009b      	lslcc	r3, r3, #2
 800c7a6:	3002      	addcc	r0, #2
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	db05      	blt.n	800c7b8 <__hi0bits+0x3c>
 800c7ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c7b0:	f100 0001 	add.w	r0, r0, #1
 800c7b4:	bf08      	it	eq
 800c7b6:	2020      	moveq	r0, #32
 800c7b8:	4770      	bx	lr

0800c7ba <__lo0bits>:
 800c7ba:	6803      	ldr	r3, [r0, #0]
 800c7bc:	4602      	mov	r2, r0
 800c7be:	f013 0007 	ands.w	r0, r3, #7
 800c7c2:	d00b      	beq.n	800c7dc <__lo0bits+0x22>
 800c7c4:	07d9      	lsls	r1, r3, #31
 800c7c6:	d421      	bmi.n	800c80c <__lo0bits+0x52>
 800c7c8:	0798      	lsls	r0, r3, #30
 800c7ca:	bf49      	itett	mi
 800c7cc:	085b      	lsrmi	r3, r3, #1
 800c7ce:	089b      	lsrpl	r3, r3, #2
 800c7d0:	2001      	movmi	r0, #1
 800c7d2:	6013      	strmi	r3, [r2, #0]
 800c7d4:	bf5c      	itt	pl
 800c7d6:	6013      	strpl	r3, [r2, #0]
 800c7d8:	2002      	movpl	r0, #2
 800c7da:	4770      	bx	lr
 800c7dc:	b299      	uxth	r1, r3
 800c7de:	b909      	cbnz	r1, 800c7e4 <__lo0bits+0x2a>
 800c7e0:	0c1b      	lsrs	r3, r3, #16
 800c7e2:	2010      	movs	r0, #16
 800c7e4:	b2d9      	uxtb	r1, r3
 800c7e6:	b909      	cbnz	r1, 800c7ec <__lo0bits+0x32>
 800c7e8:	3008      	adds	r0, #8
 800c7ea:	0a1b      	lsrs	r3, r3, #8
 800c7ec:	0719      	lsls	r1, r3, #28
 800c7ee:	bf04      	itt	eq
 800c7f0:	091b      	lsreq	r3, r3, #4
 800c7f2:	3004      	addeq	r0, #4
 800c7f4:	0799      	lsls	r1, r3, #30
 800c7f6:	bf04      	itt	eq
 800c7f8:	089b      	lsreq	r3, r3, #2
 800c7fa:	3002      	addeq	r0, #2
 800c7fc:	07d9      	lsls	r1, r3, #31
 800c7fe:	d403      	bmi.n	800c808 <__lo0bits+0x4e>
 800c800:	085b      	lsrs	r3, r3, #1
 800c802:	f100 0001 	add.w	r0, r0, #1
 800c806:	d003      	beq.n	800c810 <__lo0bits+0x56>
 800c808:	6013      	str	r3, [r2, #0]
 800c80a:	4770      	bx	lr
 800c80c:	2000      	movs	r0, #0
 800c80e:	4770      	bx	lr
 800c810:	2020      	movs	r0, #32
 800c812:	4770      	bx	lr

0800c814 <__i2b>:
 800c814:	b510      	push	{r4, lr}
 800c816:	460c      	mov	r4, r1
 800c818:	2101      	movs	r1, #1
 800c81a:	f7ff febd 	bl	800c598 <_Balloc>
 800c81e:	4602      	mov	r2, r0
 800c820:	b928      	cbnz	r0, 800c82e <__i2b+0x1a>
 800c822:	4b05      	ldr	r3, [pc, #20]	@ (800c838 <__i2b+0x24>)
 800c824:	4805      	ldr	r0, [pc, #20]	@ (800c83c <__i2b+0x28>)
 800c826:	f240 1145 	movw	r1, #325	@ 0x145
 800c82a:	f001 fc35 	bl	800e098 <__assert_func>
 800c82e:	2301      	movs	r3, #1
 800c830:	6144      	str	r4, [r0, #20]
 800c832:	6103      	str	r3, [r0, #16]
 800c834:	bd10      	pop	{r4, pc}
 800c836:	bf00      	nop
 800c838:	0800f0c1 	.word	0x0800f0c1
 800c83c:	0800f0d2 	.word	0x0800f0d2

0800c840 <__multiply>:
 800c840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c844:	4614      	mov	r4, r2
 800c846:	690a      	ldr	r2, [r1, #16]
 800c848:	6923      	ldr	r3, [r4, #16]
 800c84a:	429a      	cmp	r2, r3
 800c84c:	bfa8      	it	ge
 800c84e:	4623      	movge	r3, r4
 800c850:	460f      	mov	r7, r1
 800c852:	bfa4      	itt	ge
 800c854:	460c      	movge	r4, r1
 800c856:	461f      	movge	r7, r3
 800c858:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c85c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c860:	68a3      	ldr	r3, [r4, #8]
 800c862:	6861      	ldr	r1, [r4, #4]
 800c864:	eb0a 0609 	add.w	r6, sl, r9
 800c868:	42b3      	cmp	r3, r6
 800c86a:	b085      	sub	sp, #20
 800c86c:	bfb8      	it	lt
 800c86e:	3101      	addlt	r1, #1
 800c870:	f7ff fe92 	bl	800c598 <_Balloc>
 800c874:	b930      	cbnz	r0, 800c884 <__multiply+0x44>
 800c876:	4602      	mov	r2, r0
 800c878:	4b44      	ldr	r3, [pc, #272]	@ (800c98c <__multiply+0x14c>)
 800c87a:	4845      	ldr	r0, [pc, #276]	@ (800c990 <__multiply+0x150>)
 800c87c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c880:	f001 fc0a 	bl	800e098 <__assert_func>
 800c884:	f100 0514 	add.w	r5, r0, #20
 800c888:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c88c:	462b      	mov	r3, r5
 800c88e:	2200      	movs	r2, #0
 800c890:	4543      	cmp	r3, r8
 800c892:	d321      	bcc.n	800c8d8 <__multiply+0x98>
 800c894:	f107 0114 	add.w	r1, r7, #20
 800c898:	f104 0214 	add.w	r2, r4, #20
 800c89c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c8a0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c8a4:	9302      	str	r3, [sp, #8]
 800c8a6:	1b13      	subs	r3, r2, r4
 800c8a8:	3b15      	subs	r3, #21
 800c8aa:	f023 0303 	bic.w	r3, r3, #3
 800c8ae:	3304      	adds	r3, #4
 800c8b0:	f104 0715 	add.w	r7, r4, #21
 800c8b4:	42ba      	cmp	r2, r7
 800c8b6:	bf38      	it	cc
 800c8b8:	2304      	movcc	r3, #4
 800c8ba:	9301      	str	r3, [sp, #4]
 800c8bc:	9b02      	ldr	r3, [sp, #8]
 800c8be:	9103      	str	r1, [sp, #12]
 800c8c0:	428b      	cmp	r3, r1
 800c8c2:	d80c      	bhi.n	800c8de <__multiply+0x9e>
 800c8c4:	2e00      	cmp	r6, #0
 800c8c6:	dd03      	ble.n	800c8d0 <__multiply+0x90>
 800c8c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d05b      	beq.n	800c988 <__multiply+0x148>
 800c8d0:	6106      	str	r6, [r0, #16]
 800c8d2:	b005      	add	sp, #20
 800c8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8d8:	f843 2b04 	str.w	r2, [r3], #4
 800c8dc:	e7d8      	b.n	800c890 <__multiply+0x50>
 800c8de:	f8b1 a000 	ldrh.w	sl, [r1]
 800c8e2:	f1ba 0f00 	cmp.w	sl, #0
 800c8e6:	d024      	beq.n	800c932 <__multiply+0xf2>
 800c8e8:	f104 0e14 	add.w	lr, r4, #20
 800c8ec:	46a9      	mov	r9, r5
 800c8ee:	f04f 0c00 	mov.w	ip, #0
 800c8f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c8f6:	f8d9 3000 	ldr.w	r3, [r9]
 800c8fa:	fa1f fb87 	uxth.w	fp, r7
 800c8fe:	b29b      	uxth	r3, r3
 800c900:	fb0a 330b 	mla	r3, sl, fp, r3
 800c904:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c908:	f8d9 7000 	ldr.w	r7, [r9]
 800c90c:	4463      	add	r3, ip
 800c90e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c912:	fb0a c70b 	mla	r7, sl, fp, ip
 800c916:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c920:	4572      	cmp	r2, lr
 800c922:	f849 3b04 	str.w	r3, [r9], #4
 800c926:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c92a:	d8e2      	bhi.n	800c8f2 <__multiply+0xb2>
 800c92c:	9b01      	ldr	r3, [sp, #4]
 800c92e:	f845 c003 	str.w	ip, [r5, r3]
 800c932:	9b03      	ldr	r3, [sp, #12]
 800c934:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c938:	3104      	adds	r1, #4
 800c93a:	f1b9 0f00 	cmp.w	r9, #0
 800c93e:	d021      	beq.n	800c984 <__multiply+0x144>
 800c940:	682b      	ldr	r3, [r5, #0]
 800c942:	f104 0c14 	add.w	ip, r4, #20
 800c946:	46ae      	mov	lr, r5
 800c948:	f04f 0a00 	mov.w	sl, #0
 800c94c:	f8bc b000 	ldrh.w	fp, [ip]
 800c950:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c954:	fb09 770b 	mla	r7, r9, fp, r7
 800c958:	4457      	add	r7, sl
 800c95a:	b29b      	uxth	r3, r3
 800c95c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c960:	f84e 3b04 	str.w	r3, [lr], #4
 800c964:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c968:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c96c:	f8be 3000 	ldrh.w	r3, [lr]
 800c970:	fb09 330a 	mla	r3, r9, sl, r3
 800c974:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c978:	4562      	cmp	r2, ip
 800c97a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c97e:	d8e5      	bhi.n	800c94c <__multiply+0x10c>
 800c980:	9f01      	ldr	r7, [sp, #4]
 800c982:	51eb      	str	r3, [r5, r7]
 800c984:	3504      	adds	r5, #4
 800c986:	e799      	b.n	800c8bc <__multiply+0x7c>
 800c988:	3e01      	subs	r6, #1
 800c98a:	e79b      	b.n	800c8c4 <__multiply+0x84>
 800c98c:	0800f0c1 	.word	0x0800f0c1
 800c990:	0800f0d2 	.word	0x0800f0d2

0800c994 <__pow5mult>:
 800c994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c998:	4615      	mov	r5, r2
 800c99a:	f012 0203 	ands.w	r2, r2, #3
 800c99e:	4607      	mov	r7, r0
 800c9a0:	460e      	mov	r6, r1
 800c9a2:	d007      	beq.n	800c9b4 <__pow5mult+0x20>
 800c9a4:	4c25      	ldr	r4, [pc, #148]	@ (800ca3c <__pow5mult+0xa8>)
 800c9a6:	3a01      	subs	r2, #1
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c9ae:	f7ff fe55 	bl	800c65c <__multadd>
 800c9b2:	4606      	mov	r6, r0
 800c9b4:	10ad      	asrs	r5, r5, #2
 800c9b6:	d03d      	beq.n	800ca34 <__pow5mult+0xa0>
 800c9b8:	69fc      	ldr	r4, [r7, #28]
 800c9ba:	b97c      	cbnz	r4, 800c9dc <__pow5mult+0x48>
 800c9bc:	2010      	movs	r0, #16
 800c9be:	f7ff fd35 	bl	800c42c <malloc>
 800c9c2:	4602      	mov	r2, r0
 800c9c4:	61f8      	str	r0, [r7, #28]
 800c9c6:	b928      	cbnz	r0, 800c9d4 <__pow5mult+0x40>
 800c9c8:	4b1d      	ldr	r3, [pc, #116]	@ (800ca40 <__pow5mult+0xac>)
 800c9ca:	481e      	ldr	r0, [pc, #120]	@ (800ca44 <__pow5mult+0xb0>)
 800c9cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c9d0:	f001 fb62 	bl	800e098 <__assert_func>
 800c9d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c9d8:	6004      	str	r4, [r0, #0]
 800c9da:	60c4      	str	r4, [r0, #12]
 800c9dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c9e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c9e4:	b94c      	cbnz	r4, 800c9fa <__pow5mult+0x66>
 800c9e6:	f240 2171 	movw	r1, #625	@ 0x271
 800c9ea:	4638      	mov	r0, r7
 800c9ec:	f7ff ff12 	bl	800c814 <__i2b>
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c9f6:	4604      	mov	r4, r0
 800c9f8:	6003      	str	r3, [r0, #0]
 800c9fa:	f04f 0900 	mov.w	r9, #0
 800c9fe:	07eb      	lsls	r3, r5, #31
 800ca00:	d50a      	bpl.n	800ca18 <__pow5mult+0x84>
 800ca02:	4631      	mov	r1, r6
 800ca04:	4622      	mov	r2, r4
 800ca06:	4638      	mov	r0, r7
 800ca08:	f7ff ff1a 	bl	800c840 <__multiply>
 800ca0c:	4631      	mov	r1, r6
 800ca0e:	4680      	mov	r8, r0
 800ca10:	4638      	mov	r0, r7
 800ca12:	f7ff fe01 	bl	800c618 <_Bfree>
 800ca16:	4646      	mov	r6, r8
 800ca18:	106d      	asrs	r5, r5, #1
 800ca1a:	d00b      	beq.n	800ca34 <__pow5mult+0xa0>
 800ca1c:	6820      	ldr	r0, [r4, #0]
 800ca1e:	b938      	cbnz	r0, 800ca30 <__pow5mult+0x9c>
 800ca20:	4622      	mov	r2, r4
 800ca22:	4621      	mov	r1, r4
 800ca24:	4638      	mov	r0, r7
 800ca26:	f7ff ff0b 	bl	800c840 <__multiply>
 800ca2a:	6020      	str	r0, [r4, #0]
 800ca2c:	f8c0 9000 	str.w	r9, [r0]
 800ca30:	4604      	mov	r4, r0
 800ca32:	e7e4      	b.n	800c9fe <__pow5mult+0x6a>
 800ca34:	4630      	mov	r0, r6
 800ca36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca3a:	bf00      	nop
 800ca3c:	0800f12c 	.word	0x0800f12c
 800ca40:	0800f052 	.word	0x0800f052
 800ca44:	0800f0d2 	.word	0x0800f0d2

0800ca48 <__lshift>:
 800ca48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca4c:	460c      	mov	r4, r1
 800ca4e:	6849      	ldr	r1, [r1, #4]
 800ca50:	6923      	ldr	r3, [r4, #16]
 800ca52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ca56:	68a3      	ldr	r3, [r4, #8]
 800ca58:	4607      	mov	r7, r0
 800ca5a:	4691      	mov	r9, r2
 800ca5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca60:	f108 0601 	add.w	r6, r8, #1
 800ca64:	42b3      	cmp	r3, r6
 800ca66:	db0b      	blt.n	800ca80 <__lshift+0x38>
 800ca68:	4638      	mov	r0, r7
 800ca6a:	f7ff fd95 	bl	800c598 <_Balloc>
 800ca6e:	4605      	mov	r5, r0
 800ca70:	b948      	cbnz	r0, 800ca86 <__lshift+0x3e>
 800ca72:	4602      	mov	r2, r0
 800ca74:	4b28      	ldr	r3, [pc, #160]	@ (800cb18 <__lshift+0xd0>)
 800ca76:	4829      	ldr	r0, [pc, #164]	@ (800cb1c <__lshift+0xd4>)
 800ca78:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ca7c:	f001 fb0c 	bl	800e098 <__assert_func>
 800ca80:	3101      	adds	r1, #1
 800ca82:	005b      	lsls	r3, r3, #1
 800ca84:	e7ee      	b.n	800ca64 <__lshift+0x1c>
 800ca86:	2300      	movs	r3, #0
 800ca88:	f100 0114 	add.w	r1, r0, #20
 800ca8c:	f100 0210 	add.w	r2, r0, #16
 800ca90:	4618      	mov	r0, r3
 800ca92:	4553      	cmp	r3, sl
 800ca94:	db33      	blt.n	800cafe <__lshift+0xb6>
 800ca96:	6920      	ldr	r0, [r4, #16]
 800ca98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca9c:	f104 0314 	add.w	r3, r4, #20
 800caa0:	f019 091f 	ands.w	r9, r9, #31
 800caa4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800caa8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800caac:	d02b      	beq.n	800cb06 <__lshift+0xbe>
 800caae:	f1c9 0e20 	rsb	lr, r9, #32
 800cab2:	468a      	mov	sl, r1
 800cab4:	2200      	movs	r2, #0
 800cab6:	6818      	ldr	r0, [r3, #0]
 800cab8:	fa00 f009 	lsl.w	r0, r0, r9
 800cabc:	4310      	orrs	r0, r2
 800cabe:	f84a 0b04 	str.w	r0, [sl], #4
 800cac2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cac6:	459c      	cmp	ip, r3
 800cac8:	fa22 f20e 	lsr.w	r2, r2, lr
 800cacc:	d8f3      	bhi.n	800cab6 <__lshift+0x6e>
 800cace:	ebac 0304 	sub.w	r3, ip, r4
 800cad2:	3b15      	subs	r3, #21
 800cad4:	f023 0303 	bic.w	r3, r3, #3
 800cad8:	3304      	adds	r3, #4
 800cada:	f104 0015 	add.w	r0, r4, #21
 800cade:	4584      	cmp	ip, r0
 800cae0:	bf38      	it	cc
 800cae2:	2304      	movcc	r3, #4
 800cae4:	50ca      	str	r2, [r1, r3]
 800cae6:	b10a      	cbz	r2, 800caec <__lshift+0xa4>
 800cae8:	f108 0602 	add.w	r6, r8, #2
 800caec:	3e01      	subs	r6, #1
 800caee:	4638      	mov	r0, r7
 800caf0:	612e      	str	r6, [r5, #16]
 800caf2:	4621      	mov	r1, r4
 800caf4:	f7ff fd90 	bl	800c618 <_Bfree>
 800caf8:	4628      	mov	r0, r5
 800cafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cafe:	f842 0f04 	str.w	r0, [r2, #4]!
 800cb02:	3301      	adds	r3, #1
 800cb04:	e7c5      	b.n	800ca92 <__lshift+0x4a>
 800cb06:	3904      	subs	r1, #4
 800cb08:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb0c:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb10:	459c      	cmp	ip, r3
 800cb12:	d8f9      	bhi.n	800cb08 <__lshift+0xc0>
 800cb14:	e7ea      	b.n	800caec <__lshift+0xa4>
 800cb16:	bf00      	nop
 800cb18:	0800f0c1 	.word	0x0800f0c1
 800cb1c:	0800f0d2 	.word	0x0800f0d2

0800cb20 <__mcmp>:
 800cb20:	690a      	ldr	r2, [r1, #16]
 800cb22:	4603      	mov	r3, r0
 800cb24:	6900      	ldr	r0, [r0, #16]
 800cb26:	1a80      	subs	r0, r0, r2
 800cb28:	b530      	push	{r4, r5, lr}
 800cb2a:	d10e      	bne.n	800cb4a <__mcmp+0x2a>
 800cb2c:	3314      	adds	r3, #20
 800cb2e:	3114      	adds	r1, #20
 800cb30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cb34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cb38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cb3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cb40:	4295      	cmp	r5, r2
 800cb42:	d003      	beq.n	800cb4c <__mcmp+0x2c>
 800cb44:	d205      	bcs.n	800cb52 <__mcmp+0x32>
 800cb46:	f04f 30ff 	mov.w	r0, #4294967295
 800cb4a:	bd30      	pop	{r4, r5, pc}
 800cb4c:	42a3      	cmp	r3, r4
 800cb4e:	d3f3      	bcc.n	800cb38 <__mcmp+0x18>
 800cb50:	e7fb      	b.n	800cb4a <__mcmp+0x2a>
 800cb52:	2001      	movs	r0, #1
 800cb54:	e7f9      	b.n	800cb4a <__mcmp+0x2a>
	...

0800cb58 <__mdiff>:
 800cb58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb5c:	4689      	mov	r9, r1
 800cb5e:	4606      	mov	r6, r0
 800cb60:	4611      	mov	r1, r2
 800cb62:	4648      	mov	r0, r9
 800cb64:	4614      	mov	r4, r2
 800cb66:	f7ff ffdb 	bl	800cb20 <__mcmp>
 800cb6a:	1e05      	subs	r5, r0, #0
 800cb6c:	d112      	bne.n	800cb94 <__mdiff+0x3c>
 800cb6e:	4629      	mov	r1, r5
 800cb70:	4630      	mov	r0, r6
 800cb72:	f7ff fd11 	bl	800c598 <_Balloc>
 800cb76:	4602      	mov	r2, r0
 800cb78:	b928      	cbnz	r0, 800cb86 <__mdiff+0x2e>
 800cb7a:	4b3f      	ldr	r3, [pc, #252]	@ (800cc78 <__mdiff+0x120>)
 800cb7c:	f240 2137 	movw	r1, #567	@ 0x237
 800cb80:	483e      	ldr	r0, [pc, #248]	@ (800cc7c <__mdiff+0x124>)
 800cb82:	f001 fa89 	bl	800e098 <__assert_func>
 800cb86:	2301      	movs	r3, #1
 800cb88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cb8c:	4610      	mov	r0, r2
 800cb8e:	b003      	add	sp, #12
 800cb90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb94:	bfbc      	itt	lt
 800cb96:	464b      	movlt	r3, r9
 800cb98:	46a1      	movlt	r9, r4
 800cb9a:	4630      	mov	r0, r6
 800cb9c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cba0:	bfba      	itte	lt
 800cba2:	461c      	movlt	r4, r3
 800cba4:	2501      	movlt	r5, #1
 800cba6:	2500      	movge	r5, #0
 800cba8:	f7ff fcf6 	bl	800c598 <_Balloc>
 800cbac:	4602      	mov	r2, r0
 800cbae:	b918      	cbnz	r0, 800cbb8 <__mdiff+0x60>
 800cbb0:	4b31      	ldr	r3, [pc, #196]	@ (800cc78 <__mdiff+0x120>)
 800cbb2:	f240 2145 	movw	r1, #581	@ 0x245
 800cbb6:	e7e3      	b.n	800cb80 <__mdiff+0x28>
 800cbb8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cbbc:	6926      	ldr	r6, [r4, #16]
 800cbbe:	60c5      	str	r5, [r0, #12]
 800cbc0:	f109 0310 	add.w	r3, r9, #16
 800cbc4:	f109 0514 	add.w	r5, r9, #20
 800cbc8:	f104 0e14 	add.w	lr, r4, #20
 800cbcc:	f100 0b14 	add.w	fp, r0, #20
 800cbd0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cbd4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cbd8:	9301      	str	r3, [sp, #4]
 800cbda:	46d9      	mov	r9, fp
 800cbdc:	f04f 0c00 	mov.w	ip, #0
 800cbe0:	9b01      	ldr	r3, [sp, #4]
 800cbe2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cbe6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cbea:	9301      	str	r3, [sp, #4]
 800cbec:	fa1f f38a 	uxth.w	r3, sl
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	b283      	uxth	r3, r0
 800cbf4:	1acb      	subs	r3, r1, r3
 800cbf6:	0c00      	lsrs	r0, r0, #16
 800cbf8:	4463      	add	r3, ip
 800cbfa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cbfe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cc02:	b29b      	uxth	r3, r3
 800cc04:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cc08:	4576      	cmp	r6, lr
 800cc0a:	f849 3b04 	str.w	r3, [r9], #4
 800cc0e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cc12:	d8e5      	bhi.n	800cbe0 <__mdiff+0x88>
 800cc14:	1b33      	subs	r3, r6, r4
 800cc16:	3b15      	subs	r3, #21
 800cc18:	f023 0303 	bic.w	r3, r3, #3
 800cc1c:	3415      	adds	r4, #21
 800cc1e:	3304      	adds	r3, #4
 800cc20:	42a6      	cmp	r6, r4
 800cc22:	bf38      	it	cc
 800cc24:	2304      	movcc	r3, #4
 800cc26:	441d      	add	r5, r3
 800cc28:	445b      	add	r3, fp
 800cc2a:	461e      	mov	r6, r3
 800cc2c:	462c      	mov	r4, r5
 800cc2e:	4544      	cmp	r4, r8
 800cc30:	d30e      	bcc.n	800cc50 <__mdiff+0xf8>
 800cc32:	f108 0103 	add.w	r1, r8, #3
 800cc36:	1b49      	subs	r1, r1, r5
 800cc38:	f021 0103 	bic.w	r1, r1, #3
 800cc3c:	3d03      	subs	r5, #3
 800cc3e:	45a8      	cmp	r8, r5
 800cc40:	bf38      	it	cc
 800cc42:	2100      	movcc	r1, #0
 800cc44:	440b      	add	r3, r1
 800cc46:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc4a:	b191      	cbz	r1, 800cc72 <__mdiff+0x11a>
 800cc4c:	6117      	str	r7, [r2, #16]
 800cc4e:	e79d      	b.n	800cb8c <__mdiff+0x34>
 800cc50:	f854 1b04 	ldr.w	r1, [r4], #4
 800cc54:	46e6      	mov	lr, ip
 800cc56:	0c08      	lsrs	r0, r1, #16
 800cc58:	fa1c fc81 	uxtah	ip, ip, r1
 800cc5c:	4471      	add	r1, lr
 800cc5e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cc62:	b289      	uxth	r1, r1
 800cc64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cc68:	f846 1b04 	str.w	r1, [r6], #4
 800cc6c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cc70:	e7dd      	b.n	800cc2e <__mdiff+0xd6>
 800cc72:	3f01      	subs	r7, #1
 800cc74:	e7e7      	b.n	800cc46 <__mdiff+0xee>
 800cc76:	bf00      	nop
 800cc78:	0800f0c1 	.word	0x0800f0c1
 800cc7c:	0800f0d2 	.word	0x0800f0d2

0800cc80 <__ulp>:
 800cc80:	b082      	sub	sp, #8
 800cc82:	ed8d 0b00 	vstr	d0, [sp]
 800cc86:	9a01      	ldr	r2, [sp, #4]
 800cc88:	4b0f      	ldr	r3, [pc, #60]	@ (800ccc8 <__ulp+0x48>)
 800cc8a:	4013      	ands	r3, r2
 800cc8c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	dc08      	bgt.n	800cca6 <__ulp+0x26>
 800cc94:	425b      	negs	r3, r3
 800cc96:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800cc9a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cc9e:	da04      	bge.n	800ccaa <__ulp+0x2a>
 800cca0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cca4:	4113      	asrs	r3, r2
 800cca6:	2200      	movs	r2, #0
 800cca8:	e008      	b.n	800ccbc <__ulp+0x3c>
 800ccaa:	f1a2 0314 	sub.w	r3, r2, #20
 800ccae:	2b1e      	cmp	r3, #30
 800ccb0:	bfda      	itte	le
 800ccb2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ccb6:	40da      	lsrle	r2, r3
 800ccb8:	2201      	movgt	r2, #1
 800ccba:	2300      	movs	r3, #0
 800ccbc:	4619      	mov	r1, r3
 800ccbe:	4610      	mov	r0, r2
 800ccc0:	ec41 0b10 	vmov	d0, r0, r1
 800ccc4:	b002      	add	sp, #8
 800ccc6:	4770      	bx	lr
 800ccc8:	7ff00000 	.word	0x7ff00000

0800cccc <__b2d>:
 800cccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccd0:	6906      	ldr	r6, [r0, #16]
 800ccd2:	f100 0814 	add.w	r8, r0, #20
 800ccd6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ccda:	1f37      	subs	r7, r6, #4
 800ccdc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cce0:	4610      	mov	r0, r2
 800cce2:	f7ff fd4b 	bl	800c77c <__hi0bits>
 800cce6:	f1c0 0320 	rsb	r3, r0, #32
 800ccea:	280a      	cmp	r0, #10
 800ccec:	600b      	str	r3, [r1, #0]
 800ccee:	491b      	ldr	r1, [pc, #108]	@ (800cd5c <__b2d+0x90>)
 800ccf0:	dc15      	bgt.n	800cd1e <__b2d+0x52>
 800ccf2:	f1c0 0c0b 	rsb	ip, r0, #11
 800ccf6:	fa22 f30c 	lsr.w	r3, r2, ip
 800ccfa:	45b8      	cmp	r8, r7
 800ccfc:	ea43 0501 	orr.w	r5, r3, r1
 800cd00:	bf34      	ite	cc
 800cd02:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cd06:	2300      	movcs	r3, #0
 800cd08:	3015      	adds	r0, #21
 800cd0a:	fa02 f000 	lsl.w	r0, r2, r0
 800cd0e:	fa23 f30c 	lsr.w	r3, r3, ip
 800cd12:	4303      	orrs	r3, r0
 800cd14:	461c      	mov	r4, r3
 800cd16:	ec45 4b10 	vmov	d0, r4, r5
 800cd1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd1e:	45b8      	cmp	r8, r7
 800cd20:	bf3a      	itte	cc
 800cd22:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cd26:	f1a6 0708 	subcc.w	r7, r6, #8
 800cd2a:	2300      	movcs	r3, #0
 800cd2c:	380b      	subs	r0, #11
 800cd2e:	d012      	beq.n	800cd56 <__b2d+0x8a>
 800cd30:	f1c0 0120 	rsb	r1, r0, #32
 800cd34:	fa23 f401 	lsr.w	r4, r3, r1
 800cd38:	4082      	lsls	r2, r0
 800cd3a:	4322      	orrs	r2, r4
 800cd3c:	4547      	cmp	r7, r8
 800cd3e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800cd42:	bf8c      	ite	hi
 800cd44:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cd48:	2200      	movls	r2, #0
 800cd4a:	4083      	lsls	r3, r0
 800cd4c:	40ca      	lsrs	r2, r1
 800cd4e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cd52:	4313      	orrs	r3, r2
 800cd54:	e7de      	b.n	800cd14 <__b2d+0x48>
 800cd56:	ea42 0501 	orr.w	r5, r2, r1
 800cd5a:	e7db      	b.n	800cd14 <__b2d+0x48>
 800cd5c:	3ff00000 	.word	0x3ff00000

0800cd60 <__d2b>:
 800cd60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cd64:	460f      	mov	r7, r1
 800cd66:	2101      	movs	r1, #1
 800cd68:	ec59 8b10 	vmov	r8, r9, d0
 800cd6c:	4616      	mov	r6, r2
 800cd6e:	f7ff fc13 	bl	800c598 <_Balloc>
 800cd72:	4604      	mov	r4, r0
 800cd74:	b930      	cbnz	r0, 800cd84 <__d2b+0x24>
 800cd76:	4602      	mov	r2, r0
 800cd78:	4b23      	ldr	r3, [pc, #140]	@ (800ce08 <__d2b+0xa8>)
 800cd7a:	4824      	ldr	r0, [pc, #144]	@ (800ce0c <__d2b+0xac>)
 800cd7c:	f240 310f 	movw	r1, #783	@ 0x30f
 800cd80:	f001 f98a 	bl	800e098 <__assert_func>
 800cd84:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cd88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cd8c:	b10d      	cbz	r5, 800cd92 <__d2b+0x32>
 800cd8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cd92:	9301      	str	r3, [sp, #4]
 800cd94:	f1b8 0300 	subs.w	r3, r8, #0
 800cd98:	d023      	beq.n	800cde2 <__d2b+0x82>
 800cd9a:	4668      	mov	r0, sp
 800cd9c:	9300      	str	r3, [sp, #0]
 800cd9e:	f7ff fd0c 	bl	800c7ba <__lo0bits>
 800cda2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cda6:	b1d0      	cbz	r0, 800cdde <__d2b+0x7e>
 800cda8:	f1c0 0320 	rsb	r3, r0, #32
 800cdac:	fa02 f303 	lsl.w	r3, r2, r3
 800cdb0:	430b      	orrs	r3, r1
 800cdb2:	40c2      	lsrs	r2, r0
 800cdb4:	6163      	str	r3, [r4, #20]
 800cdb6:	9201      	str	r2, [sp, #4]
 800cdb8:	9b01      	ldr	r3, [sp, #4]
 800cdba:	61a3      	str	r3, [r4, #24]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	bf0c      	ite	eq
 800cdc0:	2201      	moveq	r2, #1
 800cdc2:	2202      	movne	r2, #2
 800cdc4:	6122      	str	r2, [r4, #16]
 800cdc6:	b1a5      	cbz	r5, 800cdf2 <__d2b+0x92>
 800cdc8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cdcc:	4405      	add	r5, r0
 800cdce:	603d      	str	r5, [r7, #0]
 800cdd0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cdd4:	6030      	str	r0, [r6, #0]
 800cdd6:	4620      	mov	r0, r4
 800cdd8:	b003      	add	sp, #12
 800cdda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdde:	6161      	str	r1, [r4, #20]
 800cde0:	e7ea      	b.n	800cdb8 <__d2b+0x58>
 800cde2:	a801      	add	r0, sp, #4
 800cde4:	f7ff fce9 	bl	800c7ba <__lo0bits>
 800cde8:	9b01      	ldr	r3, [sp, #4]
 800cdea:	6163      	str	r3, [r4, #20]
 800cdec:	3020      	adds	r0, #32
 800cdee:	2201      	movs	r2, #1
 800cdf0:	e7e8      	b.n	800cdc4 <__d2b+0x64>
 800cdf2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cdf6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cdfa:	6038      	str	r0, [r7, #0]
 800cdfc:	6918      	ldr	r0, [r3, #16]
 800cdfe:	f7ff fcbd 	bl	800c77c <__hi0bits>
 800ce02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ce06:	e7e5      	b.n	800cdd4 <__d2b+0x74>
 800ce08:	0800f0c1 	.word	0x0800f0c1
 800ce0c:	0800f0d2 	.word	0x0800f0d2

0800ce10 <__ratio>:
 800ce10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce14:	b085      	sub	sp, #20
 800ce16:	e9cd 1000 	strd	r1, r0, [sp]
 800ce1a:	a902      	add	r1, sp, #8
 800ce1c:	f7ff ff56 	bl	800cccc <__b2d>
 800ce20:	9800      	ldr	r0, [sp, #0]
 800ce22:	a903      	add	r1, sp, #12
 800ce24:	ec55 4b10 	vmov	r4, r5, d0
 800ce28:	f7ff ff50 	bl	800cccc <__b2d>
 800ce2c:	9b01      	ldr	r3, [sp, #4]
 800ce2e:	6919      	ldr	r1, [r3, #16]
 800ce30:	9b00      	ldr	r3, [sp, #0]
 800ce32:	691b      	ldr	r3, [r3, #16]
 800ce34:	1ac9      	subs	r1, r1, r3
 800ce36:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ce3a:	1a9b      	subs	r3, r3, r2
 800ce3c:	ec5b ab10 	vmov	sl, fp, d0
 800ce40:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	bfce      	itee	gt
 800ce48:	462a      	movgt	r2, r5
 800ce4a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ce4e:	465a      	movle	r2, fp
 800ce50:	462f      	mov	r7, r5
 800ce52:	46d9      	mov	r9, fp
 800ce54:	bfcc      	ite	gt
 800ce56:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ce5a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ce5e:	464b      	mov	r3, r9
 800ce60:	4652      	mov	r2, sl
 800ce62:	4620      	mov	r0, r4
 800ce64:	4639      	mov	r1, r7
 800ce66:	f7f3 fcf9 	bl	800085c <__aeabi_ddiv>
 800ce6a:	ec41 0b10 	vmov	d0, r0, r1
 800ce6e:	b005      	add	sp, #20
 800ce70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ce74 <__copybits>:
 800ce74:	3901      	subs	r1, #1
 800ce76:	b570      	push	{r4, r5, r6, lr}
 800ce78:	1149      	asrs	r1, r1, #5
 800ce7a:	6914      	ldr	r4, [r2, #16]
 800ce7c:	3101      	adds	r1, #1
 800ce7e:	f102 0314 	add.w	r3, r2, #20
 800ce82:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ce86:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ce8a:	1f05      	subs	r5, r0, #4
 800ce8c:	42a3      	cmp	r3, r4
 800ce8e:	d30c      	bcc.n	800ceaa <__copybits+0x36>
 800ce90:	1aa3      	subs	r3, r4, r2
 800ce92:	3b11      	subs	r3, #17
 800ce94:	f023 0303 	bic.w	r3, r3, #3
 800ce98:	3211      	adds	r2, #17
 800ce9a:	42a2      	cmp	r2, r4
 800ce9c:	bf88      	it	hi
 800ce9e:	2300      	movhi	r3, #0
 800cea0:	4418      	add	r0, r3
 800cea2:	2300      	movs	r3, #0
 800cea4:	4288      	cmp	r0, r1
 800cea6:	d305      	bcc.n	800ceb4 <__copybits+0x40>
 800cea8:	bd70      	pop	{r4, r5, r6, pc}
 800ceaa:	f853 6b04 	ldr.w	r6, [r3], #4
 800ceae:	f845 6f04 	str.w	r6, [r5, #4]!
 800ceb2:	e7eb      	b.n	800ce8c <__copybits+0x18>
 800ceb4:	f840 3b04 	str.w	r3, [r0], #4
 800ceb8:	e7f4      	b.n	800cea4 <__copybits+0x30>

0800ceba <__any_on>:
 800ceba:	f100 0214 	add.w	r2, r0, #20
 800cebe:	6900      	ldr	r0, [r0, #16]
 800cec0:	114b      	asrs	r3, r1, #5
 800cec2:	4298      	cmp	r0, r3
 800cec4:	b510      	push	{r4, lr}
 800cec6:	db11      	blt.n	800ceec <__any_on+0x32>
 800cec8:	dd0a      	ble.n	800cee0 <__any_on+0x26>
 800ceca:	f011 011f 	ands.w	r1, r1, #31
 800cece:	d007      	beq.n	800cee0 <__any_on+0x26>
 800ced0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ced4:	fa24 f001 	lsr.w	r0, r4, r1
 800ced8:	fa00 f101 	lsl.w	r1, r0, r1
 800cedc:	428c      	cmp	r4, r1
 800cede:	d10b      	bne.n	800cef8 <__any_on+0x3e>
 800cee0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d803      	bhi.n	800cef0 <__any_on+0x36>
 800cee8:	2000      	movs	r0, #0
 800ceea:	bd10      	pop	{r4, pc}
 800ceec:	4603      	mov	r3, r0
 800ceee:	e7f7      	b.n	800cee0 <__any_on+0x26>
 800cef0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cef4:	2900      	cmp	r1, #0
 800cef6:	d0f5      	beq.n	800cee4 <__any_on+0x2a>
 800cef8:	2001      	movs	r0, #1
 800cefa:	e7f6      	b.n	800ceea <__any_on+0x30>

0800cefc <sulp>:
 800cefc:	b570      	push	{r4, r5, r6, lr}
 800cefe:	4604      	mov	r4, r0
 800cf00:	460d      	mov	r5, r1
 800cf02:	ec45 4b10 	vmov	d0, r4, r5
 800cf06:	4616      	mov	r6, r2
 800cf08:	f7ff feba 	bl	800cc80 <__ulp>
 800cf0c:	ec51 0b10 	vmov	r0, r1, d0
 800cf10:	b17e      	cbz	r6, 800cf32 <sulp+0x36>
 800cf12:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cf16:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	dd09      	ble.n	800cf32 <sulp+0x36>
 800cf1e:	051b      	lsls	r3, r3, #20
 800cf20:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800cf24:	2400      	movs	r4, #0
 800cf26:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800cf2a:	4622      	mov	r2, r4
 800cf2c:	462b      	mov	r3, r5
 800cf2e:	f7f3 fb6b 	bl	8000608 <__aeabi_dmul>
 800cf32:	ec41 0b10 	vmov	d0, r0, r1
 800cf36:	bd70      	pop	{r4, r5, r6, pc}

0800cf38 <_strtod_l>:
 800cf38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf3c:	b09f      	sub	sp, #124	@ 0x7c
 800cf3e:	460c      	mov	r4, r1
 800cf40:	9217      	str	r2, [sp, #92]	@ 0x5c
 800cf42:	2200      	movs	r2, #0
 800cf44:	921a      	str	r2, [sp, #104]	@ 0x68
 800cf46:	9005      	str	r0, [sp, #20]
 800cf48:	f04f 0a00 	mov.w	sl, #0
 800cf4c:	f04f 0b00 	mov.w	fp, #0
 800cf50:	460a      	mov	r2, r1
 800cf52:	9219      	str	r2, [sp, #100]	@ 0x64
 800cf54:	7811      	ldrb	r1, [r2, #0]
 800cf56:	292b      	cmp	r1, #43	@ 0x2b
 800cf58:	d04a      	beq.n	800cff0 <_strtod_l+0xb8>
 800cf5a:	d838      	bhi.n	800cfce <_strtod_l+0x96>
 800cf5c:	290d      	cmp	r1, #13
 800cf5e:	d832      	bhi.n	800cfc6 <_strtod_l+0x8e>
 800cf60:	2908      	cmp	r1, #8
 800cf62:	d832      	bhi.n	800cfca <_strtod_l+0x92>
 800cf64:	2900      	cmp	r1, #0
 800cf66:	d03b      	beq.n	800cfe0 <_strtod_l+0xa8>
 800cf68:	2200      	movs	r2, #0
 800cf6a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cf6c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800cf6e:	782a      	ldrb	r2, [r5, #0]
 800cf70:	2a30      	cmp	r2, #48	@ 0x30
 800cf72:	f040 80b3 	bne.w	800d0dc <_strtod_l+0x1a4>
 800cf76:	786a      	ldrb	r2, [r5, #1]
 800cf78:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cf7c:	2a58      	cmp	r2, #88	@ 0x58
 800cf7e:	d16e      	bne.n	800d05e <_strtod_l+0x126>
 800cf80:	9302      	str	r3, [sp, #8]
 800cf82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf84:	9301      	str	r3, [sp, #4]
 800cf86:	ab1a      	add	r3, sp, #104	@ 0x68
 800cf88:	9300      	str	r3, [sp, #0]
 800cf8a:	4a8e      	ldr	r2, [pc, #568]	@ (800d1c4 <_strtod_l+0x28c>)
 800cf8c:	9805      	ldr	r0, [sp, #20]
 800cf8e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cf90:	a919      	add	r1, sp, #100	@ 0x64
 800cf92:	f001 f91b 	bl	800e1cc <__gethex>
 800cf96:	f010 060f 	ands.w	r6, r0, #15
 800cf9a:	4604      	mov	r4, r0
 800cf9c:	d005      	beq.n	800cfaa <_strtod_l+0x72>
 800cf9e:	2e06      	cmp	r6, #6
 800cfa0:	d128      	bne.n	800cff4 <_strtod_l+0xbc>
 800cfa2:	3501      	adds	r5, #1
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	9519      	str	r5, [sp, #100]	@ 0x64
 800cfa8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cfaa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	f040 858e 	bne.w	800dace <_strtod_l+0xb96>
 800cfb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cfb4:	b1cb      	cbz	r3, 800cfea <_strtod_l+0xb2>
 800cfb6:	4652      	mov	r2, sl
 800cfb8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800cfbc:	ec43 2b10 	vmov	d0, r2, r3
 800cfc0:	b01f      	add	sp, #124	@ 0x7c
 800cfc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfc6:	2920      	cmp	r1, #32
 800cfc8:	d1ce      	bne.n	800cf68 <_strtod_l+0x30>
 800cfca:	3201      	adds	r2, #1
 800cfcc:	e7c1      	b.n	800cf52 <_strtod_l+0x1a>
 800cfce:	292d      	cmp	r1, #45	@ 0x2d
 800cfd0:	d1ca      	bne.n	800cf68 <_strtod_l+0x30>
 800cfd2:	2101      	movs	r1, #1
 800cfd4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cfd6:	1c51      	adds	r1, r2, #1
 800cfd8:	9119      	str	r1, [sp, #100]	@ 0x64
 800cfda:	7852      	ldrb	r2, [r2, #1]
 800cfdc:	2a00      	cmp	r2, #0
 800cfde:	d1c5      	bne.n	800cf6c <_strtod_l+0x34>
 800cfe0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cfe2:	9419      	str	r4, [sp, #100]	@ 0x64
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	f040 8570 	bne.w	800daca <_strtod_l+0xb92>
 800cfea:	4652      	mov	r2, sl
 800cfec:	465b      	mov	r3, fp
 800cfee:	e7e5      	b.n	800cfbc <_strtod_l+0x84>
 800cff0:	2100      	movs	r1, #0
 800cff2:	e7ef      	b.n	800cfd4 <_strtod_l+0x9c>
 800cff4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cff6:	b13a      	cbz	r2, 800d008 <_strtod_l+0xd0>
 800cff8:	2135      	movs	r1, #53	@ 0x35
 800cffa:	a81c      	add	r0, sp, #112	@ 0x70
 800cffc:	f7ff ff3a 	bl	800ce74 <__copybits>
 800d000:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d002:	9805      	ldr	r0, [sp, #20]
 800d004:	f7ff fb08 	bl	800c618 <_Bfree>
 800d008:	3e01      	subs	r6, #1
 800d00a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d00c:	2e04      	cmp	r6, #4
 800d00e:	d806      	bhi.n	800d01e <_strtod_l+0xe6>
 800d010:	e8df f006 	tbb	[pc, r6]
 800d014:	201d0314 	.word	0x201d0314
 800d018:	14          	.byte	0x14
 800d019:	00          	.byte	0x00
 800d01a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d01e:	05e1      	lsls	r1, r4, #23
 800d020:	bf48      	it	mi
 800d022:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d026:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d02a:	0d1b      	lsrs	r3, r3, #20
 800d02c:	051b      	lsls	r3, r3, #20
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d1bb      	bne.n	800cfaa <_strtod_l+0x72>
 800d032:	f7fe fb23 	bl	800b67c <__errno>
 800d036:	2322      	movs	r3, #34	@ 0x22
 800d038:	6003      	str	r3, [r0, #0]
 800d03a:	e7b6      	b.n	800cfaa <_strtod_l+0x72>
 800d03c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d040:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d044:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d048:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d04c:	e7e7      	b.n	800d01e <_strtod_l+0xe6>
 800d04e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d1cc <_strtod_l+0x294>
 800d052:	e7e4      	b.n	800d01e <_strtod_l+0xe6>
 800d054:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d058:	f04f 3aff 	mov.w	sl, #4294967295
 800d05c:	e7df      	b.n	800d01e <_strtod_l+0xe6>
 800d05e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d060:	1c5a      	adds	r2, r3, #1
 800d062:	9219      	str	r2, [sp, #100]	@ 0x64
 800d064:	785b      	ldrb	r3, [r3, #1]
 800d066:	2b30      	cmp	r3, #48	@ 0x30
 800d068:	d0f9      	beq.n	800d05e <_strtod_l+0x126>
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d09d      	beq.n	800cfaa <_strtod_l+0x72>
 800d06e:	2301      	movs	r3, #1
 800d070:	9309      	str	r3, [sp, #36]	@ 0x24
 800d072:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d074:	930c      	str	r3, [sp, #48]	@ 0x30
 800d076:	2300      	movs	r3, #0
 800d078:	9308      	str	r3, [sp, #32]
 800d07a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d07c:	461f      	mov	r7, r3
 800d07e:	220a      	movs	r2, #10
 800d080:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d082:	7805      	ldrb	r5, [r0, #0]
 800d084:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d088:	b2d9      	uxtb	r1, r3
 800d08a:	2909      	cmp	r1, #9
 800d08c:	d928      	bls.n	800d0e0 <_strtod_l+0x1a8>
 800d08e:	494e      	ldr	r1, [pc, #312]	@ (800d1c8 <_strtod_l+0x290>)
 800d090:	2201      	movs	r2, #1
 800d092:	f000 ffd5 	bl	800e040 <strncmp>
 800d096:	2800      	cmp	r0, #0
 800d098:	d032      	beq.n	800d100 <_strtod_l+0x1c8>
 800d09a:	2000      	movs	r0, #0
 800d09c:	462a      	mov	r2, r5
 800d09e:	4681      	mov	r9, r0
 800d0a0:	463d      	mov	r5, r7
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	2a65      	cmp	r2, #101	@ 0x65
 800d0a6:	d001      	beq.n	800d0ac <_strtod_l+0x174>
 800d0a8:	2a45      	cmp	r2, #69	@ 0x45
 800d0aa:	d114      	bne.n	800d0d6 <_strtod_l+0x19e>
 800d0ac:	b91d      	cbnz	r5, 800d0b6 <_strtod_l+0x17e>
 800d0ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d0b0:	4302      	orrs	r2, r0
 800d0b2:	d095      	beq.n	800cfe0 <_strtod_l+0xa8>
 800d0b4:	2500      	movs	r5, #0
 800d0b6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d0b8:	1c62      	adds	r2, r4, #1
 800d0ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800d0bc:	7862      	ldrb	r2, [r4, #1]
 800d0be:	2a2b      	cmp	r2, #43	@ 0x2b
 800d0c0:	d077      	beq.n	800d1b2 <_strtod_l+0x27a>
 800d0c2:	2a2d      	cmp	r2, #45	@ 0x2d
 800d0c4:	d07b      	beq.n	800d1be <_strtod_l+0x286>
 800d0c6:	f04f 0c00 	mov.w	ip, #0
 800d0ca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d0ce:	2909      	cmp	r1, #9
 800d0d0:	f240 8082 	bls.w	800d1d8 <_strtod_l+0x2a0>
 800d0d4:	9419      	str	r4, [sp, #100]	@ 0x64
 800d0d6:	f04f 0800 	mov.w	r8, #0
 800d0da:	e0a2      	b.n	800d222 <_strtod_l+0x2ea>
 800d0dc:	2300      	movs	r3, #0
 800d0de:	e7c7      	b.n	800d070 <_strtod_l+0x138>
 800d0e0:	2f08      	cmp	r7, #8
 800d0e2:	bfd5      	itete	le
 800d0e4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d0e6:	9908      	ldrgt	r1, [sp, #32]
 800d0e8:	fb02 3301 	mlale	r3, r2, r1, r3
 800d0ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d0f0:	f100 0001 	add.w	r0, r0, #1
 800d0f4:	bfd4      	ite	le
 800d0f6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d0f8:	9308      	strgt	r3, [sp, #32]
 800d0fa:	3701      	adds	r7, #1
 800d0fc:	9019      	str	r0, [sp, #100]	@ 0x64
 800d0fe:	e7bf      	b.n	800d080 <_strtod_l+0x148>
 800d100:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d102:	1c5a      	adds	r2, r3, #1
 800d104:	9219      	str	r2, [sp, #100]	@ 0x64
 800d106:	785a      	ldrb	r2, [r3, #1]
 800d108:	b37f      	cbz	r7, 800d16a <_strtod_l+0x232>
 800d10a:	4681      	mov	r9, r0
 800d10c:	463d      	mov	r5, r7
 800d10e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d112:	2b09      	cmp	r3, #9
 800d114:	d912      	bls.n	800d13c <_strtod_l+0x204>
 800d116:	2301      	movs	r3, #1
 800d118:	e7c4      	b.n	800d0a4 <_strtod_l+0x16c>
 800d11a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d11c:	1c5a      	adds	r2, r3, #1
 800d11e:	9219      	str	r2, [sp, #100]	@ 0x64
 800d120:	785a      	ldrb	r2, [r3, #1]
 800d122:	3001      	adds	r0, #1
 800d124:	2a30      	cmp	r2, #48	@ 0x30
 800d126:	d0f8      	beq.n	800d11a <_strtod_l+0x1e2>
 800d128:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d12c:	2b08      	cmp	r3, #8
 800d12e:	f200 84d3 	bhi.w	800dad8 <_strtod_l+0xba0>
 800d132:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d134:	930c      	str	r3, [sp, #48]	@ 0x30
 800d136:	4681      	mov	r9, r0
 800d138:	2000      	movs	r0, #0
 800d13a:	4605      	mov	r5, r0
 800d13c:	3a30      	subs	r2, #48	@ 0x30
 800d13e:	f100 0301 	add.w	r3, r0, #1
 800d142:	d02a      	beq.n	800d19a <_strtod_l+0x262>
 800d144:	4499      	add	r9, r3
 800d146:	eb00 0c05 	add.w	ip, r0, r5
 800d14a:	462b      	mov	r3, r5
 800d14c:	210a      	movs	r1, #10
 800d14e:	4563      	cmp	r3, ip
 800d150:	d10d      	bne.n	800d16e <_strtod_l+0x236>
 800d152:	1c69      	adds	r1, r5, #1
 800d154:	4401      	add	r1, r0
 800d156:	4428      	add	r0, r5
 800d158:	2808      	cmp	r0, #8
 800d15a:	dc16      	bgt.n	800d18a <_strtod_l+0x252>
 800d15c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d15e:	230a      	movs	r3, #10
 800d160:	fb03 2300 	mla	r3, r3, r0, r2
 800d164:	930a      	str	r3, [sp, #40]	@ 0x28
 800d166:	2300      	movs	r3, #0
 800d168:	e018      	b.n	800d19c <_strtod_l+0x264>
 800d16a:	4638      	mov	r0, r7
 800d16c:	e7da      	b.n	800d124 <_strtod_l+0x1ec>
 800d16e:	2b08      	cmp	r3, #8
 800d170:	f103 0301 	add.w	r3, r3, #1
 800d174:	dc03      	bgt.n	800d17e <_strtod_l+0x246>
 800d176:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d178:	434e      	muls	r6, r1
 800d17a:	960a      	str	r6, [sp, #40]	@ 0x28
 800d17c:	e7e7      	b.n	800d14e <_strtod_l+0x216>
 800d17e:	2b10      	cmp	r3, #16
 800d180:	bfde      	ittt	le
 800d182:	9e08      	ldrle	r6, [sp, #32]
 800d184:	434e      	mulle	r6, r1
 800d186:	9608      	strle	r6, [sp, #32]
 800d188:	e7e1      	b.n	800d14e <_strtod_l+0x216>
 800d18a:	280f      	cmp	r0, #15
 800d18c:	dceb      	bgt.n	800d166 <_strtod_l+0x22e>
 800d18e:	9808      	ldr	r0, [sp, #32]
 800d190:	230a      	movs	r3, #10
 800d192:	fb03 2300 	mla	r3, r3, r0, r2
 800d196:	9308      	str	r3, [sp, #32]
 800d198:	e7e5      	b.n	800d166 <_strtod_l+0x22e>
 800d19a:	4629      	mov	r1, r5
 800d19c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d19e:	1c50      	adds	r0, r2, #1
 800d1a0:	9019      	str	r0, [sp, #100]	@ 0x64
 800d1a2:	7852      	ldrb	r2, [r2, #1]
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	460d      	mov	r5, r1
 800d1a8:	e7b1      	b.n	800d10e <_strtod_l+0x1d6>
 800d1aa:	f04f 0900 	mov.w	r9, #0
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	e77d      	b.n	800d0ae <_strtod_l+0x176>
 800d1b2:	f04f 0c00 	mov.w	ip, #0
 800d1b6:	1ca2      	adds	r2, r4, #2
 800d1b8:	9219      	str	r2, [sp, #100]	@ 0x64
 800d1ba:	78a2      	ldrb	r2, [r4, #2]
 800d1bc:	e785      	b.n	800d0ca <_strtod_l+0x192>
 800d1be:	f04f 0c01 	mov.w	ip, #1
 800d1c2:	e7f8      	b.n	800d1b6 <_strtod_l+0x27e>
 800d1c4:	0800f240 	.word	0x0800f240
 800d1c8:	0800f228 	.word	0x0800f228
 800d1cc:	7ff00000 	.word	0x7ff00000
 800d1d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d1d2:	1c51      	adds	r1, r2, #1
 800d1d4:	9119      	str	r1, [sp, #100]	@ 0x64
 800d1d6:	7852      	ldrb	r2, [r2, #1]
 800d1d8:	2a30      	cmp	r2, #48	@ 0x30
 800d1da:	d0f9      	beq.n	800d1d0 <_strtod_l+0x298>
 800d1dc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d1e0:	2908      	cmp	r1, #8
 800d1e2:	f63f af78 	bhi.w	800d0d6 <_strtod_l+0x19e>
 800d1e6:	3a30      	subs	r2, #48	@ 0x30
 800d1e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d1ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d1ec:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d1ee:	f04f 080a 	mov.w	r8, #10
 800d1f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d1f4:	1c56      	adds	r6, r2, #1
 800d1f6:	9619      	str	r6, [sp, #100]	@ 0x64
 800d1f8:	7852      	ldrb	r2, [r2, #1]
 800d1fa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d1fe:	f1be 0f09 	cmp.w	lr, #9
 800d202:	d939      	bls.n	800d278 <_strtod_l+0x340>
 800d204:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d206:	1a76      	subs	r6, r6, r1
 800d208:	2e08      	cmp	r6, #8
 800d20a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d20e:	dc03      	bgt.n	800d218 <_strtod_l+0x2e0>
 800d210:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d212:	4588      	cmp	r8, r1
 800d214:	bfa8      	it	ge
 800d216:	4688      	movge	r8, r1
 800d218:	f1bc 0f00 	cmp.w	ip, #0
 800d21c:	d001      	beq.n	800d222 <_strtod_l+0x2ea>
 800d21e:	f1c8 0800 	rsb	r8, r8, #0
 800d222:	2d00      	cmp	r5, #0
 800d224:	d14e      	bne.n	800d2c4 <_strtod_l+0x38c>
 800d226:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d228:	4308      	orrs	r0, r1
 800d22a:	f47f aebe 	bne.w	800cfaa <_strtod_l+0x72>
 800d22e:	2b00      	cmp	r3, #0
 800d230:	f47f aed6 	bne.w	800cfe0 <_strtod_l+0xa8>
 800d234:	2a69      	cmp	r2, #105	@ 0x69
 800d236:	d028      	beq.n	800d28a <_strtod_l+0x352>
 800d238:	dc25      	bgt.n	800d286 <_strtod_l+0x34e>
 800d23a:	2a49      	cmp	r2, #73	@ 0x49
 800d23c:	d025      	beq.n	800d28a <_strtod_l+0x352>
 800d23e:	2a4e      	cmp	r2, #78	@ 0x4e
 800d240:	f47f aece 	bne.w	800cfe0 <_strtod_l+0xa8>
 800d244:	499b      	ldr	r1, [pc, #620]	@ (800d4b4 <_strtod_l+0x57c>)
 800d246:	a819      	add	r0, sp, #100	@ 0x64
 800d248:	f001 f9e2 	bl	800e610 <__match>
 800d24c:	2800      	cmp	r0, #0
 800d24e:	f43f aec7 	beq.w	800cfe0 <_strtod_l+0xa8>
 800d252:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d254:	781b      	ldrb	r3, [r3, #0]
 800d256:	2b28      	cmp	r3, #40	@ 0x28
 800d258:	d12e      	bne.n	800d2b8 <_strtod_l+0x380>
 800d25a:	4997      	ldr	r1, [pc, #604]	@ (800d4b8 <_strtod_l+0x580>)
 800d25c:	aa1c      	add	r2, sp, #112	@ 0x70
 800d25e:	a819      	add	r0, sp, #100	@ 0x64
 800d260:	f001 f9ea 	bl	800e638 <__hexnan>
 800d264:	2805      	cmp	r0, #5
 800d266:	d127      	bne.n	800d2b8 <_strtod_l+0x380>
 800d268:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d26a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d26e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d272:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d276:	e698      	b.n	800cfaa <_strtod_l+0x72>
 800d278:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d27a:	fb08 2101 	mla	r1, r8, r1, r2
 800d27e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d282:	920e      	str	r2, [sp, #56]	@ 0x38
 800d284:	e7b5      	b.n	800d1f2 <_strtod_l+0x2ba>
 800d286:	2a6e      	cmp	r2, #110	@ 0x6e
 800d288:	e7da      	b.n	800d240 <_strtod_l+0x308>
 800d28a:	498c      	ldr	r1, [pc, #560]	@ (800d4bc <_strtod_l+0x584>)
 800d28c:	a819      	add	r0, sp, #100	@ 0x64
 800d28e:	f001 f9bf 	bl	800e610 <__match>
 800d292:	2800      	cmp	r0, #0
 800d294:	f43f aea4 	beq.w	800cfe0 <_strtod_l+0xa8>
 800d298:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d29a:	4989      	ldr	r1, [pc, #548]	@ (800d4c0 <_strtod_l+0x588>)
 800d29c:	3b01      	subs	r3, #1
 800d29e:	a819      	add	r0, sp, #100	@ 0x64
 800d2a0:	9319      	str	r3, [sp, #100]	@ 0x64
 800d2a2:	f001 f9b5 	bl	800e610 <__match>
 800d2a6:	b910      	cbnz	r0, 800d2ae <_strtod_l+0x376>
 800d2a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d2aa:	3301      	adds	r3, #1
 800d2ac:	9319      	str	r3, [sp, #100]	@ 0x64
 800d2ae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d4d0 <_strtod_l+0x598>
 800d2b2:	f04f 0a00 	mov.w	sl, #0
 800d2b6:	e678      	b.n	800cfaa <_strtod_l+0x72>
 800d2b8:	4882      	ldr	r0, [pc, #520]	@ (800d4c4 <_strtod_l+0x58c>)
 800d2ba:	f000 fee5 	bl	800e088 <nan>
 800d2be:	ec5b ab10 	vmov	sl, fp, d0
 800d2c2:	e672      	b.n	800cfaa <_strtod_l+0x72>
 800d2c4:	eba8 0309 	sub.w	r3, r8, r9
 800d2c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d2ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2cc:	2f00      	cmp	r7, #0
 800d2ce:	bf08      	it	eq
 800d2d0:	462f      	moveq	r7, r5
 800d2d2:	2d10      	cmp	r5, #16
 800d2d4:	462c      	mov	r4, r5
 800d2d6:	bfa8      	it	ge
 800d2d8:	2410      	movge	r4, #16
 800d2da:	f7f3 f91b 	bl	8000514 <__aeabi_ui2d>
 800d2de:	2d09      	cmp	r5, #9
 800d2e0:	4682      	mov	sl, r0
 800d2e2:	468b      	mov	fp, r1
 800d2e4:	dc13      	bgt.n	800d30e <_strtod_l+0x3d6>
 800d2e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	f43f ae5e 	beq.w	800cfaa <_strtod_l+0x72>
 800d2ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2f0:	dd78      	ble.n	800d3e4 <_strtod_l+0x4ac>
 800d2f2:	2b16      	cmp	r3, #22
 800d2f4:	dc5f      	bgt.n	800d3b6 <_strtod_l+0x47e>
 800d2f6:	4974      	ldr	r1, [pc, #464]	@ (800d4c8 <_strtod_l+0x590>)
 800d2f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d2fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d300:	4652      	mov	r2, sl
 800d302:	465b      	mov	r3, fp
 800d304:	f7f3 f980 	bl	8000608 <__aeabi_dmul>
 800d308:	4682      	mov	sl, r0
 800d30a:	468b      	mov	fp, r1
 800d30c:	e64d      	b.n	800cfaa <_strtod_l+0x72>
 800d30e:	4b6e      	ldr	r3, [pc, #440]	@ (800d4c8 <_strtod_l+0x590>)
 800d310:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d314:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d318:	f7f3 f976 	bl	8000608 <__aeabi_dmul>
 800d31c:	4682      	mov	sl, r0
 800d31e:	9808      	ldr	r0, [sp, #32]
 800d320:	468b      	mov	fp, r1
 800d322:	f7f3 f8f7 	bl	8000514 <__aeabi_ui2d>
 800d326:	4602      	mov	r2, r0
 800d328:	460b      	mov	r3, r1
 800d32a:	4650      	mov	r0, sl
 800d32c:	4659      	mov	r1, fp
 800d32e:	f7f2 ffb5 	bl	800029c <__adddf3>
 800d332:	2d0f      	cmp	r5, #15
 800d334:	4682      	mov	sl, r0
 800d336:	468b      	mov	fp, r1
 800d338:	ddd5      	ble.n	800d2e6 <_strtod_l+0x3ae>
 800d33a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d33c:	1b2c      	subs	r4, r5, r4
 800d33e:	441c      	add	r4, r3
 800d340:	2c00      	cmp	r4, #0
 800d342:	f340 8096 	ble.w	800d472 <_strtod_l+0x53a>
 800d346:	f014 030f 	ands.w	r3, r4, #15
 800d34a:	d00a      	beq.n	800d362 <_strtod_l+0x42a>
 800d34c:	495e      	ldr	r1, [pc, #376]	@ (800d4c8 <_strtod_l+0x590>)
 800d34e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d352:	4652      	mov	r2, sl
 800d354:	465b      	mov	r3, fp
 800d356:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d35a:	f7f3 f955 	bl	8000608 <__aeabi_dmul>
 800d35e:	4682      	mov	sl, r0
 800d360:	468b      	mov	fp, r1
 800d362:	f034 040f 	bics.w	r4, r4, #15
 800d366:	d073      	beq.n	800d450 <_strtod_l+0x518>
 800d368:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d36c:	dd48      	ble.n	800d400 <_strtod_l+0x4c8>
 800d36e:	2400      	movs	r4, #0
 800d370:	46a0      	mov	r8, r4
 800d372:	940a      	str	r4, [sp, #40]	@ 0x28
 800d374:	46a1      	mov	r9, r4
 800d376:	9a05      	ldr	r2, [sp, #20]
 800d378:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d4d0 <_strtod_l+0x598>
 800d37c:	2322      	movs	r3, #34	@ 0x22
 800d37e:	6013      	str	r3, [r2, #0]
 800d380:	f04f 0a00 	mov.w	sl, #0
 800d384:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d386:	2b00      	cmp	r3, #0
 800d388:	f43f ae0f 	beq.w	800cfaa <_strtod_l+0x72>
 800d38c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d38e:	9805      	ldr	r0, [sp, #20]
 800d390:	f7ff f942 	bl	800c618 <_Bfree>
 800d394:	9805      	ldr	r0, [sp, #20]
 800d396:	4649      	mov	r1, r9
 800d398:	f7ff f93e 	bl	800c618 <_Bfree>
 800d39c:	9805      	ldr	r0, [sp, #20]
 800d39e:	4641      	mov	r1, r8
 800d3a0:	f7ff f93a 	bl	800c618 <_Bfree>
 800d3a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d3a6:	9805      	ldr	r0, [sp, #20]
 800d3a8:	f7ff f936 	bl	800c618 <_Bfree>
 800d3ac:	9805      	ldr	r0, [sp, #20]
 800d3ae:	4621      	mov	r1, r4
 800d3b0:	f7ff f932 	bl	800c618 <_Bfree>
 800d3b4:	e5f9      	b.n	800cfaa <_strtod_l+0x72>
 800d3b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d3bc:	4293      	cmp	r3, r2
 800d3be:	dbbc      	blt.n	800d33a <_strtod_l+0x402>
 800d3c0:	4c41      	ldr	r4, [pc, #260]	@ (800d4c8 <_strtod_l+0x590>)
 800d3c2:	f1c5 050f 	rsb	r5, r5, #15
 800d3c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d3ca:	4652      	mov	r2, sl
 800d3cc:	465b      	mov	r3, fp
 800d3ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3d2:	f7f3 f919 	bl	8000608 <__aeabi_dmul>
 800d3d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3d8:	1b5d      	subs	r5, r3, r5
 800d3da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d3de:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d3e2:	e78f      	b.n	800d304 <_strtod_l+0x3cc>
 800d3e4:	3316      	adds	r3, #22
 800d3e6:	dba8      	blt.n	800d33a <_strtod_l+0x402>
 800d3e8:	4b37      	ldr	r3, [pc, #220]	@ (800d4c8 <_strtod_l+0x590>)
 800d3ea:	eba9 0808 	sub.w	r8, r9, r8
 800d3ee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d3f2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d3f6:	4650      	mov	r0, sl
 800d3f8:	4659      	mov	r1, fp
 800d3fa:	f7f3 fa2f 	bl	800085c <__aeabi_ddiv>
 800d3fe:	e783      	b.n	800d308 <_strtod_l+0x3d0>
 800d400:	4b32      	ldr	r3, [pc, #200]	@ (800d4cc <_strtod_l+0x594>)
 800d402:	9308      	str	r3, [sp, #32]
 800d404:	2300      	movs	r3, #0
 800d406:	1124      	asrs	r4, r4, #4
 800d408:	4650      	mov	r0, sl
 800d40a:	4659      	mov	r1, fp
 800d40c:	461e      	mov	r6, r3
 800d40e:	2c01      	cmp	r4, #1
 800d410:	dc21      	bgt.n	800d456 <_strtod_l+0x51e>
 800d412:	b10b      	cbz	r3, 800d418 <_strtod_l+0x4e0>
 800d414:	4682      	mov	sl, r0
 800d416:	468b      	mov	fp, r1
 800d418:	492c      	ldr	r1, [pc, #176]	@ (800d4cc <_strtod_l+0x594>)
 800d41a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d41e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d422:	4652      	mov	r2, sl
 800d424:	465b      	mov	r3, fp
 800d426:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d42a:	f7f3 f8ed 	bl	8000608 <__aeabi_dmul>
 800d42e:	4b28      	ldr	r3, [pc, #160]	@ (800d4d0 <_strtod_l+0x598>)
 800d430:	460a      	mov	r2, r1
 800d432:	400b      	ands	r3, r1
 800d434:	4927      	ldr	r1, [pc, #156]	@ (800d4d4 <_strtod_l+0x59c>)
 800d436:	428b      	cmp	r3, r1
 800d438:	4682      	mov	sl, r0
 800d43a:	d898      	bhi.n	800d36e <_strtod_l+0x436>
 800d43c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d440:	428b      	cmp	r3, r1
 800d442:	bf86      	itte	hi
 800d444:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d4d8 <_strtod_l+0x5a0>
 800d448:	f04f 3aff 	movhi.w	sl, #4294967295
 800d44c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d450:	2300      	movs	r3, #0
 800d452:	9308      	str	r3, [sp, #32]
 800d454:	e07a      	b.n	800d54c <_strtod_l+0x614>
 800d456:	07e2      	lsls	r2, r4, #31
 800d458:	d505      	bpl.n	800d466 <_strtod_l+0x52e>
 800d45a:	9b08      	ldr	r3, [sp, #32]
 800d45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d460:	f7f3 f8d2 	bl	8000608 <__aeabi_dmul>
 800d464:	2301      	movs	r3, #1
 800d466:	9a08      	ldr	r2, [sp, #32]
 800d468:	3208      	adds	r2, #8
 800d46a:	3601      	adds	r6, #1
 800d46c:	1064      	asrs	r4, r4, #1
 800d46e:	9208      	str	r2, [sp, #32]
 800d470:	e7cd      	b.n	800d40e <_strtod_l+0x4d6>
 800d472:	d0ed      	beq.n	800d450 <_strtod_l+0x518>
 800d474:	4264      	negs	r4, r4
 800d476:	f014 020f 	ands.w	r2, r4, #15
 800d47a:	d00a      	beq.n	800d492 <_strtod_l+0x55a>
 800d47c:	4b12      	ldr	r3, [pc, #72]	@ (800d4c8 <_strtod_l+0x590>)
 800d47e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d482:	4650      	mov	r0, sl
 800d484:	4659      	mov	r1, fp
 800d486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d48a:	f7f3 f9e7 	bl	800085c <__aeabi_ddiv>
 800d48e:	4682      	mov	sl, r0
 800d490:	468b      	mov	fp, r1
 800d492:	1124      	asrs	r4, r4, #4
 800d494:	d0dc      	beq.n	800d450 <_strtod_l+0x518>
 800d496:	2c1f      	cmp	r4, #31
 800d498:	dd20      	ble.n	800d4dc <_strtod_l+0x5a4>
 800d49a:	2400      	movs	r4, #0
 800d49c:	46a0      	mov	r8, r4
 800d49e:	940a      	str	r4, [sp, #40]	@ 0x28
 800d4a0:	46a1      	mov	r9, r4
 800d4a2:	9a05      	ldr	r2, [sp, #20]
 800d4a4:	2322      	movs	r3, #34	@ 0x22
 800d4a6:	f04f 0a00 	mov.w	sl, #0
 800d4aa:	f04f 0b00 	mov.w	fp, #0
 800d4ae:	6013      	str	r3, [r2, #0]
 800d4b0:	e768      	b.n	800d384 <_strtod_l+0x44c>
 800d4b2:	bf00      	nop
 800d4b4:	0800f019 	.word	0x0800f019
 800d4b8:	0800f22c 	.word	0x0800f22c
 800d4bc:	0800f011 	.word	0x0800f011
 800d4c0:	0800f048 	.word	0x0800f048
 800d4c4:	0800f3d5 	.word	0x0800f3d5
 800d4c8:	0800f160 	.word	0x0800f160
 800d4cc:	0800f138 	.word	0x0800f138
 800d4d0:	7ff00000 	.word	0x7ff00000
 800d4d4:	7ca00000 	.word	0x7ca00000
 800d4d8:	7fefffff 	.word	0x7fefffff
 800d4dc:	f014 0310 	ands.w	r3, r4, #16
 800d4e0:	bf18      	it	ne
 800d4e2:	236a      	movne	r3, #106	@ 0x6a
 800d4e4:	4ea9      	ldr	r6, [pc, #676]	@ (800d78c <_strtod_l+0x854>)
 800d4e6:	9308      	str	r3, [sp, #32]
 800d4e8:	4650      	mov	r0, sl
 800d4ea:	4659      	mov	r1, fp
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	07e2      	lsls	r2, r4, #31
 800d4f0:	d504      	bpl.n	800d4fc <_strtod_l+0x5c4>
 800d4f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d4f6:	f7f3 f887 	bl	8000608 <__aeabi_dmul>
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	1064      	asrs	r4, r4, #1
 800d4fe:	f106 0608 	add.w	r6, r6, #8
 800d502:	d1f4      	bne.n	800d4ee <_strtod_l+0x5b6>
 800d504:	b10b      	cbz	r3, 800d50a <_strtod_l+0x5d2>
 800d506:	4682      	mov	sl, r0
 800d508:	468b      	mov	fp, r1
 800d50a:	9b08      	ldr	r3, [sp, #32]
 800d50c:	b1b3      	cbz	r3, 800d53c <_strtod_l+0x604>
 800d50e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d512:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d516:	2b00      	cmp	r3, #0
 800d518:	4659      	mov	r1, fp
 800d51a:	dd0f      	ble.n	800d53c <_strtod_l+0x604>
 800d51c:	2b1f      	cmp	r3, #31
 800d51e:	dd55      	ble.n	800d5cc <_strtod_l+0x694>
 800d520:	2b34      	cmp	r3, #52	@ 0x34
 800d522:	bfde      	ittt	le
 800d524:	f04f 33ff 	movle.w	r3, #4294967295
 800d528:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d52c:	4093      	lslle	r3, r2
 800d52e:	f04f 0a00 	mov.w	sl, #0
 800d532:	bfcc      	ite	gt
 800d534:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d538:	ea03 0b01 	andle.w	fp, r3, r1
 800d53c:	2200      	movs	r2, #0
 800d53e:	2300      	movs	r3, #0
 800d540:	4650      	mov	r0, sl
 800d542:	4659      	mov	r1, fp
 800d544:	f7f3 fac8 	bl	8000ad8 <__aeabi_dcmpeq>
 800d548:	2800      	cmp	r0, #0
 800d54a:	d1a6      	bne.n	800d49a <_strtod_l+0x562>
 800d54c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d54e:	9300      	str	r3, [sp, #0]
 800d550:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d552:	9805      	ldr	r0, [sp, #20]
 800d554:	462b      	mov	r3, r5
 800d556:	463a      	mov	r2, r7
 800d558:	f7ff f8c6 	bl	800c6e8 <__s2b>
 800d55c:	900a      	str	r0, [sp, #40]	@ 0x28
 800d55e:	2800      	cmp	r0, #0
 800d560:	f43f af05 	beq.w	800d36e <_strtod_l+0x436>
 800d564:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d566:	2a00      	cmp	r2, #0
 800d568:	eba9 0308 	sub.w	r3, r9, r8
 800d56c:	bfa8      	it	ge
 800d56e:	2300      	movge	r3, #0
 800d570:	9312      	str	r3, [sp, #72]	@ 0x48
 800d572:	2400      	movs	r4, #0
 800d574:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d578:	9316      	str	r3, [sp, #88]	@ 0x58
 800d57a:	46a0      	mov	r8, r4
 800d57c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d57e:	9805      	ldr	r0, [sp, #20]
 800d580:	6859      	ldr	r1, [r3, #4]
 800d582:	f7ff f809 	bl	800c598 <_Balloc>
 800d586:	4681      	mov	r9, r0
 800d588:	2800      	cmp	r0, #0
 800d58a:	f43f aef4 	beq.w	800d376 <_strtod_l+0x43e>
 800d58e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d590:	691a      	ldr	r2, [r3, #16]
 800d592:	3202      	adds	r2, #2
 800d594:	f103 010c 	add.w	r1, r3, #12
 800d598:	0092      	lsls	r2, r2, #2
 800d59a:	300c      	adds	r0, #12
 800d59c:	f7fe f89b 	bl	800b6d6 <memcpy>
 800d5a0:	ec4b ab10 	vmov	d0, sl, fp
 800d5a4:	9805      	ldr	r0, [sp, #20]
 800d5a6:	aa1c      	add	r2, sp, #112	@ 0x70
 800d5a8:	a91b      	add	r1, sp, #108	@ 0x6c
 800d5aa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d5ae:	f7ff fbd7 	bl	800cd60 <__d2b>
 800d5b2:	901a      	str	r0, [sp, #104]	@ 0x68
 800d5b4:	2800      	cmp	r0, #0
 800d5b6:	f43f aede 	beq.w	800d376 <_strtod_l+0x43e>
 800d5ba:	9805      	ldr	r0, [sp, #20]
 800d5bc:	2101      	movs	r1, #1
 800d5be:	f7ff f929 	bl	800c814 <__i2b>
 800d5c2:	4680      	mov	r8, r0
 800d5c4:	b948      	cbnz	r0, 800d5da <_strtod_l+0x6a2>
 800d5c6:	f04f 0800 	mov.w	r8, #0
 800d5ca:	e6d4      	b.n	800d376 <_strtod_l+0x43e>
 800d5cc:	f04f 32ff 	mov.w	r2, #4294967295
 800d5d0:	fa02 f303 	lsl.w	r3, r2, r3
 800d5d4:	ea03 0a0a 	and.w	sl, r3, sl
 800d5d8:	e7b0      	b.n	800d53c <_strtod_l+0x604>
 800d5da:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d5dc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d5de:	2d00      	cmp	r5, #0
 800d5e0:	bfab      	itete	ge
 800d5e2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d5e4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d5e6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d5e8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d5ea:	bfac      	ite	ge
 800d5ec:	18ef      	addge	r7, r5, r3
 800d5ee:	1b5e      	sublt	r6, r3, r5
 800d5f0:	9b08      	ldr	r3, [sp, #32]
 800d5f2:	1aed      	subs	r5, r5, r3
 800d5f4:	4415      	add	r5, r2
 800d5f6:	4b66      	ldr	r3, [pc, #408]	@ (800d790 <_strtod_l+0x858>)
 800d5f8:	3d01      	subs	r5, #1
 800d5fa:	429d      	cmp	r5, r3
 800d5fc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d600:	da50      	bge.n	800d6a4 <_strtod_l+0x76c>
 800d602:	1b5b      	subs	r3, r3, r5
 800d604:	2b1f      	cmp	r3, #31
 800d606:	eba2 0203 	sub.w	r2, r2, r3
 800d60a:	f04f 0101 	mov.w	r1, #1
 800d60e:	dc3d      	bgt.n	800d68c <_strtod_l+0x754>
 800d610:	fa01 f303 	lsl.w	r3, r1, r3
 800d614:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d616:	2300      	movs	r3, #0
 800d618:	9310      	str	r3, [sp, #64]	@ 0x40
 800d61a:	18bd      	adds	r5, r7, r2
 800d61c:	9b08      	ldr	r3, [sp, #32]
 800d61e:	42af      	cmp	r7, r5
 800d620:	4416      	add	r6, r2
 800d622:	441e      	add	r6, r3
 800d624:	463b      	mov	r3, r7
 800d626:	bfa8      	it	ge
 800d628:	462b      	movge	r3, r5
 800d62a:	42b3      	cmp	r3, r6
 800d62c:	bfa8      	it	ge
 800d62e:	4633      	movge	r3, r6
 800d630:	2b00      	cmp	r3, #0
 800d632:	bfc2      	ittt	gt
 800d634:	1aed      	subgt	r5, r5, r3
 800d636:	1af6      	subgt	r6, r6, r3
 800d638:	1aff      	subgt	r7, r7, r3
 800d63a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	dd16      	ble.n	800d66e <_strtod_l+0x736>
 800d640:	4641      	mov	r1, r8
 800d642:	9805      	ldr	r0, [sp, #20]
 800d644:	461a      	mov	r2, r3
 800d646:	f7ff f9a5 	bl	800c994 <__pow5mult>
 800d64a:	4680      	mov	r8, r0
 800d64c:	2800      	cmp	r0, #0
 800d64e:	d0ba      	beq.n	800d5c6 <_strtod_l+0x68e>
 800d650:	4601      	mov	r1, r0
 800d652:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d654:	9805      	ldr	r0, [sp, #20]
 800d656:	f7ff f8f3 	bl	800c840 <__multiply>
 800d65a:	900e      	str	r0, [sp, #56]	@ 0x38
 800d65c:	2800      	cmp	r0, #0
 800d65e:	f43f ae8a 	beq.w	800d376 <_strtod_l+0x43e>
 800d662:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d664:	9805      	ldr	r0, [sp, #20]
 800d666:	f7fe ffd7 	bl	800c618 <_Bfree>
 800d66a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d66c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d66e:	2d00      	cmp	r5, #0
 800d670:	dc1d      	bgt.n	800d6ae <_strtod_l+0x776>
 800d672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d674:	2b00      	cmp	r3, #0
 800d676:	dd23      	ble.n	800d6c0 <_strtod_l+0x788>
 800d678:	4649      	mov	r1, r9
 800d67a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d67c:	9805      	ldr	r0, [sp, #20]
 800d67e:	f7ff f989 	bl	800c994 <__pow5mult>
 800d682:	4681      	mov	r9, r0
 800d684:	b9e0      	cbnz	r0, 800d6c0 <_strtod_l+0x788>
 800d686:	f04f 0900 	mov.w	r9, #0
 800d68a:	e674      	b.n	800d376 <_strtod_l+0x43e>
 800d68c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d690:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d694:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d698:	35e2      	adds	r5, #226	@ 0xe2
 800d69a:	fa01 f305 	lsl.w	r3, r1, r5
 800d69e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d6a0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d6a2:	e7ba      	b.n	800d61a <_strtod_l+0x6e2>
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	9310      	str	r3, [sp, #64]	@ 0x40
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d6ac:	e7b5      	b.n	800d61a <_strtod_l+0x6e2>
 800d6ae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d6b0:	9805      	ldr	r0, [sp, #20]
 800d6b2:	462a      	mov	r2, r5
 800d6b4:	f7ff f9c8 	bl	800ca48 <__lshift>
 800d6b8:	901a      	str	r0, [sp, #104]	@ 0x68
 800d6ba:	2800      	cmp	r0, #0
 800d6bc:	d1d9      	bne.n	800d672 <_strtod_l+0x73a>
 800d6be:	e65a      	b.n	800d376 <_strtod_l+0x43e>
 800d6c0:	2e00      	cmp	r6, #0
 800d6c2:	dd07      	ble.n	800d6d4 <_strtod_l+0x79c>
 800d6c4:	4649      	mov	r1, r9
 800d6c6:	9805      	ldr	r0, [sp, #20]
 800d6c8:	4632      	mov	r2, r6
 800d6ca:	f7ff f9bd 	bl	800ca48 <__lshift>
 800d6ce:	4681      	mov	r9, r0
 800d6d0:	2800      	cmp	r0, #0
 800d6d2:	d0d8      	beq.n	800d686 <_strtod_l+0x74e>
 800d6d4:	2f00      	cmp	r7, #0
 800d6d6:	dd08      	ble.n	800d6ea <_strtod_l+0x7b2>
 800d6d8:	4641      	mov	r1, r8
 800d6da:	9805      	ldr	r0, [sp, #20]
 800d6dc:	463a      	mov	r2, r7
 800d6de:	f7ff f9b3 	bl	800ca48 <__lshift>
 800d6e2:	4680      	mov	r8, r0
 800d6e4:	2800      	cmp	r0, #0
 800d6e6:	f43f ae46 	beq.w	800d376 <_strtod_l+0x43e>
 800d6ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d6ec:	9805      	ldr	r0, [sp, #20]
 800d6ee:	464a      	mov	r2, r9
 800d6f0:	f7ff fa32 	bl	800cb58 <__mdiff>
 800d6f4:	4604      	mov	r4, r0
 800d6f6:	2800      	cmp	r0, #0
 800d6f8:	f43f ae3d 	beq.w	800d376 <_strtod_l+0x43e>
 800d6fc:	68c3      	ldr	r3, [r0, #12]
 800d6fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d700:	2300      	movs	r3, #0
 800d702:	60c3      	str	r3, [r0, #12]
 800d704:	4641      	mov	r1, r8
 800d706:	f7ff fa0b 	bl	800cb20 <__mcmp>
 800d70a:	2800      	cmp	r0, #0
 800d70c:	da46      	bge.n	800d79c <_strtod_l+0x864>
 800d70e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d710:	ea53 030a 	orrs.w	r3, r3, sl
 800d714:	d16c      	bne.n	800d7f0 <_strtod_l+0x8b8>
 800d716:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d168      	bne.n	800d7f0 <_strtod_l+0x8b8>
 800d71e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d722:	0d1b      	lsrs	r3, r3, #20
 800d724:	051b      	lsls	r3, r3, #20
 800d726:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d72a:	d961      	bls.n	800d7f0 <_strtod_l+0x8b8>
 800d72c:	6963      	ldr	r3, [r4, #20]
 800d72e:	b913      	cbnz	r3, 800d736 <_strtod_l+0x7fe>
 800d730:	6923      	ldr	r3, [r4, #16]
 800d732:	2b01      	cmp	r3, #1
 800d734:	dd5c      	ble.n	800d7f0 <_strtod_l+0x8b8>
 800d736:	4621      	mov	r1, r4
 800d738:	2201      	movs	r2, #1
 800d73a:	9805      	ldr	r0, [sp, #20]
 800d73c:	f7ff f984 	bl	800ca48 <__lshift>
 800d740:	4641      	mov	r1, r8
 800d742:	4604      	mov	r4, r0
 800d744:	f7ff f9ec 	bl	800cb20 <__mcmp>
 800d748:	2800      	cmp	r0, #0
 800d74a:	dd51      	ble.n	800d7f0 <_strtod_l+0x8b8>
 800d74c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d750:	9a08      	ldr	r2, [sp, #32]
 800d752:	0d1b      	lsrs	r3, r3, #20
 800d754:	051b      	lsls	r3, r3, #20
 800d756:	2a00      	cmp	r2, #0
 800d758:	d06b      	beq.n	800d832 <_strtod_l+0x8fa>
 800d75a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d75e:	d868      	bhi.n	800d832 <_strtod_l+0x8fa>
 800d760:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d764:	f67f ae9d 	bls.w	800d4a2 <_strtod_l+0x56a>
 800d768:	4b0a      	ldr	r3, [pc, #40]	@ (800d794 <_strtod_l+0x85c>)
 800d76a:	4650      	mov	r0, sl
 800d76c:	4659      	mov	r1, fp
 800d76e:	2200      	movs	r2, #0
 800d770:	f7f2 ff4a 	bl	8000608 <__aeabi_dmul>
 800d774:	4b08      	ldr	r3, [pc, #32]	@ (800d798 <_strtod_l+0x860>)
 800d776:	400b      	ands	r3, r1
 800d778:	4682      	mov	sl, r0
 800d77a:	468b      	mov	fp, r1
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	f47f ae05 	bne.w	800d38c <_strtod_l+0x454>
 800d782:	9a05      	ldr	r2, [sp, #20]
 800d784:	2322      	movs	r3, #34	@ 0x22
 800d786:	6013      	str	r3, [r2, #0]
 800d788:	e600      	b.n	800d38c <_strtod_l+0x454>
 800d78a:	bf00      	nop
 800d78c:	0800f258 	.word	0x0800f258
 800d790:	fffffc02 	.word	0xfffffc02
 800d794:	39500000 	.word	0x39500000
 800d798:	7ff00000 	.word	0x7ff00000
 800d79c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d7a0:	d165      	bne.n	800d86e <_strtod_l+0x936>
 800d7a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d7a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d7a8:	b35a      	cbz	r2, 800d802 <_strtod_l+0x8ca>
 800d7aa:	4a9f      	ldr	r2, [pc, #636]	@ (800da28 <_strtod_l+0xaf0>)
 800d7ac:	4293      	cmp	r3, r2
 800d7ae:	d12b      	bne.n	800d808 <_strtod_l+0x8d0>
 800d7b0:	9b08      	ldr	r3, [sp, #32]
 800d7b2:	4651      	mov	r1, sl
 800d7b4:	b303      	cbz	r3, 800d7f8 <_strtod_l+0x8c0>
 800d7b6:	4b9d      	ldr	r3, [pc, #628]	@ (800da2c <_strtod_l+0xaf4>)
 800d7b8:	465a      	mov	r2, fp
 800d7ba:	4013      	ands	r3, r2
 800d7bc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d7c0:	f04f 32ff 	mov.w	r2, #4294967295
 800d7c4:	d81b      	bhi.n	800d7fe <_strtod_l+0x8c6>
 800d7c6:	0d1b      	lsrs	r3, r3, #20
 800d7c8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d7cc:	fa02 f303 	lsl.w	r3, r2, r3
 800d7d0:	4299      	cmp	r1, r3
 800d7d2:	d119      	bne.n	800d808 <_strtod_l+0x8d0>
 800d7d4:	4b96      	ldr	r3, [pc, #600]	@ (800da30 <_strtod_l+0xaf8>)
 800d7d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d102      	bne.n	800d7e2 <_strtod_l+0x8aa>
 800d7dc:	3101      	adds	r1, #1
 800d7de:	f43f adca 	beq.w	800d376 <_strtod_l+0x43e>
 800d7e2:	4b92      	ldr	r3, [pc, #584]	@ (800da2c <_strtod_l+0xaf4>)
 800d7e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d7e6:	401a      	ands	r2, r3
 800d7e8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d7ec:	f04f 0a00 	mov.w	sl, #0
 800d7f0:	9b08      	ldr	r3, [sp, #32]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d1b8      	bne.n	800d768 <_strtod_l+0x830>
 800d7f6:	e5c9      	b.n	800d38c <_strtod_l+0x454>
 800d7f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d7fc:	e7e8      	b.n	800d7d0 <_strtod_l+0x898>
 800d7fe:	4613      	mov	r3, r2
 800d800:	e7e6      	b.n	800d7d0 <_strtod_l+0x898>
 800d802:	ea53 030a 	orrs.w	r3, r3, sl
 800d806:	d0a1      	beq.n	800d74c <_strtod_l+0x814>
 800d808:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d80a:	b1db      	cbz	r3, 800d844 <_strtod_l+0x90c>
 800d80c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d80e:	4213      	tst	r3, r2
 800d810:	d0ee      	beq.n	800d7f0 <_strtod_l+0x8b8>
 800d812:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d814:	9a08      	ldr	r2, [sp, #32]
 800d816:	4650      	mov	r0, sl
 800d818:	4659      	mov	r1, fp
 800d81a:	b1bb      	cbz	r3, 800d84c <_strtod_l+0x914>
 800d81c:	f7ff fb6e 	bl	800cefc <sulp>
 800d820:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d824:	ec53 2b10 	vmov	r2, r3, d0
 800d828:	f7f2 fd38 	bl	800029c <__adddf3>
 800d82c:	4682      	mov	sl, r0
 800d82e:	468b      	mov	fp, r1
 800d830:	e7de      	b.n	800d7f0 <_strtod_l+0x8b8>
 800d832:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d836:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d83a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d83e:	f04f 3aff 	mov.w	sl, #4294967295
 800d842:	e7d5      	b.n	800d7f0 <_strtod_l+0x8b8>
 800d844:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d846:	ea13 0f0a 	tst.w	r3, sl
 800d84a:	e7e1      	b.n	800d810 <_strtod_l+0x8d8>
 800d84c:	f7ff fb56 	bl	800cefc <sulp>
 800d850:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d854:	ec53 2b10 	vmov	r2, r3, d0
 800d858:	f7f2 fd1e 	bl	8000298 <__aeabi_dsub>
 800d85c:	2200      	movs	r2, #0
 800d85e:	2300      	movs	r3, #0
 800d860:	4682      	mov	sl, r0
 800d862:	468b      	mov	fp, r1
 800d864:	f7f3 f938 	bl	8000ad8 <__aeabi_dcmpeq>
 800d868:	2800      	cmp	r0, #0
 800d86a:	d0c1      	beq.n	800d7f0 <_strtod_l+0x8b8>
 800d86c:	e619      	b.n	800d4a2 <_strtod_l+0x56a>
 800d86e:	4641      	mov	r1, r8
 800d870:	4620      	mov	r0, r4
 800d872:	f7ff facd 	bl	800ce10 <__ratio>
 800d876:	ec57 6b10 	vmov	r6, r7, d0
 800d87a:	2200      	movs	r2, #0
 800d87c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d880:	4630      	mov	r0, r6
 800d882:	4639      	mov	r1, r7
 800d884:	f7f3 f93c 	bl	8000b00 <__aeabi_dcmple>
 800d888:	2800      	cmp	r0, #0
 800d88a:	d06f      	beq.n	800d96c <_strtod_l+0xa34>
 800d88c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d17a      	bne.n	800d988 <_strtod_l+0xa50>
 800d892:	f1ba 0f00 	cmp.w	sl, #0
 800d896:	d158      	bne.n	800d94a <_strtod_l+0xa12>
 800d898:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d89a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d15a      	bne.n	800d958 <_strtod_l+0xa20>
 800d8a2:	4b64      	ldr	r3, [pc, #400]	@ (800da34 <_strtod_l+0xafc>)
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	4630      	mov	r0, r6
 800d8a8:	4639      	mov	r1, r7
 800d8aa:	f7f3 f91f 	bl	8000aec <__aeabi_dcmplt>
 800d8ae:	2800      	cmp	r0, #0
 800d8b0:	d159      	bne.n	800d966 <_strtod_l+0xa2e>
 800d8b2:	4630      	mov	r0, r6
 800d8b4:	4639      	mov	r1, r7
 800d8b6:	4b60      	ldr	r3, [pc, #384]	@ (800da38 <_strtod_l+0xb00>)
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	f7f2 fea5 	bl	8000608 <__aeabi_dmul>
 800d8be:	4606      	mov	r6, r0
 800d8c0:	460f      	mov	r7, r1
 800d8c2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d8c6:	9606      	str	r6, [sp, #24]
 800d8c8:	9307      	str	r3, [sp, #28]
 800d8ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d8ce:	4d57      	ldr	r5, [pc, #348]	@ (800da2c <_strtod_l+0xaf4>)
 800d8d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d8d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8d6:	401d      	ands	r5, r3
 800d8d8:	4b58      	ldr	r3, [pc, #352]	@ (800da3c <_strtod_l+0xb04>)
 800d8da:	429d      	cmp	r5, r3
 800d8dc:	f040 80b2 	bne.w	800da44 <_strtod_l+0xb0c>
 800d8e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8e2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d8e6:	ec4b ab10 	vmov	d0, sl, fp
 800d8ea:	f7ff f9c9 	bl	800cc80 <__ulp>
 800d8ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d8f2:	ec51 0b10 	vmov	r0, r1, d0
 800d8f6:	f7f2 fe87 	bl	8000608 <__aeabi_dmul>
 800d8fa:	4652      	mov	r2, sl
 800d8fc:	465b      	mov	r3, fp
 800d8fe:	f7f2 fccd 	bl	800029c <__adddf3>
 800d902:	460b      	mov	r3, r1
 800d904:	4949      	ldr	r1, [pc, #292]	@ (800da2c <_strtod_l+0xaf4>)
 800d906:	4a4e      	ldr	r2, [pc, #312]	@ (800da40 <_strtod_l+0xb08>)
 800d908:	4019      	ands	r1, r3
 800d90a:	4291      	cmp	r1, r2
 800d90c:	4682      	mov	sl, r0
 800d90e:	d942      	bls.n	800d996 <_strtod_l+0xa5e>
 800d910:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d912:	4b47      	ldr	r3, [pc, #284]	@ (800da30 <_strtod_l+0xaf8>)
 800d914:	429a      	cmp	r2, r3
 800d916:	d103      	bne.n	800d920 <_strtod_l+0x9e8>
 800d918:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d91a:	3301      	adds	r3, #1
 800d91c:	f43f ad2b 	beq.w	800d376 <_strtod_l+0x43e>
 800d920:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800da30 <_strtod_l+0xaf8>
 800d924:	f04f 3aff 	mov.w	sl, #4294967295
 800d928:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d92a:	9805      	ldr	r0, [sp, #20]
 800d92c:	f7fe fe74 	bl	800c618 <_Bfree>
 800d930:	9805      	ldr	r0, [sp, #20]
 800d932:	4649      	mov	r1, r9
 800d934:	f7fe fe70 	bl	800c618 <_Bfree>
 800d938:	9805      	ldr	r0, [sp, #20]
 800d93a:	4641      	mov	r1, r8
 800d93c:	f7fe fe6c 	bl	800c618 <_Bfree>
 800d940:	9805      	ldr	r0, [sp, #20]
 800d942:	4621      	mov	r1, r4
 800d944:	f7fe fe68 	bl	800c618 <_Bfree>
 800d948:	e618      	b.n	800d57c <_strtod_l+0x644>
 800d94a:	f1ba 0f01 	cmp.w	sl, #1
 800d94e:	d103      	bne.n	800d958 <_strtod_l+0xa20>
 800d950:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d952:	2b00      	cmp	r3, #0
 800d954:	f43f ada5 	beq.w	800d4a2 <_strtod_l+0x56a>
 800d958:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800da08 <_strtod_l+0xad0>
 800d95c:	4f35      	ldr	r7, [pc, #212]	@ (800da34 <_strtod_l+0xafc>)
 800d95e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d962:	2600      	movs	r6, #0
 800d964:	e7b1      	b.n	800d8ca <_strtod_l+0x992>
 800d966:	4f34      	ldr	r7, [pc, #208]	@ (800da38 <_strtod_l+0xb00>)
 800d968:	2600      	movs	r6, #0
 800d96a:	e7aa      	b.n	800d8c2 <_strtod_l+0x98a>
 800d96c:	4b32      	ldr	r3, [pc, #200]	@ (800da38 <_strtod_l+0xb00>)
 800d96e:	4630      	mov	r0, r6
 800d970:	4639      	mov	r1, r7
 800d972:	2200      	movs	r2, #0
 800d974:	f7f2 fe48 	bl	8000608 <__aeabi_dmul>
 800d978:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d97a:	4606      	mov	r6, r0
 800d97c:	460f      	mov	r7, r1
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d09f      	beq.n	800d8c2 <_strtod_l+0x98a>
 800d982:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d986:	e7a0      	b.n	800d8ca <_strtod_l+0x992>
 800d988:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800da10 <_strtod_l+0xad8>
 800d98c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d990:	ec57 6b17 	vmov	r6, r7, d7
 800d994:	e799      	b.n	800d8ca <_strtod_l+0x992>
 800d996:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d99a:	9b08      	ldr	r3, [sp, #32]
 800d99c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d1c1      	bne.n	800d928 <_strtod_l+0x9f0>
 800d9a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d9a8:	0d1b      	lsrs	r3, r3, #20
 800d9aa:	051b      	lsls	r3, r3, #20
 800d9ac:	429d      	cmp	r5, r3
 800d9ae:	d1bb      	bne.n	800d928 <_strtod_l+0x9f0>
 800d9b0:	4630      	mov	r0, r6
 800d9b2:	4639      	mov	r1, r7
 800d9b4:	f7f3 f988 	bl	8000cc8 <__aeabi_d2lz>
 800d9b8:	f7f2 fdf8 	bl	80005ac <__aeabi_l2d>
 800d9bc:	4602      	mov	r2, r0
 800d9be:	460b      	mov	r3, r1
 800d9c0:	4630      	mov	r0, r6
 800d9c2:	4639      	mov	r1, r7
 800d9c4:	f7f2 fc68 	bl	8000298 <__aeabi_dsub>
 800d9c8:	460b      	mov	r3, r1
 800d9ca:	4602      	mov	r2, r0
 800d9cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d9d0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d9d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9d6:	ea46 060a 	orr.w	r6, r6, sl
 800d9da:	431e      	orrs	r6, r3
 800d9dc:	d06f      	beq.n	800dabe <_strtod_l+0xb86>
 800d9de:	a30e      	add	r3, pc, #56	@ (adr r3, 800da18 <_strtod_l+0xae0>)
 800d9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e4:	f7f3 f882 	bl	8000aec <__aeabi_dcmplt>
 800d9e8:	2800      	cmp	r0, #0
 800d9ea:	f47f accf 	bne.w	800d38c <_strtod_l+0x454>
 800d9ee:	a30c      	add	r3, pc, #48	@ (adr r3, 800da20 <_strtod_l+0xae8>)
 800d9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d9f8:	f7f3 f896 	bl	8000b28 <__aeabi_dcmpgt>
 800d9fc:	2800      	cmp	r0, #0
 800d9fe:	d093      	beq.n	800d928 <_strtod_l+0x9f0>
 800da00:	e4c4      	b.n	800d38c <_strtod_l+0x454>
 800da02:	bf00      	nop
 800da04:	f3af 8000 	nop.w
 800da08:	00000000 	.word	0x00000000
 800da0c:	bff00000 	.word	0xbff00000
 800da10:	00000000 	.word	0x00000000
 800da14:	3ff00000 	.word	0x3ff00000
 800da18:	94a03595 	.word	0x94a03595
 800da1c:	3fdfffff 	.word	0x3fdfffff
 800da20:	35afe535 	.word	0x35afe535
 800da24:	3fe00000 	.word	0x3fe00000
 800da28:	000fffff 	.word	0x000fffff
 800da2c:	7ff00000 	.word	0x7ff00000
 800da30:	7fefffff 	.word	0x7fefffff
 800da34:	3ff00000 	.word	0x3ff00000
 800da38:	3fe00000 	.word	0x3fe00000
 800da3c:	7fe00000 	.word	0x7fe00000
 800da40:	7c9fffff 	.word	0x7c9fffff
 800da44:	9b08      	ldr	r3, [sp, #32]
 800da46:	b323      	cbz	r3, 800da92 <_strtod_l+0xb5a>
 800da48:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800da4c:	d821      	bhi.n	800da92 <_strtod_l+0xb5a>
 800da4e:	a328      	add	r3, pc, #160	@ (adr r3, 800daf0 <_strtod_l+0xbb8>)
 800da50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da54:	4630      	mov	r0, r6
 800da56:	4639      	mov	r1, r7
 800da58:	f7f3 f852 	bl	8000b00 <__aeabi_dcmple>
 800da5c:	b1a0      	cbz	r0, 800da88 <_strtod_l+0xb50>
 800da5e:	4639      	mov	r1, r7
 800da60:	4630      	mov	r0, r6
 800da62:	f7f3 f8a9 	bl	8000bb8 <__aeabi_d2uiz>
 800da66:	2801      	cmp	r0, #1
 800da68:	bf38      	it	cc
 800da6a:	2001      	movcc	r0, #1
 800da6c:	f7f2 fd52 	bl	8000514 <__aeabi_ui2d>
 800da70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da72:	4606      	mov	r6, r0
 800da74:	460f      	mov	r7, r1
 800da76:	b9fb      	cbnz	r3, 800dab8 <_strtod_l+0xb80>
 800da78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800da7c:	9014      	str	r0, [sp, #80]	@ 0x50
 800da7e:	9315      	str	r3, [sp, #84]	@ 0x54
 800da80:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800da84:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800da88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800da8a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800da8e:	1b5b      	subs	r3, r3, r5
 800da90:	9311      	str	r3, [sp, #68]	@ 0x44
 800da92:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800da96:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800da9a:	f7ff f8f1 	bl	800cc80 <__ulp>
 800da9e:	4650      	mov	r0, sl
 800daa0:	ec53 2b10 	vmov	r2, r3, d0
 800daa4:	4659      	mov	r1, fp
 800daa6:	f7f2 fdaf 	bl	8000608 <__aeabi_dmul>
 800daaa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800daae:	f7f2 fbf5 	bl	800029c <__adddf3>
 800dab2:	4682      	mov	sl, r0
 800dab4:	468b      	mov	fp, r1
 800dab6:	e770      	b.n	800d99a <_strtod_l+0xa62>
 800dab8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800dabc:	e7e0      	b.n	800da80 <_strtod_l+0xb48>
 800dabe:	a30e      	add	r3, pc, #56	@ (adr r3, 800daf8 <_strtod_l+0xbc0>)
 800dac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac4:	f7f3 f812 	bl	8000aec <__aeabi_dcmplt>
 800dac8:	e798      	b.n	800d9fc <_strtod_l+0xac4>
 800daca:	2300      	movs	r3, #0
 800dacc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dace:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800dad0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dad2:	6013      	str	r3, [r2, #0]
 800dad4:	f7ff ba6d 	b.w	800cfb2 <_strtod_l+0x7a>
 800dad8:	2a65      	cmp	r2, #101	@ 0x65
 800dada:	f43f ab66 	beq.w	800d1aa <_strtod_l+0x272>
 800dade:	2a45      	cmp	r2, #69	@ 0x45
 800dae0:	f43f ab63 	beq.w	800d1aa <_strtod_l+0x272>
 800dae4:	2301      	movs	r3, #1
 800dae6:	f7ff bb9e 	b.w	800d226 <_strtod_l+0x2ee>
 800daea:	bf00      	nop
 800daec:	f3af 8000 	nop.w
 800daf0:	ffc00000 	.word	0xffc00000
 800daf4:	41dfffff 	.word	0x41dfffff
 800daf8:	94a03595 	.word	0x94a03595
 800dafc:	3fcfffff 	.word	0x3fcfffff

0800db00 <_strtod_r>:
 800db00:	4b01      	ldr	r3, [pc, #4]	@ (800db08 <_strtod_r+0x8>)
 800db02:	f7ff ba19 	b.w	800cf38 <_strtod_l>
 800db06:	bf00      	nop
 800db08:	20000080 	.word	0x20000080

0800db0c <_strtol_l.constprop.0>:
 800db0c:	2b24      	cmp	r3, #36	@ 0x24
 800db0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db12:	4686      	mov	lr, r0
 800db14:	4690      	mov	r8, r2
 800db16:	d801      	bhi.n	800db1c <_strtol_l.constprop.0+0x10>
 800db18:	2b01      	cmp	r3, #1
 800db1a:	d106      	bne.n	800db2a <_strtol_l.constprop.0+0x1e>
 800db1c:	f7fd fdae 	bl	800b67c <__errno>
 800db20:	2316      	movs	r3, #22
 800db22:	6003      	str	r3, [r0, #0]
 800db24:	2000      	movs	r0, #0
 800db26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db2a:	4834      	ldr	r0, [pc, #208]	@ (800dbfc <_strtol_l.constprop.0+0xf0>)
 800db2c:	460d      	mov	r5, r1
 800db2e:	462a      	mov	r2, r5
 800db30:	f815 4b01 	ldrb.w	r4, [r5], #1
 800db34:	5d06      	ldrb	r6, [r0, r4]
 800db36:	f016 0608 	ands.w	r6, r6, #8
 800db3a:	d1f8      	bne.n	800db2e <_strtol_l.constprop.0+0x22>
 800db3c:	2c2d      	cmp	r4, #45	@ 0x2d
 800db3e:	d12d      	bne.n	800db9c <_strtol_l.constprop.0+0x90>
 800db40:	782c      	ldrb	r4, [r5, #0]
 800db42:	2601      	movs	r6, #1
 800db44:	1c95      	adds	r5, r2, #2
 800db46:	f033 0210 	bics.w	r2, r3, #16
 800db4a:	d109      	bne.n	800db60 <_strtol_l.constprop.0+0x54>
 800db4c:	2c30      	cmp	r4, #48	@ 0x30
 800db4e:	d12a      	bne.n	800dba6 <_strtol_l.constprop.0+0x9a>
 800db50:	782a      	ldrb	r2, [r5, #0]
 800db52:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800db56:	2a58      	cmp	r2, #88	@ 0x58
 800db58:	d125      	bne.n	800dba6 <_strtol_l.constprop.0+0x9a>
 800db5a:	786c      	ldrb	r4, [r5, #1]
 800db5c:	2310      	movs	r3, #16
 800db5e:	3502      	adds	r5, #2
 800db60:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800db64:	f10c 3cff 	add.w	ip, ip, #4294967295
 800db68:	2200      	movs	r2, #0
 800db6a:	fbbc f9f3 	udiv	r9, ip, r3
 800db6e:	4610      	mov	r0, r2
 800db70:	fb03 ca19 	mls	sl, r3, r9, ip
 800db74:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800db78:	2f09      	cmp	r7, #9
 800db7a:	d81b      	bhi.n	800dbb4 <_strtol_l.constprop.0+0xa8>
 800db7c:	463c      	mov	r4, r7
 800db7e:	42a3      	cmp	r3, r4
 800db80:	dd27      	ble.n	800dbd2 <_strtol_l.constprop.0+0xc6>
 800db82:	1c57      	adds	r7, r2, #1
 800db84:	d007      	beq.n	800db96 <_strtol_l.constprop.0+0x8a>
 800db86:	4581      	cmp	r9, r0
 800db88:	d320      	bcc.n	800dbcc <_strtol_l.constprop.0+0xc0>
 800db8a:	d101      	bne.n	800db90 <_strtol_l.constprop.0+0x84>
 800db8c:	45a2      	cmp	sl, r4
 800db8e:	db1d      	blt.n	800dbcc <_strtol_l.constprop.0+0xc0>
 800db90:	fb00 4003 	mla	r0, r0, r3, r4
 800db94:	2201      	movs	r2, #1
 800db96:	f815 4b01 	ldrb.w	r4, [r5], #1
 800db9a:	e7eb      	b.n	800db74 <_strtol_l.constprop.0+0x68>
 800db9c:	2c2b      	cmp	r4, #43	@ 0x2b
 800db9e:	bf04      	itt	eq
 800dba0:	782c      	ldrbeq	r4, [r5, #0]
 800dba2:	1c95      	addeq	r5, r2, #2
 800dba4:	e7cf      	b.n	800db46 <_strtol_l.constprop.0+0x3a>
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d1da      	bne.n	800db60 <_strtol_l.constprop.0+0x54>
 800dbaa:	2c30      	cmp	r4, #48	@ 0x30
 800dbac:	bf0c      	ite	eq
 800dbae:	2308      	moveq	r3, #8
 800dbb0:	230a      	movne	r3, #10
 800dbb2:	e7d5      	b.n	800db60 <_strtol_l.constprop.0+0x54>
 800dbb4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800dbb8:	2f19      	cmp	r7, #25
 800dbba:	d801      	bhi.n	800dbc0 <_strtol_l.constprop.0+0xb4>
 800dbbc:	3c37      	subs	r4, #55	@ 0x37
 800dbbe:	e7de      	b.n	800db7e <_strtol_l.constprop.0+0x72>
 800dbc0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800dbc4:	2f19      	cmp	r7, #25
 800dbc6:	d804      	bhi.n	800dbd2 <_strtol_l.constprop.0+0xc6>
 800dbc8:	3c57      	subs	r4, #87	@ 0x57
 800dbca:	e7d8      	b.n	800db7e <_strtol_l.constprop.0+0x72>
 800dbcc:	f04f 32ff 	mov.w	r2, #4294967295
 800dbd0:	e7e1      	b.n	800db96 <_strtol_l.constprop.0+0x8a>
 800dbd2:	1c53      	adds	r3, r2, #1
 800dbd4:	d108      	bne.n	800dbe8 <_strtol_l.constprop.0+0xdc>
 800dbd6:	2322      	movs	r3, #34	@ 0x22
 800dbd8:	f8ce 3000 	str.w	r3, [lr]
 800dbdc:	4660      	mov	r0, ip
 800dbde:	f1b8 0f00 	cmp.w	r8, #0
 800dbe2:	d0a0      	beq.n	800db26 <_strtol_l.constprop.0+0x1a>
 800dbe4:	1e69      	subs	r1, r5, #1
 800dbe6:	e006      	b.n	800dbf6 <_strtol_l.constprop.0+0xea>
 800dbe8:	b106      	cbz	r6, 800dbec <_strtol_l.constprop.0+0xe0>
 800dbea:	4240      	negs	r0, r0
 800dbec:	f1b8 0f00 	cmp.w	r8, #0
 800dbf0:	d099      	beq.n	800db26 <_strtol_l.constprop.0+0x1a>
 800dbf2:	2a00      	cmp	r2, #0
 800dbf4:	d1f6      	bne.n	800dbe4 <_strtol_l.constprop.0+0xd8>
 800dbf6:	f8c8 1000 	str.w	r1, [r8]
 800dbfa:	e794      	b.n	800db26 <_strtol_l.constprop.0+0x1a>
 800dbfc:	0800f281 	.word	0x0800f281

0800dc00 <_strtol_r>:
 800dc00:	f7ff bf84 	b.w	800db0c <_strtol_l.constprop.0>

0800dc04 <__ssputs_r>:
 800dc04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc08:	688e      	ldr	r6, [r1, #8]
 800dc0a:	461f      	mov	r7, r3
 800dc0c:	42be      	cmp	r6, r7
 800dc0e:	680b      	ldr	r3, [r1, #0]
 800dc10:	4682      	mov	sl, r0
 800dc12:	460c      	mov	r4, r1
 800dc14:	4690      	mov	r8, r2
 800dc16:	d82d      	bhi.n	800dc74 <__ssputs_r+0x70>
 800dc18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dc1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dc20:	d026      	beq.n	800dc70 <__ssputs_r+0x6c>
 800dc22:	6965      	ldr	r5, [r4, #20]
 800dc24:	6909      	ldr	r1, [r1, #16]
 800dc26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dc2a:	eba3 0901 	sub.w	r9, r3, r1
 800dc2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dc32:	1c7b      	adds	r3, r7, #1
 800dc34:	444b      	add	r3, r9
 800dc36:	106d      	asrs	r5, r5, #1
 800dc38:	429d      	cmp	r5, r3
 800dc3a:	bf38      	it	cc
 800dc3c:	461d      	movcc	r5, r3
 800dc3e:	0553      	lsls	r3, r2, #21
 800dc40:	d527      	bpl.n	800dc92 <__ssputs_r+0x8e>
 800dc42:	4629      	mov	r1, r5
 800dc44:	f7fe fc1c 	bl	800c480 <_malloc_r>
 800dc48:	4606      	mov	r6, r0
 800dc4a:	b360      	cbz	r0, 800dca6 <__ssputs_r+0xa2>
 800dc4c:	6921      	ldr	r1, [r4, #16]
 800dc4e:	464a      	mov	r2, r9
 800dc50:	f7fd fd41 	bl	800b6d6 <memcpy>
 800dc54:	89a3      	ldrh	r3, [r4, #12]
 800dc56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dc5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc5e:	81a3      	strh	r3, [r4, #12]
 800dc60:	6126      	str	r6, [r4, #16]
 800dc62:	6165      	str	r5, [r4, #20]
 800dc64:	444e      	add	r6, r9
 800dc66:	eba5 0509 	sub.w	r5, r5, r9
 800dc6a:	6026      	str	r6, [r4, #0]
 800dc6c:	60a5      	str	r5, [r4, #8]
 800dc6e:	463e      	mov	r6, r7
 800dc70:	42be      	cmp	r6, r7
 800dc72:	d900      	bls.n	800dc76 <__ssputs_r+0x72>
 800dc74:	463e      	mov	r6, r7
 800dc76:	6820      	ldr	r0, [r4, #0]
 800dc78:	4632      	mov	r2, r6
 800dc7a:	4641      	mov	r1, r8
 800dc7c:	f000 f9c6 	bl	800e00c <memmove>
 800dc80:	68a3      	ldr	r3, [r4, #8]
 800dc82:	1b9b      	subs	r3, r3, r6
 800dc84:	60a3      	str	r3, [r4, #8]
 800dc86:	6823      	ldr	r3, [r4, #0]
 800dc88:	4433      	add	r3, r6
 800dc8a:	6023      	str	r3, [r4, #0]
 800dc8c:	2000      	movs	r0, #0
 800dc8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc92:	462a      	mov	r2, r5
 800dc94:	f000 fd7d 	bl	800e792 <_realloc_r>
 800dc98:	4606      	mov	r6, r0
 800dc9a:	2800      	cmp	r0, #0
 800dc9c:	d1e0      	bne.n	800dc60 <__ssputs_r+0x5c>
 800dc9e:	6921      	ldr	r1, [r4, #16]
 800dca0:	4650      	mov	r0, sl
 800dca2:	f7fe fb79 	bl	800c398 <_free_r>
 800dca6:	230c      	movs	r3, #12
 800dca8:	f8ca 3000 	str.w	r3, [sl]
 800dcac:	89a3      	ldrh	r3, [r4, #12]
 800dcae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dcb2:	81a3      	strh	r3, [r4, #12]
 800dcb4:	f04f 30ff 	mov.w	r0, #4294967295
 800dcb8:	e7e9      	b.n	800dc8e <__ssputs_r+0x8a>
	...

0800dcbc <_svfiprintf_r>:
 800dcbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc0:	4698      	mov	r8, r3
 800dcc2:	898b      	ldrh	r3, [r1, #12]
 800dcc4:	061b      	lsls	r3, r3, #24
 800dcc6:	b09d      	sub	sp, #116	@ 0x74
 800dcc8:	4607      	mov	r7, r0
 800dcca:	460d      	mov	r5, r1
 800dccc:	4614      	mov	r4, r2
 800dcce:	d510      	bpl.n	800dcf2 <_svfiprintf_r+0x36>
 800dcd0:	690b      	ldr	r3, [r1, #16]
 800dcd2:	b973      	cbnz	r3, 800dcf2 <_svfiprintf_r+0x36>
 800dcd4:	2140      	movs	r1, #64	@ 0x40
 800dcd6:	f7fe fbd3 	bl	800c480 <_malloc_r>
 800dcda:	6028      	str	r0, [r5, #0]
 800dcdc:	6128      	str	r0, [r5, #16]
 800dcde:	b930      	cbnz	r0, 800dcee <_svfiprintf_r+0x32>
 800dce0:	230c      	movs	r3, #12
 800dce2:	603b      	str	r3, [r7, #0]
 800dce4:	f04f 30ff 	mov.w	r0, #4294967295
 800dce8:	b01d      	add	sp, #116	@ 0x74
 800dcea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcee:	2340      	movs	r3, #64	@ 0x40
 800dcf0:	616b      	str	r3, [r5, #20]
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcf6:	2320      	movs	r3, #32
 800dcf8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dcfc:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd00:	2330      	movs	r3, #48	@ 0x30
 800dd02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dea0 <_svfiprintf_r+0x1e4>
 800dd06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dd0a:	f04f 0901 	mov.w	r9, #1
 800dd0e:	4623      	mov	r3, r4
 800dd10:	469a      	mov	sl, r3
 800dd12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd16:	b10a      	cbz	r2, 800dd1c <_svfiprintf_r+0x60>
 800dd18:	2a25      	cmp	r2, #37	@ 0x25
 800dd1a:	d1f9      	bne.n	800dd10 <_svfiprintf_r+0x54>
 800dd1c:	ebba 0b04 	subs.w	fp, sl, r4
 800dd20:	d00b      	beq.n	800dd3a <_svfiprintf_r+0x7e>
 800dd22:	465b      	mov	r3, fp
 800dd24:	4622      	mov	r2, r4
 800dd26:	4629      	mov	r1, r5
 800dd28:	4638      	mov	r0, r7
 800dd2a:	f7ff ff6b 	bl	800dc04 <__ssputs_r>
 800dd2e:	3001      	adds	r0, #1
 800dd30:	f000 80a7 	beq.w	800de82 <_svfiprintf_r+0x1c6>
 800dd34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd36:	445a      	add	r2, fp
 800dd38:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd3a:	f89a 3000 	ldrb.w	r3, [sl]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	f000 809f 	beq.w	800de82 <_svfiprintf_r+0x1c6>
 800dd44:	2300      	movs	r3, #0
 800dd46:	f04f 32ff 	mov.w	r2, #4294967295
 800dd4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd4e:	f10a 0a01 	add.w	sl, sl, #1
 800dd52:	9304      	str	r3, [sp, #16]
 800dd54:	9307      	str	r3, [sp, #28]
 800dd56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dd5a:	931a      	str	r3, [sp, #104]	@ 0x68
 800dd5c:	4654      	mov	r4, sl
 800dd5e:	2205      	movs	r2, #5
 800dd60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd64:	484e      	ldr	r0, [pc, #312]	@ (800dea0 <_svfiprintf_r+0x1e4>)
 800dd66:	f7f2 fa3b 	bl	80001e0 <memchr>
 800dd6a:	9a04      	ldr	r2, [sp, #16]
 800dd6c:	b9d8      	cbnz	r0, 800dda6 <_svfiprintf_r+0xea>
 800dd6e:	06d0      	lsls	r0, r2, #27
 800dd70:	bf44      	itt	mi
 800dd72:	2320      	movmi	r3, #32
 800dd74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd78:	0711      	lsls	r1, r2, #28
 800dd7a:	bf44      	itt	mi
 800dd7c:	232b      	movmi	r3, #43	@ 0x2b
 800dd7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd82:	f89a 3000 	ldrb.w	r3, [sl]
 800dd86:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd88:	d015      	beq.n	800ddb6 <_svfiprintf_r+0xfa>
 800dd8a:	9a07      	ldr	r2, [sp, #28]
 800dd8c:	4654      	mov	r4, sl
 800dd8e:	2000      	movs	r0, #0
 800dd90:	f04f 0c0a 	mov.w	ip, #10
 800dd94:	4621      	mov	r1, r4
 800dd96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd9a:	3b30      	subs	r3, #48	@ 0x30
 800dd9c:	2b09      	cmp	r3, #9
 800dd9e:	d94b      	bls.n	800de38 <_svfiprintf_r+0x17c>
 800dda0:	b1b0      	cbz	r0, 800ddd0 <_svfiprintf_r+0x114>
 800dda2:	9207      	str	r2, [sp, #28]
 800dda4:	e014      	b.n	800ddd0 <_svfiprintf_r+0x114>
 800dda6:	eba0 0308 	sub.w	r3, r0, r8
 800ddaa:	fa09 f303 	lsl.w	r3, r9, r3
 800ddae:	4313      	orrs	r3, r2
 800ddb0:	9304      	str	r3, [sp, #16]
 800ddb2:	46a2      	mov	sl, r4
 800ddb4:	e7d2      	b.n	800dd5c <_svfiprintf_r+0xa0>
 800ddb6:	9b03      	ldr	r3, [sp, #12]
 800ddb8:	1d19      	adds	r1, r3, #4
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	9103      	str	r1, [sp, #12]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	bfbb      	ittet	lt
 800ddc2:	425b      	neglt	r3, r3
 800ddc4:	f042 0202 	orrlt.w	r2, r2, #2
 800ddc8:	9307      	strge	r3, [sp, #28]
 800ddca:	9307      	strlt	r3, [sp, #28]
 800ddcc:	bfb8      	it	lt
 800ddce:	9204      	strlt	r2, [sp, #16]
 800ddd0:	7823      	ldrb	r3, [r4, #0]
 800ddd2:	2b2e      	cmp	r3, #46	@ 0x2e
 800ddd4:	d10a      	bne.n	800ddec <_svfiprintf_r+0x130>
 800ddd6:	7863      	ldrb	r3, [r4, #1]
 800ddd8:	2b2a      	cmp	r3, #42	@ 0x2a
 800ddda:	d132      	bne.n	800de42 <_svfiprintf_r+0x186>
 800dddc:	9b03      	ldr	r3, [sp, #12]
 800ddde:	1d1a      	adds	r2, r3, #4
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	9203      	str	r2, [sp, #12]
 800dde4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dde8:	3402      	adds	r4, #2
 800ddea:	9305      	str	r3, [sp, #20]
 800ddec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800deb0 <_svfiprintf_r+0x1f4>
 800ddf0:	7821      	ldrb	r1, [r4, #0]
 800ddf2:	2203      	movs	r2, #3
 800ddf4:	4650      	mov	r0, sl
 800ddf6:	f7f2 f9f3 	bl	80001e0 <memchr>
 800ddfa:	b138      	cbz	r0, 800de0c <_svfiprintf_r+0x150>
 800ddfc:	9b04      	ldr	r3, [sp, #16]
 800ddfe:	eba0 000a 	sub.w	r0, r0, sl
 800de02:	2240      	movs	r2, #64	@ 0x40
 800de04:	4082      	lsls	r2, r0
 800de06:	4313      	orrs	r3, r2
 800de08:	3401      	adds	r4, #1
 800de0a:	9304      	str	r3, [sp, #16]
 800de0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de10:	4824      	ldr	r0, [pc, #144]	@ (800dea4 <_svfiprintf_r+0x1e8>)
 800de12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800de16:	2206      	movs	r2, #6
 800de18:	f7f2 f9e2 	bl	80001e0 <memchr>
 800de1c:	2800      	cmp	r0, #0
 800de1e:	d036      	beq.n	800de8e <_svfiprintf_r+0x1d2>
 800de20:	4b21      	ldr	r3, [pc, #132]	@ (800dea8 <_svfiprintf_r+0x1ec>)
 800de22:	bb1b      	cbnz	r3, 800de6c <_svfiprintf_r+0x1b0>
 800de24:	9b03      	ldr	r3, [sp, #12]
 800de26:	3307      	adds	r3, #7
 800de28:	f023 0307 	bic.w	r3, r3, #7
 800de2c:	3308      	adds	r3, #8
 800de2e:	9303      	str	r3, [sp, #12]
 800de30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de32:	4433      	add	r3, r6
 800de34:	9309      	str	r3, [sp, #36]	@ 0x24
 800de36:	e76a      	b.n	800dd0e <_svfiprintf_r+0x52>
 800de38:	fb0c 3202 	mla	r2, ip, r2, r3
 800de3c:	460c      	mov	r4, r1
 800de3e:	2001      	movs	r0, #1
 800de40:	e7a8      	b.n	800dd94 <_svfiprintf_r+0xd8>
 800de42:	2300      	movs	r3, #0
 800de44:	3401      	adds	r4, #1
 800de46:	9305      	str	r3, [sp, #20]
 800de48:	4619      	mov	r1, r3
 800de4a:	f04f 0c0a 	mov.w	ip, #10
 800de4e:	4620      	mov	r0, r4
 800de50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de54:	3a30      	subs	r2, #48	@ 0x30
 800de56:	2a09      	cmp	r2, #9
 800de58:	d903      	bls.n	800de62 <_svfiprintf_r+0x1a6>
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d0c6      	beq.n	800ddec <_svfiprintf_r+0x130>
 800de5e:	9105      	str	r1, [sp, #20]
 800de60:	e7c4      	b.n	800ddec <_svfiprintf_r+0x130>
 800de62:	fb0c 2101 	mla	r1, ip, r1, r2
 800de66:	4604      	mov	r4, r0
 800de68:	2301      	movs	r3, #1
 800de6a:	e7f0      	b.n	800de4e <_svfiprintf_r+0x192>
 800de6c:	ab03      	add	r3, sp, #12
 800de6e:	9300      	str	r3, [sp, #0]
 800de70:	462a      	mov	r2, r5
 800de72:	4b0e      	ldr	r3, [pc, #56]	@ (800deac <_svfiprintf_r+0x1f0>)
 800de74:	a904      	add	r1, sp, #16
 800de76:	4638      	mov	r0, r7
 800de78:	f7fc fc66 	bl	800a748 <_printf_float>
 800de7c:	1c42      	adds	r2, r0, #1
 800de7e:	4606      	mov	r6, r0
 800de80:	d1d6      	bne.n	800de30 <_svfiprintf_r+0x174>
 800de82:	89ab      	ldrh	r3, [r5, #12]
 800de84:	065b      	lsls	r3, r3, #25
 800de86:	f53f af2d 	bmi.w	800dce4 <_svfiprintf_r+0x28>
 800de8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800de8c:	e72c      	b.n	800dce8 <_svfiprintf_r+0x2c>
 800de8e:	ab03      	add	r3, sp, #12
 800de90:	9300      	str	r3, [sp, #0]
 800de92:	462a      	mov	r2, r5
 800de94:	4b05      	ldr	r3, [pc, #20]	@ (800deac <_svfiprintf_r+0x1f0>)
 800de96:	a904      	add	r1, sp, #16
 800de98:	4638      	mov	r0, r7
 800de9a:	f7fc feed 	bl	800ac78 <_printf_i>
 800de9e:	e7ed      	b.n	800de7c <_svfiprintf_r+0x1c0>
 800dea0:	0800f381 	.word	0x0800f381
 800dea4:	0800f38b 	.word	0x0800f38b
 800dea8:	0800a749 	.word	0x0800a749
 800deac:	0800dc05 	.word	0x0800dc05
 800deb0:	0800f387 	.word	0x0800f387

0800deb4 <__sflush_r>:
 800deb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800deb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800debc:	0716      	lsls	r6, r2, #28
 800debe:	4605      	mov	r5, r0
 800dec0:	460c      	mov	r4, r1
 800dec2:	d454      	bmi.n	800df6e <__sflush_r+0xba>
 800dec4:	684b      	ldr	r3, [r1, #4]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	dc02      	bgt.n	800ded0 <__sflush_r+0x1c>
 800deca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800decc:	2b00      	cmp	r3, #0
 800dece:	dd48      	ble.n	800df62 <__sflush_r+0xae>
 800ded0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ded2:	2e00      	cmp	r6, #0
 800ded4:	d045      	beq.n	800df62 <__sflush_r+0xae>
 800ded6:	2300      	movs	r3, #0
 800ded8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dedc:	682f      	ldr	r7, [r5, #0]
 800dede:	6a21      	ldr	r1, [r4, #32]
 800dee0:	602b      	str	r3, [r5, #0]
 800dee2:	d030      	beq.n	800df46 <__sflush_r+0x92>
 800dee4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dee6:	89a3      	ldrh	r3, [r4, #12]
 800dee8:	0759      	lsls	r1, r3, #29
 800deea:	d505      	bpl.n	800def8 <__sflush_r+0x44>
 800deec:	6863      	ldr	r3, [r4, #4]
 800deee:	1ad2      	subs	r2, r2, r3
 800def0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800def2:	b10b      	cbz	r3, 800def8 <__sflush_r+0x44>
 800def4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800def6:	1ad2      	subs	r2, r2, r3
 800def8:	2300      	movs	r3, #0
 800defa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800defc:	6a21      	ldr	r1, [r4, #32]
 800defe:	4628      	mov	r0, r5
 800df00:	47b0      	blx	r6
 800df02:	1c43      	adds	r3, r0, #1
 800df04:	89a3      	ldrh	r3, [r4, #12]
 800df06:	d106      	bne.n	800df16 <__sflush_r+0x62>
 800df08:	6829      	ldr	r1, [r5, #0]
 800df0a:	291d      	cmp	r1, #29
 800df0c:	d82b      	bhi.n	800df66 <__sflush_r+0xb2>
 800df0e:	4a2a      	ldr	r2, [pc, #168]	@ (800dfb8 <__sflush_r+0x104>)
 800df10:	410a      	asrs	r2, r1
 800df12:	07d6      	lsls	r6, r2, #31
 800df14:	d427      	bmi.n	800df66 <__sflush_r+0xb2>
 800df16:	2200      	movs	r2, #0
 800df18:	6062      	str	r2, [r4, #4]
 800df1a:	04d9      	lsls	r1, r3, #19
 800df1c:	6922      	ldr	r2, [r4, #16]
 800df1e:	6022      	str	r2, [r4, #0]
 800df20:	d504      	bpl.n	800df2c <__sflush_r+0x78>
 800df22:	1c42      	adds	r2, r0, #1
 800df24:	d101      	bne.n	800df2a <__sflush_r+0x76>
 800df26:	682b      	ldr	r3, [r5, #0]
 800df28:	b903      	cbnz	r3, 800df2c <__sflush_r+0x78>
 800df2a:	6560      	str	r0, [r4, #84]	@ 0x54
 800df2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800df2e:	602f      	str	r7, [r5, #0]
 800df30:	b1b9      	cbz	r1, 800df62 <__sflush_r+0xae>
 800df32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800df36:	4299      	cmp	r1, r3
 800df38:	d002      	beq.n	800df40 <__sflush_r+0x8c>
 800df3a:	4628      	mov	r0, r5
 800df3c:	f7fe fa2c 	bl	800c398 <_free_r>
 800df40:	2300      	movs	r3, #0
 800df42:	6363      	str	r3, [r4, #52]	@ 0x34
 800df44:	e00d      	b.n	800df62 <__sflush_r+0xae>
 800df46:	2301      	movs	r3, #1
 800df48:	4628      	mov	r0, r5
 800df4a:	47b0      	blx	r6
 800df4c:	4602      	mov	r2, r0
 800df4e:	1c50      	adds	r0, r2, #1
 800df50:	d1c9      	bne.n	800dee6 <__sflush_r+0x32>
 800df52:	682b      	ldr	r3, [r5, #0]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d0c6      	beq.n	800dee6 <__sflush_r+0x32>
 800df58:	2b1d      	cmp	r3, #29
 800df5a:	d001      	beq.n	800df60 <__sflush_r+0xac>
 800df5c:	2b16      	cmp	r3, #22
 800df5e:	d11e      	bne.n	800df9e <__sflush_r+0xea>
 800df60:	602f      	str	r7, [r5, #0]
 800df62:	2000      	movs	r0, #0
 800df64:	e022      	b.n	800dfac <__sflush_r+0xf8>
 800df66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df6a:	b21b      	sxth	r3, r3
 800df6c:	e01b      	b.n	800dfa6 <__sflush_r+0xf2>
 800df6e:	690f      	ldr	r7, [r1, #16]
 800df70:	2f00      	cmp	r7, #0
 800df72:	d0f6      	beq.n	800df62 <__sflush_r+0xae>
 800df74:	0793      	lsls	r3, r2, #30
 800df76:	680e      	ldr	r6, [r1, #0]
 800df78:	bf08      	it	eq
 800df7a:	694b      	ldreq	r3, [r1, #20]
 800df7c:	600f      	str	r7, [r1, #0]
 800df7e:	bf18      	it	ne
 800df80:	2300      	movne	r3, #0
 800df82:	eba6 0807 	sub.w	r8, r6, r7
 800df86:	608b      	str	r3, [r1, #8]
 800df88:	f1b8 0f00 	cmp.w	r8, #0
 800df8c:	dde9      	ble.n	800df62 <__sflush_r+0xae>
 800df8e:	6a21      	ldr	r1, [r4, #32]
 800df90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800df92:	4643      	mov	r3, r8
 800df94:	463a      	mov	r2, r7
 800df96:	4628      	mov	r0, r5
 800df98:	47b0      	blx	r6
 800df9a:	2800      	cmp	r0, #0
 800df9c:	dc08      	bgt.n	800dfb0 <__sflush_r+0xfc>
 800df9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dfa6:	81a3      	strh	r3, [r4, #12]
 800dfa8:	f04f 30ff 	mov.w	r0, #4294967295
 800dfac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfb0:	4407      	add	r7, r0
 800dfb2:	eba8 0800 	sub.w	r8, r8, r0
 800dfb6:	e7e7      	b.n	800df88 <__sflush_r+0xd4>
 800dfb8:	dfbffffe 	.word	0xdfbffffe

0800dfbc <_fflush_r>:
 800dfbc:	b538      	push	{r3, r4, r5, lr}
 800dfbe:	690b      	ldr	r3, [r1, #16]
 800dfc0:	4605      	mov	r5, r0
 800dfc2:	460c      	mov	r4, r1
 800dfc4:	b913      	cbnz	r3, 800dfcc <_fflush_r+0x10>
 800dfc6:	2500      	movs	r5, #0
 800dfc8:	4628      	mov	r0, r5
 800dfca:	bd38      	pop	{r3, r4, r5, pc}
 800dfcc:	b118      	cbz	r0, 800dfd6 <_fflush_r+0x1a>
 800dfce:	6a03      	ldr	r3, [r0, #32]
 800dfd0:	b90b      	cbnz	r3, 800dfd6 <_fflush_r+0x1a>
 800dfd2:	f7fd fa11 	bl	800b3f8 <__sinit>
 800dfd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d0f3      	beq.n	800dfc6 <_fflush_r+0xa>
 800dfde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dfe0:	07d0      	lsls	r0, r2, #31
 800dfe2:	d404      	bmi.n	800dfee <_fflush_r+0x32>
 800dfe4:	0599      	lsls	r1, r3, #22
 800dfe6:	d402      	bmi.n	800dfee <_fflush_r+0x32>
 800dfe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dfea:	f7fd fb72 	bl	800b6d2 <__retarget_lock_acquire_recursive>
 800dfee:	4628      	mov	r0, r5
 800dff0:	4621      	mov	r1, r4
 800dff2:	f7ff ff5f 	bl	800deb4 <__sflush_r>
 800dff6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dff8:	07da      	lsls	r2, r3, #31
 800dffa:	4605      	mov	r5, r0
 800dffc:	d4e4      	bmi.n	800dfc8 <_fflush_r+0xc>
 800dffe:	89a3      	ldrh	r3, [r4, #12]
 800e000:	059b      	lsls	r3, r3, #22
 800e002:	d4e1      	bmi.n	800dfc8 <_fflush_r+0xc>
 800e004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e006:	f7fd fb65 	bl	800b6d4 <__retarget_lock_release_recursive>
 800e00a:	e7dd      	b.n	800dfc8 <_fflush_r+0xc>

0800e00c <memmove>:
 800e00c:	4288      	cmp	r0, r1
 800e00e:	b510      	push	{r4, lr}
 800e010:	eb01 0402 	add.w	r4, r1, r2
 800e014:	d902      	bls.n	800e01c <memmove+0x10>
 800e016:	4284      	cmp	r4, r0
 800e018:	4623      	mov	r3, r4
 800e01a:	d807      	bhi.n	800e02c <memmove+0x20>
 800e01c:	1e43      	subs	r3, r0, #1
 800e01e:	42a1      	cmp	r1, r4
 800e020:	d008      	beq.n	800e034 <memmove+0x28>
 800e022:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e026:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e02a:	e7f8      	b.n	800e01e <memmove+0x12>
 800e02c:	4402      	add	r2, r0
 800e02e:	4601      	mov	r1, r0
 800e030:	428a      	cmp	r2, r1
 800e032:	d100      	bne.n	800e036 <memmove+0x2a>
 800e034:	bd10      	pop	{r4, pc}
 800e036:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e03a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e03e:	e7f7      	b.n	800e030 <memmove+0x24>

0800e040 <strncmp>:
 800e040:	b510      	push	{r4, lr}
 800e042:	b16a      	cbz	r2, 800e060 <strncmp+0x20>
 800e044:	3901      	subs	r1, #1
 800e046:	1884      	adds	r4, r0, r2
 800e048:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e04c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e050:	429a      	cmp	r2, r3
 800e052:	d103      	bne.n	800e05c <strncmp+0x1c>
 800e054:	42a0      	cmp	r0, r4
 800e056:	d001      	beq.n	800e05c <strncmp+0x1c>
 800e058:	2a00      	cmp	r2, #0
 800e05a:	d1f5      	bne.n	800e048 <strncmp+0x8>
 800e05c:	1ad0      	subs	r0, r2, r3
 800e05e:	bd10      	pop	{r4, pc}
 800e060:	4610      	mov	r0, r2
 800e062:	e7fc      	b.n	800e05e <strncmp+0x1e>

0800e064 <_sbrk_r>:
 800e064:	b538      	push	{r3, r4, r5, lr}
 800e066:	4d06      	ldr	r5, [pc, #24]	@ (800e080 <_sbrk_r+0x1c>)
 800e068:	2300      	movs	r3, #0
 800e06a:	4604      	mov	r4, r0
 800e06c:	4608      	mov	r0, r1
 800e06e:	602b      	str	r3, [r5, #0]
 800e070:	f7f5 f87e 	bl	8003170 <_sbrk>
 800e074:	1c43      	adds	r3, r0, #1
 800e076:	d102      	bne.n	800e07e <_sbrk_r+0x1a>
 800e078:	682b      	ldr	r3, [r5, #0]
 800e07a:	b103      	cbz	r3, 800e07e <_sbrk_r+0x1a>
 800e07c:	6023      	str	r3, [r4, #0]
 800e07e:	bd38      	pop	{r3, r4, r5, pc}
 800e080:	20004b4c 	.word	0x20004b4c
 800e084:	00000000 	.word	0x00000000

0800e088 <nan>:
 800e088:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e090 <nan+0x8>
 800e08c:	4770      	bx	lr
 800e08e:	bf00      	nop
 800e090:	00000000 	.word	0x00000000
 800e094:	7ff80000 	.word	0x7ff80000

0800e098 <__assert_func>:
 800e098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e09a:	4614      	mov	r4, r2
 800e09c:	461a      	mov	r2, r3
 800e09e:	4b09      	ldr	r3, [pc, #36]	@ (800e0c4 <__assert_func+0x2c>)
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	4605      	mov	r5, r0
 800e0a4:	68d8      	ldr	r0, [r3, #12]
 800e0a6:	b954      	cbnz	r4, 800e0be <__assert_func+0x26>
 800e0a8:	4b07      	ldr	r3, [pc, #28]	@ (800e0c8 <__assert_func+0x30>)
 800e0aa:	461c      	mov	r4, r3
 800e0ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e0b0:	9100      	str	r1, [sp, #0]
 800e0b2:	462b      	mov	r3, r5
 800e0b4:	4905      	ldr	r1, [pc, #20]	@ (800e0cc <__assert_func+0x34>)
 800e0b6:	f000 fba7 	bl	800e808 <fiprintf>
 800e0ba:	f000 fbb7 	bl	800e82c <abort>
 800e0be:	4b04      	ldr	r3, [pc, #16]	@ (800e0d0 <__assert_func+0x38>)
 800e0c0:	e7f4      	b.n	800e0ac <__assert_func+0x14>
 800e0c2:	bf00      	nop
 800e0c4:	20000030 	.word	0x20000030
 800e0c8:	0800f3d5 	.word	0x0800f3d5
 800e0cc:	0800f3a7 	.word	0x0800f3a7
 800e0d0:	0800f39a 	.word	0x0800f39a

0800e0d4 <_calloc_r>:
 800e0d4:	b570      	push	{r4, r5, r6, lr}
 800e0d6:	fba1 5402 	umull	r5, r4, r1, r2
 800e0da:	b93c      	cbnz	r4, 800e0ec <_calloc_r+0x18>
 800e0dc:	4629      	mov	r1, r5
 800e0de:	f7fe f9cf 	bl	800c480 <_malloc_r>
 800e0e2:	4606      	mov	r6, r0
 800e0e4:	b928      	cbnz	r0, 800e0f2 <_calloc_r+0x1e>
 800e0e6:	2600      	movs	r6, #0
 800e0e8:	4630      	mov	r0, r6
 800e0ea:	bd70      	pop	{r4, r5, r6, pc}
 800e0ec:	220c      	movs	r2, #12
 800e0ee:	6002      	str	r2, [r0, #0]
 800e0f0:	e7f9      	b.n	800e0e6 <_calloc_r+0x12>
 800e0f2:	462a      	mov	r2, r5
 800e0f4:	4621      	mov	r1, r4
 800e0f6:	f7fd fa18 	bl	800b52a <memset>
 800e0fa:	e7f5      	b.n	800e0e8 <_calloc_r+0x14>

0800e0fc <rshift>:
 800e0fc:	6903      	ldr	r3, [r0, #16]
 800e0fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e102:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e106:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e10a:	f100 0414 	add.w	r4, r0, #20
 800e10e:	dd45      	ble.n	800e19c <rshift+0xa0>
 800e110:	f011 011f 	ands.w	r1, r1, #31
 800e114:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e118:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e11c:	d10c      	bne.n	800e138 <rshift+0x3c>
 800e11e:	f100 0710 	add.w	r7, r0, #16
 800e122:	4629      	mov	r1, r5
 800e124:	42b1      	cmp	r1, r6
 800e126:	d334      	bcc.n	800e192 <rshift+0x96>
 800e128:	1a9b      	subs	r3, r3, r2
 800e12a:	009b      	lsls	r3, r3, #2
 800e12c:	1eea      	subs	r2, r5, #3
 800e12e:	4296      	cmp	r6, r2
 800e130:	bf38      	it	cc
 800e132:	2300      	movcc	r3, #0
 800e134:	4423      	add	r3, r4
 800e136:	e015      	b.n	800e164 <rshift+0x68>
 800e138:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e13c:	f1c1 0820 	rsb	r8, r1, #32
 800e140:	40cf      	lsrs	r7, r1
 800e142:	f105 0e04 	add.w	lr, r5, #4
 800e146:	46a1      	mov	r9, r4
 800e148:	4576      	cmp	r6, lr
 800e14a:	46f4      	mov	ip, lr
 800e14c:	d815      	bhi.n	800e17a <rshift+0x7e>
 800e14e:	1a9a      	subs	r2, r3, r2
 800e150:	0092      	lsls	r2, r2, #2
 800e152:	3a04      	subs	r2, #4
 800e154:	3501      	adds	r5, #1
 800e156:	42ae      	cmp	r6, r5
 800e158:	bf38      	it	cc
 800e15a:	2200      	movcc	r2, #0
 800e15c:	18a3      	adds	r3, r4, r2
 800e15e:	50a7      	str	r7, [r4, r2]
 800e160:	b107      	cbz	r7, 800e164 <rshift+0x68>
 800e162:	3304      	adds	r3, #4
 800e164:	1b1a      	subs	r2, r3, r4
 800e166:	42a3      	cmp	r3, r4
 800e168:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e16c:	bf08      	it	eq
 800e16e:	2300      	moveq	r3, #0
 800e170:	6102      	str	r2, [r0, #16]
 800e172:	bf08      	it	eq
 800e174:	6143      	streq	r3, [r0, #20]
 800e176:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e17a:	f8dc c000 	ldr.w	ip, [ip]
 800e17e:	fa0c fc08 	lsl.w	ip, ip, r8
 800e182:	ea4c 0707 	orr.w	r7, ip, r7
 800e186:	f849 7b04 	str.w	r7, [r9], #4
 800e18a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e18e:	40cf      	lsrs	r7, r1
 800e190:	e7da      	b.n	800e148 <rshift+0x4c>
 800e192:	f851 cb04 	ldr.w	ip, [r1], #4
 800e196:	f847 cf04 	str.w	ip, [r7, #4]!
 800e19a:	e7c3      	b.n	800e124 <rshift+0x28>
 800e19c:	4623      	mov	r3, r4
 800e19e:	e7e1      	b.n	800e164 <rshift+0x68>

0800e1a0 <__hexdig_fun>:
 800e1a0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e1a4:	2b09      	cmp	r3, #9
 800e1a6:	d802      	bhi.n	800e1ae <__hexdig_fun+0xe>
 800e1a8:	3820      	subs	r0, #32
 800e1aa:	b2c0      	uxtb	r0, r0
 800e1ac:	4770      	bx	lr
 800e1ae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e1b2:	2b05      	cmp	r3, #5
 800e1b4:	d801      	bhi.n	800e1ba <__hexdig_fun+0x1a>
 800e1b6:	3847      	subs	r0, #71	@ 0x47
 800e1b8:	e7f7      	b.n	800e1aa <__hexdig_fun+0xa>
 800e1ba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e1be:	2b05      	cmp	r3, #5
 800e1c0:	d801      	bhi.n	800e1c6 <__hexdig_fun+0x26>
 800e1c2:	3827      	subs	r0, #39	@ 0x27
 800e1c4:	e7f1      	b.n	800e1aa <__hexdig_fun+0xa>
 800e1c6:	2000      	movs	r0, #0
 800e1c8:	4770      	bx	lr
	...

0800e1cc <__gethex>:
 800e1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1d0:	b085      	sub	sp, #20
 800e1d2:	468a      	mov	sl, r1
 800e1d4:	9302      	str	r3, [sp, #8]
 800e1d6:	680b      	ldr	r3, [r1, #0]
 800e1d8:	9001      	str	r0, [sp, #4]
 800e1da:	4690      	mov	r8, r2
 800e1dc:	1c9c      	adds	r4, r3, #2
 800e1de:	46a1      	mov	r9, r4
 800e1e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e1e4:	2830      	cmp	r0, #48	@ 0x30
 800e1e6:	d0fa      	beq.n	800e1de <__gethex+0x12>
 800e1e8:	eba9 0303 	sub.w	r3, r9, r3
 800e1ec:	f1a3 0b02 	sub.w	fp, r3, #2
 800e1f0:	f7ff ffd6 	bl	800e1a0 <__hexdig_fun>
 800e1f4:	4605      	mov	r5, r0
 800e1f6:	2800      	cmp	r0, #0
 800e1f8:	d168      	bne.n	800e2cc <__gethex+0x100>
 800e1fa:	49a0      	ldr	r1, [pc, #640]	@ (800e47c <__gethex+0x2b0>)
 800e1fc:	2201      	movs	r2, #1
 800e1fe:	4648      	mov	r0, r9
 800e200:	f7ff ff1e 	bl	800e040 <strncmp>
 800e204:	4607      	mov	r7, r0
 800e206:	2800      	cmp	r0, #0
 800e208:	d167      	bne.n	800e2da <__gethex+0x10e>
 800e20a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e20e:	4626      	mov	r6, r4
 800e210:	f7ff ffc6 	bl	800e1a0 <__hexdig_fun>
 800e214:	2800      	cmp	r0, #0
 800e216:	d062      	beq.n	800e2de <__gethex+0x112>
 800e218:	4623      	mov	r3, r4
 800e21a:	7818      	ldrb	r0, [r3, #0]
 800e21c:	2830      	cmp	r0, #48	@ 0x30
 800e21e:	4699      	mov	r9, r3
 800e220:	f103 0301 	add.w	r3, r3, #1
 800e224:	d0f9      	beq.n	800e21a <__gethex+0x4e>
 800e226:	f7ff ffbb 	bl	800e1a0 <__hexdig_fun>
 800e22a:	fab0 f580 	clz	r5, r0
 800e22e:	096d      	lsrs	r5, r5, #5
 800e230:	f04f 0b01 	mov.w	fp, #1
 800e234:	464a      	mov	r2, r9
 800e236:	4616      	mov	r6, r2
 800e238:	3201      	adds	r2, #1
 800e23a:	7830      	ldrb	r0, [r6, #0]
 800e23c:	f7ff ffb0 	bl	800e1a0 <__hexdig_fun>
 800e240:	2800      	cmp	r0, #0
 800e242:	d1f8      	bne.n	800e236 <__gethex+0x6a>
 800e244:	498d      	ldr	r1, [pc, #564]	@ (800e47c <__gethex+0x2b0>)
 800e246:	2201      	movs	r2, #1
 800e248:	4630      	mov	r0, r6
 800e24a:	f7ff fef9 	bl	800e040 <strncmp>
 800e24e:	2800      	cmp	r0, #0
 800e250:	d13f      	bne.n	800e2d2 <__gethex+0x106>
 800e252:	b944      	cbnz	r4, 800e266 <__gethex+0x9a>
 800e254:	1c74      	adds	r4, r6, #1
 800e256:	4622      	mov	r2, r4
 800e258:	4616      	mov	r6, r2
 800e25a:	3201      	adds	r2, #1
 800e25c:	7830      	ldrb	r0, [r6, #0]
 800e25e:	f7ff ff9f 	bl	800e1a0 <__hexdig_fun>
 800e262:	2800      	cmp	r0, #0
 800e264:	d1f8      	bne.n	800e258 <__gethex+0x8c>
 800e266:	1ba4      	subs	r4, r4, r6
 800e268:	00a7      	lsls	r7, r4, #2
 800e26a:	7833      	ldrb	r3, [r6, #0]
 800e26c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e270:	2b50      	cmp	r3, #80	@ 0x50
 800e272:	d13e      	bne.n	800e2f2 <__gethex+0x126>
 800e274:	7873      	ldrb	r3, [r6, #1]
 800e276:	2b2b      	cmp	r3, #43	@ 0x2b
 800e278:	d033      	beq.n	800e2e2 <__gethex+0x116>
 800e27a:	2b2d      	cmp	r3, #45	@ 0x2d
 800e27c:	d034      	beq.n	800e2e8 <__gethex+0x11c>
 800e27e:	1c71      	adds	r1, r6, #1
 800e280:	2400      	movs	r4, #0
 800e282:	7808      	ldrb	r0, [r1, #0]
 800e284:	f7ff ff8c 	bl	800e1a0 <__hexdig_fun>
 800e288:	1e43      	subs	r3, r0, #1
 800e28a:	b2db      	uxtb	r3, r3
 800e28c:	2b18      	cmp	r3, #24
 800e28e:	d830      	bhi.n	800e2f2 <__gethex+0x126>
 800e290:	f1a0 0210 	sub.w	r2, r0, #16
 800e294:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e298:	f7ff ff82 	bl	800e1a0 <__hexdig_fun>
 800e29c:	f100 3cff 	add.w	ip, r0, #4294967295
 800e2a0:	fa5f fc8c 	uxtb.w	ip, ip
 800e2a4:	f1bc 0f18 	cmp.w	ip, #24
 800e2a8:	f04f 030a 	mov.w	r3, #10
 800e2ac:	d91e      	bls.n	800e2ec <__gethex+0x120>
 800e2ae:	b104      	cbz	r4, 800e2b2 <__gethex+0xe6>
 800e2b0:	4252      	negs	r2, r2
 800e2b2:	4417      	add	r7, r2
 800e2b4:	f8ca 1000 	str.w	r1, [sl]
 800e2b8:	b1ed      	cbz	r5, 800e2f6 <__gethex+0x12a>
 800e2ba:	f1bb 0f00 	cmp.w	fp, #0
 800e2be:	bf0c      	ite	eq
 800e2c0:	2506      	moveq	r5, #6
 800e2c2:	2500      	movne	r5, #0
 800e2c4:	4628      	mov	r0, r5
 800e2c6:	b005      	add	sp, #20
 800e2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2cc:	2500      	movs	r5, #0
 800e2ce:	462c      	mov	r4, r5
 800e2d0:	e7b0      	b.n	800e234 <__gethex+0x68>
 800e2d2:	2c00      	cmp	r4, #0
 800e2d4:	d1c7      	bne.n	800e266 <__gethex+0x9a>
 800e2d6:	4627      	mov	r7, r4
 800e2d8:	e7c7      	b.n	800e26a <__gethex+0x9e>
 800e2da:	464e      	mov	r6, r9
 800e2dc:	462f      	mov	r7, r5
 800e2de:	2501      	movs	r5, #1
 800e2e0:	e7c3      	b.n	800e26a <__gethex+0x9e>
 800e2e2:	2400      	movs	r4, #0
 800e2e4:	1cb1      	adds	r1, r6, #2
 800e2e6:	e7cc      	b.n	800e282 <__gethex+0xb6>
 800e2e8:	2401      	movs	r4, #1
 800e2ea:	e7fb      	b.n	800e2e4 <__gethex+0x118>
 800e2ec:	fb03 0002 	mla	r0, r3, r2, r0
 800e2f0:	e7ce      	b.n	800e290 <__gethex+0xc4>
 800e2f2:	4631      	mov	r1, r6
 800e2f4:	e7de      	b.n	800e2b4 <__gethex+0xe8>
 800e2f6:	eba6 0309 	sub.w	r3, r6, r9
 800e2fa:	3b01      	subs	r3, #1
 800e2fc:	4629      	mov	r1, r5
 800e2fe:	2b07      	cmp	r3, #7
 800e300:	dc0a      	bgt.n	800e318 <__gethex+0x14c>
 800e302:	9801      	ldr	r0, [sp, #4]
 800e304:	f7fe f948 	bl	800c598 <_Balloc>
 800e308:	4604      	mov	r4, r0
 800e30a:	b940      	cbnz	r0, 800e31e <__gethex+0x152>
 800e30c:	4b5c      	ldr	r3, [pc, #368]	@ (800e480 <__gethex+0x2b4>)
 800e30e:	4602      	mov	r2, r0
 800e310:	21e4      	movs	r1, #228	@ 0xe4
 800e312:	485c      	ldr	r0, [pc, #368]	@ (800e484 <__gethex+0x2b8>)
 800e314:	f7ff fec0 	bl	800e098 <__assert_func>
 800e318:	3101      	adds	r1, #1
 800e31a:	105b      	asrs	r3, r3, #1
 800e31c:	e7ef      	b.n	800e2fe <__gethex+0x132>
 800e31e:	f100 0a14 	add.w	sl, r0, #20
 800e322:	2300      	movs	r3, #0
 800e324:	4655      	mov	r5, sl
 800e326:	469b      	mov	fp, r3
 800e328:	45b1      	cmp	r9, r6
 800e32a:	d337      	bcc.n	800e39c <__gethex+0x1d0>
 800e32c:	f845 bb04 	str.w	fp, [r5], #4
 800e330:	eba5 050a 	sub.w	r5, r5, sl
 800e334:	10ad      	asrs	r5, r5, #2
 800e336:	6125      	str	r5, [r4, #16]
 800e338:	4658      	mov	r0, fp
 800e33a:	f7fe fa1f 	bl	800c77c <__hi0bits>
 800e33e:	016d      	lsls	r5, r5, #5
 800e340:	f8d8 6000 	ldr.w	r6, [r8]
 800e344:	1a2d      	subs	r5, r5, r0
 800e346:	42b5      	cmp	r5, r6
 800e348:	dd54      	ble.n	800e3f4 <__gethex+0x228>
 800e34a:	1bad      	subs	r5, r5, r6
 800e34c:	4629      	mov	r1, r5
 800e34e:	4620      	mov	r0, r4
 800e350:	f7fe fdb3 	bl	800ceba <__any_on>
 800e354:	4681      	mov	r9, r0
 800e356:	b178      	cbz	r0, 800e378 <__gethex+0x1ac>
 800e358:	1e6b      	subs	r3, r5, #1
 800e35a:	1159      	asrs	r1, r3, #5
 800e35c:	f003 021f 	and.w	r2, r3, #31
 800e360:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e364:	f04f 0901 	mov.w	r9, #1
 800e368:	fa09 f202 	lsl.w	r2, r9, r2
 800e36c:	420a      	tst	r2, r1
 800e36e:	d003      	beq.n	800e378 <__gethex+0x1ac>
 800e370:	454b      	cmp	r3, r9
 800e372:	dc36      	bgt.n	800e3e2 <__gethex+0x216>
 800e374:	f04f 0902 	mov.w	r9, #2
 800e378:	4629      	mov	r1, r5
 800e37a:	4620      	mov	r0, r4
 800e37c:	f7ff febe 	bl	800e0fc <rshift>
 800e380:	442f      	add	r7, r5
 800e382:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e386:	42bb      	cmp	r3, r7
 800e388:	da42      	bge.n	800e410 <__gethex+0x244>
 800e38a:	9801      	ldr	r0, [sp, #4]
 800e38c:	4621      	mov	r1, r4
 800e38e:	f7fe f943 	bl	800c618 <_Bfree>
 800e392:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e394:	2300      	movs	r3, #0
 800e396:	6013      	str	r3, [r2, #0]
 800e398:	25a3      	movs	r5, #163	@ 0xa3
 800e39a:	e793      	b.n	800e2c4 <__gethex+0xf8>
 800e39c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e3a0:	2a2e      	cmp	r2, #46	@ 0x2e
 800e3a2:	d012      	beq.n	800e3ca <__gethex+0x1fe>
 800e3a4:	2b20      	cmp	r3, #32
 800e3a6:	d104      	bne.n	800e3b2 <__gethex+0x1e6>
 800e3a8:	f845 bb04 	str.w	fp, [r5], #4
 800e3ac:	f04f 0b00 	mov.w	fp, #0
 800e3b0:	465b      	mov	r3, fp
 800e3b2:	7830      	ldrb	r0, [r6, #0]
 800e3b4:	9303      	str	r3, [sp, #12]
 800e3b6:	f7ff fef3 	bl	800e1a0 <__hexdig_fun>
 800e3ba:	9b03      	ldr	r3, [sp, #12]
 800e3bc:	f000 000f 	and.w	r0, r0, #15
 800e3c0:	4098      	lsls	r0, r3
 800e3c2:	ea4b 0b00 	orr.w	fp, fp, r0
 800e3c6:	3304      	adds	r3, #4
 800e3c8:	e7ae      	b.n	800e328 <__gethex+0x15c>
 800e3ca:	45b1      	cmp	r9, r6
 800e3cc:	d8ea      	bhi.n	800e3a4 <__gethex+0x1d8>
 800e3ce:	492b      	ldr	r1, [pc, #172]	@ (800e47c <__gethex+0x2b0>)
 800e3d0:	9303      	str	r3, [sp, #12]
 800e3d2:	2201      	movs	r2, #1
 800e3d4:	4630      	mov	r0, r6
 800e3d6:	f7ff fe33 	bl	800e040 <strncmp>
 800e3da:	9b03      	ldr	r3, [sp, #12]
 800e3dc:	2800      	cmp	r0, #0
 800e3de:	d1e1      	bne.n	800e3a4 <__gethex+0x1d8>
 800e3e0:	e7a2      	b.n	800e328 <__gethex+0x15c>
 800e3e2:	1ea9      	subs	r1, r5, #2
 800e3e4:	4620      	mov	r0, r4
 800e3e6:	f7fe fd68 	bl	800ceba <__any_on>
 800e3ea:	2800      	cmp	r0, #0
 800e3ec:	d0c2      	beq.n	800e374 <__gethex+0x1a8>
 800e3ee:	f04f 0903 	mov.w	r9, #3
 800e3f2:	e7c1      	b.n	800e378 <__gethex+0x1ac>
 800e3f4:	da09      	bge.n	800e40a <__gethex+0x23e>
 800e3f6:	1b75      	subs	r5, r6, r5
 800e3f8:	4621      	mov	r1, r4
 800e3fa:	9801      	ldr	r0, [sp, #4]
 800e3fc:	462a      	mov	r2, r5
 800e3fe:	f7fe fb23 	bl	800ca48 <__lshift>
 800e402:	1b7f      	subs	r7, r7, r5
 800e404:	4604      	mov	r4, r0
 800e406:	f100 0a14 	add.w	sl, r0, #20
 800e40a:	f04f 0900 	mov.w	r9, #0
 800e40e:	e7b8      	b.n	800e382 <__gethex+0x1b6>
 800e410:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e414:	42bd      	cmp	r5, r7
 800e416:	dd6f      	ble.n	800e4f8 <__gethex+0x32c>
 800e418:	1bed      	subs	r5, r5, r7
 800e41a:	42ae      	cmp	r6, r5
 800e41c:	dc34      	bgt.n	800e488 <__gethex+0x2bc>
 800e41e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e422:	2b02      	cmp	r3, #2
 800e424:	d022      	beq.n	800e46c <__gethex+0x2a0>
 800e426:	2b03      	cmp	r3, #3
 800e428:	d024      	beq.n	800e474 <__gethex+0x2a8>
 800e42a:	2b01      	cmp	r3, #1
 800e42c:	d115      	bne.n	800e45a <__gethex+0x28e>
 800e42e:	42ae      	cmp	r6, r5
 800e430:	d113      	bne.n	800e45a <__gethex+0x28e>
 800e432:	2e01      	cmp	r6, #1
 800e434:	d10b      	bne.n	800e44e <__gethex+0x282>
 800e436:	9a02      	ldr	r2, [sp, #8]
 800e438:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e43c:	6013      	str	r3, [r2, #0]
 800e43e:	2301      	movs	r3, #1
 800e440:	6123      	str	r3, [r4, #16]
 800e442:	f8ca 3000 	str.w	r3, [sl]
 800e446:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e448:	2562      	movs	r5, #98	@ 0x62
 800e44a:	601c      	str	r4, [r3, #0]
 800e44c:	e73a      	b.n	800e2c4 <__gethex+0xf8>
 800e44e:	1e71      	subs	r1, r6, #1
 800e450:	4620      	mov	r0, r4
 800e452:	f7fe fd32 	bl	800ceba <__any_on>
 800e456:	2800      	cmp	r0, #0
 800e458:	d1ed      	bne.n	800e436 <__gethex+0x26a>
 800e45a:	9801      	ldr	r0, [sp, #4]
 800e45c:	4621      	mov	r1, r4
 800e45e:	f7fe f8db 	bl	800c618 <_Bfree>
 800e462:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e464:	2300      	movs	r3, #0
 800e466:	6013      	str	r3, [r2, #0]
 800e468:	2550      	movs	r5, #80	@ 0x50
 800e46a:	e72b      	b.n	800e2c4 <__gethex+0xf8>
 800e46c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d1f3      	bne.n	800e45a <__gethex+0x28e>
 800e472:	e7e0      	b.n	800e436 <__gethex+0x26a>
 800e474:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e476:	2b00      	cmp	r3, #0
 800e478:	d1dd      	bne.n	800e436 <__gethex+0x26a>
 800e47a:	e7ee      	b.n	800e45a <__gethex+0x28e>
 800e47c:	0800f228 	.word	0x0800f228
 800e480:	0800f0c1 	.word	0x0800f0c1
 800e484:	0800f3d6 	.word	0x0800f3d6
 800e488:	1e6f      	subs	r7, r5, #1
 800e48a:	f1b9 0f00 	cmp.w	r9, #0
 800e48e:	d130      	bne.n	800e4f2 <__gethex+0x326>
 800e490:	b127      	cbz	r7, 800e49c <__gethex+0x2d0>
 800e492:	4639      	mov	r1, r7
 800e494:	4620      	mov	r0, r4
 800e496:	f7fe fd10 	bl	800ceba <__any_on>
 800e49a:	4681      	mov	r9, r0
 800e49c:	117a      	asrs	r2, r7, #5
 800e49e:	2301      	movs	r3, #1
 800e4a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e4a4:	f007 071f 	and.w	r7, r7, #31
 800e4a8:	40bb      	lsls	r3, r7
 800e4aa:	4213      	tst	r3, r2
 800e4ac:	4629      	mov	r1, r5
 800e4ae:	4620      	mov	r0, r4
 800e4b0:	bf18      	it	ne
 800e4b2:	f049 0902 	orrne.w	r9, r9, #2
 800e4b6:	f7ff fe21 	bl	800e0fc <rshift>
 800e4ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e4be:	1b76      	subs	r6, r6, r5
 800e4c0:	2502      	movs	r5, #2
 800e4c2:	f1b9 0f00 	cmp.w	r9, #0
 800e4c6:	d047      	beq.n	800e558 <__gethex+0x38c>
 800e4c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e4cc:	2b02      	cmp	r3, #2
 800e4ce:	d015      	beq.n	800e4fc <__gethex+0x330>
 800e4d0:	2b03      	cmp	r3, #3
 800e4d2:	d017      	beq.n	800e504 <__gethex+0x338>
 800e4d4:	2b01      	cmp	r3, #1
 800e4d6:	d109      	bne.n	800e4ec <__gethex+0x320>
 800e4d8:	f019 0f02 	tst.w	r9, #2
 800e4dc:	d006      	beq.n	800e4ec <__gethex+0x320>
 800e4de:	f8da 3000 	ldr.w	r3, [sl]
 800e4e2:	ea49 0903 	orr.w	r9, r9, r3
 800e4e6:	f019 0f01 	tst.w	r9, #1
 800e4ea:	d10e      	bne.n	800e50a <__gethex+0x33e>
 800e4ec:	f045 0510 	orr.w	r5, r5, #16
 800e4f0:	e032      	b.n	800e558 <__gethex+0x38c>
 800e4f2:	f04f 0901 	mov.w	r9, #1
 800e4f6:	e7d1      	b.n	800e49c <__gethex+0x2d0>
 800e4f8:	2501      	movs	r5, #1
 800e4fa:	e7e2      	b.n	800e4c2 <__gethex+0x2f6>
 800e4fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4fe:	f1c3 0301 	rsb	r3, r3, #1
 800e502:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e504:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e506:	2b00      	cmp	r3, #0
 800e508:	d0f0      	beq.n	800e4ec <__gethex+0x320>
 800e50a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e50e:	f104 0314 	add.w	r3, r4, #20
 800e512:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e516:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e51a:	f04f 0c00 	mov.w	ip, #0
 800e51e:	4618      	mov	r0, r3
 800e520:	f853 2b04 	ldr.w	r2, [r3], #4
 800e524:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e528:	d01b      	beq.n	800e562 <__gethex+0x396>
 800e52a:	3201      	adds	r2, #1
 800e52c:	6002      	str	r2, [r0, #0]
 800e52e:	2d02      	cmp	r5, #2
 800e530:	f104 0314 	add.w	r3, r4, #20
 800e534:	d13c      	bne.n	800e5b0 <__gethex+0x3e4>
 800e536:	f8d8 2000 	ldr.w	r2, [r8]
 800e53a:	3a01      	subs	r2, #1
 800e53c:	42b2      	cmp	r2, r6
 800e53e:	d109      	bne.n	800e554 <__gethex+0x388>
 800e540:	1171      	asrs	r1, r6, #5
 800e542:	2201      	movs	r2, #1
 800e544:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e548:	f006 061f 	and.w	r6, r6, #31
 800e54c:	fa02 f606 	lsl.w	r6, r2, r6
 800e550:	421e      	tst	r6, r3
 800e552:	d13a      	bne.n	800e5ca <__gethex+0x3fe>
 800e554:	f045 0520 	orr.w	r5, r5, #32
 800e558:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e55a:	601c      	str	r4, [r3, #0]
 800e55c:	9b02      	ldr	r3, [sp, #8]
 800e55e:	601f      	str	r7, [r3, #0]
 800e560:	e6b0      	b.n	800e2c4 <__gethex+0xf8>
 800e562:	4299      	cmp	r1, r3
 800e564:	f843 cc04 	str.w	ip, [r3, #-4]
 800e568:	d8d9      	bhi.n	800e51e <__gethex+0x352>
 800e56a:	68a3      	ldr	r3, [r4, #8]
 800e56c:	459b      	cmp	fp, r3
 800e56e:	db17      	blt.n	800e5a0 <__gethex+0x3d4>
 800e570:	6861      	ldr	r1, [r4, #4]
 800e572:	9801      	ldr	r0, [sp, #4]
 800e574:	3101      	adds	r1, #1
 800e576:	f7fe f80f 	bl	800c598 <_Balloc>
 800e57a:	4681      	mov	r9, r0
 800e57c:	b918      	cbnz	r0, 800e586 <__gethex+0x3ba>
 800e57e:	4b1a      	ldr	r3, [pc, #104]	@ (800e5e8 <__gethex+0x41c>)
 800e580:	4602      	mov	r2, r0
 800e582:	2184      	movs	r1, #132	@ 0x84
 800e584:	e6c5      	b.n	800e312 <__gethex+0x146>
 800e586:	6922      	ldr	r2, [r4, #16]
 800e588:	3202      	adds	r2, #2
 800e58a:	f104 010c 	add.w	r1, r4, #12
 800e58e:	0092      	lsls	r2, r2, #2
 800e590:	300c      	adds	r0, #12
 800e592:	f7fd f8a0 	bl	800b6d6 <memcpy>
 800e596:	4621      	mov	r1, r4
 800e598:	9801      	ldr	r0, [sp, #4]
 800e59a:	f7fe f83d 	bl	800c618 <_Bfree>
 800e59e:	464c      	mov	r4, r9
 800e5a0:	6923      	ldr	r3, [r4, #16]
 800e5a2:	1c5a      	adds	r2, r3, #1
 800e5a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e5a8:	6122      	str	r2, [r4, #16]
 800e5aa:	2201      	movs	r2, #1
 800e5ac:	615a      	str	r2, [r3, #20]
 800e5ae:	e7be      	b.n	800e52e <__gethex+0x362>
 800e5b0:	6922      	ldr	r2, [r4, #16]
 800e5b2:	455a      	cmp	r2, fp
 800e5b4:	dd0b      	ble.n	800e5ce <__gethex+0x402>
 800e5b6:	2101      	movs	r1, #1
 800e5b8:	4620      	mov	r0, r4
 800e5ba:	f7ff fd9f 	bl	800e0fc <rshift>
 800e5be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e5c2:	3701      	adds	r7, #1
 800e5c4:	42bb      	cmp	r3, r7
 800e5c6:	f6ff aee0 	blt.w	800e38a <__gethex+0x1be>
 800e5ca:	2501      	movs	r5, #1
 800e5cc:	e7c2      	b.n	800e554 <__gethex+0x388>
 800e5ce:	f016 061f 	ands.w	r6, r6, #31
 800e5d2:	d0fa      	beq.n	800e5ca <__gethex+0x3fe>
 800e5d4:	4453      	add	r3, sl
 800e5d6:	f1c6 0620 	rsb	r6, r6, #32
 800e5da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e5de:	f7fe f8cd 	bl	800c77c <__hi0bits>
 800e5e2:	42b0      	cmp	r0, r6
 800e5e4:	dbe7      	blt.n	800e5b6 <__gethex+0x3ea>
 800e5e6:	e7f0      	b.n	800e5ca <__gethex+0x3fe>
 800e5e8:	0800f0c1 	.word	0x0800f0c1

0800e5ec <L_shift>:
 800e5ec:	f1c2 0208 	rsb	r2, r2, #8
 800e5f0:	0092      	lsls	r2, r2, #2
 800e5f2:	b570      	push	{r4, r5, r6, lr}
 800e5f4:	f1c2 0620 	rsb	r6, r2, #32
 800e5f8:	6843      	ldr	r3, [r0, #4]
 800e5fa:	6804      	ldr	r4, [r0, #0]
 800e5fc:	fa03 f506 	lsl.w	r5, r3, r6
 800e600:	432c      	orrs	r4, r5
 800e602:	40d3      	lsrs	r3, r2
 800e604:	6004      	str	r4, [r0, #0]
 800e606:	f840 3f04 	str.w	r3, [r0, #4]!
 800e60a:	4288      	cmp	r0, r1
 800e60c:	d3f4      	bcc.n	800e5f8 <L_shift+0xc>
 800e60e:	bd70      	pop	{r4, r5, r6, pc}

0800e610 <__match>:
 800e610:	b530      	push	{r4, r5, lr}
 800e612:	6803      	ldr	r3, [r0, #0]
 800e614:	3301      	adds	r3, #1
 800e616:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e61a:	b914      	cbnz	r4, 800e622 <__match+0x12>
 800e61c:	6003      	str	r3, [r0, #0]
 800e61e:	2001      	movs	r0, #1
 800e620:	bd30      	pop	{r4, r5, pc}
 800e622:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e626:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e62a:	2d19      	cmp	r5, #25
 800e62c:	bf98      	it	ls
 800e62e:	3220      	addls	r2, #32
 800e630:	42a2      	cmp	r2, r4
 800e632:	d0f0      	beq.n	800e616 <__match+0x6>
 800e634:	2000      	movs	r0, #0
 800e636:	e7f3      	b.n	800e620 <__match+0x10>

0800e638 <__hexnan>:
 800e638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e63c:	680b      	ldr	r3, [r1, #0]
 800e63e:	6801      	ldr	r1, [r0, #0]
 800e640:	115e      	asrs	r6, r3, #5
 800e642:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e646:	f013 031f 	ands.w	r3, r3, #31
 800e64a:	b087      	sub	sp, #28
 800e64c:	bf18      	it	ne
 800e64e:	3604      	addne	r6, #4
 800e650:	2500      	movs	r5, #0
 800e652:	1f37      	subs	r7, r6, #4
 800e654:	4682      	mov	sl, r0
 800e656:	4690      	mov	r8, r2
 800e658:	9301      	str	r3, [sp, #4]
 800e65a:	f846 5c04 	str.w	r5, [r6, #-4]
 800e65e:	46b9      	mov	r9, r7
 800e660:	463c      	mov	r4, r7
 800e662:	9502      	str	r5, [sp, #8]
 800e664:	46ab      	mov	fp, r5
 800e666:	784a      	ldrb	r2, [r1, #1]
 800e668:	1c4b      	adds	r3, r1, #1
 800e66a:	9303      	str	r3, [sp, #12]
 800e66c:	b342      	cbz	r2, 800e6c0 <__hexnan+0x88>
 800e66e:	4610      	mov	r0, r2
 800e670:	9105      	str	r1, [sp, #20]
 800e672:	9204      	str	r2, [sp, #16]
 800e674:	f7ff fd94 	bl	800e1a0 <__hexdig_fun>
 800e678:	2800      	cmp	r0, #0
 800e67a:	d151      	bne.n	800e720 <__hexnan+0xe8>
 800e67c:	9a04      	ldr	r2, [sp, #16]
 800e67e:	9905      	ldr	r1, [sp, #20]
 800e680:	2a20      	cmp	r2, #32
 800e682:	d818      	bhi.n	800e6b6 <__hexnan+0x7e>
 800e684:	9b02      	ldr	r3, [sp, #8]
 800e686:	459b      	cmp	fp, r3
 800e688:	dd13      	ble.n	800e6b2 <__hexnan+0x7a>
 800e68a:	454c      	cmp	r4, r9
 800e68c:	d206      	bcs.n	800e69c <__hexnan+0x64>
 800e68e:	2d07      	cmp	r5, #7
 800e690:	dc04      	bgt.n	800e69c <__hexnan+0x64>
 800e692:	462a      	mov	r2, r5
 800e694:	4649      	mov	r1, r9
 800e696:	4620      	mov	r0, r4
 800e698:	f7ff ffa8 	bl	800e5ec <L_shift>
 800e69c:	4544      	cmp	r4, r8
 800e69e:	d952      	bls.n	800e746 <__hexnan+0x10e>
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	f1a4 0904 	sub.w	r9, r4, #4
 800e6a6:	f844 3c04 	str.w	r3, [r4, #-4]
 800e6aa:	f8cd b008 	str.w	fp, [sp, #8]
 800e6ae:	464c      	mov	r4, r9
 800e6b0:	461d      	mov	r5, r3
 800e6b2:	9903      	ldr	r1, [sp, #12]
 800e6b4:	e7d7      	b.n	800e666 <__hexnan+0x2e>
 800e6b6:	2a29      	cmp	r2, #41	@ 0x29
 800e6b8:	d157      	bne.n	800e76a <__hexnan+0x132>
 800e6ba:	3102      	adds	r1, #2
 800e6bc:	f8ca 1000 	str.w	r1, [sl]
 800e6c0:	f1bb 0f00 	cmp.w	fp, #0
 800e6c4:	d051      	beq.n	800e76a <__hexnan+0x132>
 800e6c6:	454c      	cmp	r4, r9
 800e6c8:	d206      	bcs.n	800e6d8 <__hexnan+0xa0>
 800e6ca:	2d07      	cmp	r5, #7
 800e6cc:	dc04      	bgt.n	800e6d8 <__hexnan+0xa0>
 800e6ce:	462a      	mov	r2, r5
 800e6d0:	4649      	mov	r1, r9
 800e6d2:	4620      	mov	r0, r4
 800e6d4:	f7ff ff8a 	bl	800e5ec <L_shift>
 800e6d8:	4544      	cmp	r4, r8
 800e6da:	d936      	bls.n	800e74a <__hexnan+0x112>
 800e6dc:	f1a8 0204 	sub.w	r2, r8, #4
 800e6e0:	4623      	mov	r3, r4
 800e6e2:	f853 1b04 	ldr.w	r1, [r3], #4
 800e6e6:	f842 1f04 	str.w	r1, [r2, #4]!
 800e6ea:	429f      	cmp	r7, r3
 800e6ec:	d2f9      	bcs.n	800e6e2 <__hexnan+0xaa>
 800e6ee:	1b3b      	subs	r3, r7, r4
 800e6f0:	f023 0303 	bic.w	r3, r3, #3
 800e6f4:	3304      	adds	r3, #4
 800e6f6:	3401      	adds	r4, #1
 800e6f8:	3e03      	subs	r6, #3
 800e6fa:	42b4      	cmp	r4, r6
 800e6fc:	bf88      	it	hi
 800e6fe:	2304      	movhi	r3, #4
 800e700:	4443      	add	r3, r8
 800e702:	2200      	movs	r2, #0
 800e704:	f843 2b04 	str.w	r2, [r3], #4
 800e708:	429f      	cmp	r7, r3
 800e70a:	d2fb      	bcs.n	800e704 <__hexnan+0xcc>
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	b91b      	cbnz	r3, 800e718 <__hexnan+0xe0>
 800e710:	4547      	cmp	r7, r8
 800e712:	d128      	bne.n	800e766 <__hexnan+0x12e>
 800e714:	2301      	movs	r3, #1
 800e716:	603b      	str	r3, [r7, #0]
 800e718:	2005      	movs	r0, #5
 800e71a:	b007      	add	sp, #28
 800e71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e720:	3501      	adds	r5, #1
 800e722:	2d08      	cmp	r5, #8
 800e724:	f10b 0b01 	add.w	fp, fp, #1
 800e728:	dd06      	ble.n	800e738 <__hexnan+0x100>
 800e72a:	4544      	cmp	r4, r8
 800e72c:	d9c1      	bls.n	800e6b2 <__hexnan+0x7a>
 800e72e:	2300      	movs	r3, #0
 800e730:	f844 3c04 	str.w	r3, [r4, #-4]
 800e734:	2501      	movs	r5, #1
 800e736:	3c04      	subs	r4, #4
 800e738:	6822      	ldr	r2, [r4, #0]
 800e73a:	f000 000f 	and.w	r0, r0, #15
 800e73e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e742:	6020      	str	r0, [r4, #0]
 800e744:	e7b5      	b.n	800e6b2 <__hexnan+0x7a>
 800e746:	2508      	movs	r5, #8
 800e748:	e7b3      	b.n	800e6b2 <__hexnan+0x7a>
 800e74a:	9b01      	ldr	r3, [sp, #4]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d0dd      	beq.n	800e70c <__hexnan+0xd4>
 800e750:	f1c3 0320 	rsb	r3, r3, #32
 800e754:	f04f 32ff 	mov.w	r2, #4294967295
 800e758:	40da      	lsrs	r2, r3
 800e75a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e75e:	4013      	ands	r3, r2
 800e760:	f846 3c04 	str.w	r3, [r6, #-4]
 800e764:	e7d2      	b.n	800e70c <__hexnan+0xd4>
 800e766:	3f04      	subs	r7, #4
 800e768:	e7d0      	b.n	800e70c <__hexnan+0xd4>
 800e76a:	2004      	movs	r0, #4
 800e76c:	e7d5      	b.n	800e71a <__hexnan+0xe2>

0800e76e <__ascii_mbtowc>:
 800e76e:	b082      	sub	sp, #8
 800e770:	b901      	cbnz	r1, 800e774 <__ascii_mbtowc+0x6>
 800e772:	a901      	add	r1, sp, #4
 800e774:	b142      	cbz	r2, 800e788 <__ascii_mbtowc+0x1a>
 800e776:	b14b      	cbz	r3, 800e78c <__ascii_mbtowc+0x1e>
 800e778:	7813      	ldrb	r3, [r2, #0]
 800e77a:	600b      	str	r3, [r1, #0]
 800e77c:	7812      	ldrb	r2, [r2, #0]
 800e77e:	1e10      	subs	r0, r2, #0
 800e780:	bf18      	it	ne
 800e782:	2001      	movne	r0, #1
 800e784:	b002      	add	sp, #8
 800e786:	4770      	bx	lr
 800e788:	4610      	mov	r0, r2
 800e78a:	e7fb      	b.n	800e784 <__ascii_mbtowc+0x16>
 800e78c:	f06f 0001 	mvn.w	r0, #1
 800e790:	e7f8      	b.n	800e784 <__ascii_mbtowc+0x16>

0800e792 <_realloc_r>:
 800e792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e796:	4680      	mov	r8, r0
 800e798:	4615      	mov	r5, r2
 800e79a:	460c      	mov	r4, r1
 800e79c:	b921      	cbnz	r1, 800e7a8 <_realloc_r+0x16>
 800e79e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7a2:	4611      	mov	r1, r2
 800e7a4:	f7fd be6c 	b.w	800c480 <_malloc_r>
 800e7a8:	b92a      	cbnz	r2, 800e7b6 <_realloc_r+0x24>
 800e7aa:	f7fd fdf5 	bl	800c398 <_free_r>
 800e7ae:	2400      	movs	r4, #0
 800e7b0:	4620      	mov	r0, r4
 800e7b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7b6:	f000 f840 	bl	800e83a <_malloc_usable_size_r>
 800e7ba:	4285      	cmp	r5, r0
 800e7bc:	4606      	mov	r6, r0
 800e7be:	d802      	bhi.n	800e7c6 <_realloc_r+0x34>
 800e7c0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e7c4:	d8f4      	bhi.n	800e7b0 <_realloc_r+0x1e>
 800e7c6:	4629      	mov	r1, r5
 800e7c8:	4640      	mov	r0, r8
 800e7ca:	f7fd fe59 	bl	800c480 <_malloc_r>
 800e7ce:	4607      	mov	r7, r0
 800e7d0:	2800      	cmp	r0, #0
 800e7d2:	d0ec      	beq.n	800e7ae <_realloc_r+0x1c>
 800e7d4:	42b5      	cmp	r5, r6
 800e7d6:	462a      	mov	r2, r5
 800e7d8:	4621      	mov	r1, r4
 800e7da:	bf28      	it	cs
 800e7dc:	4632      	movcs	r2, r6
 800e7de:	f7fc ff7a 	bl	800b6d6 <memcpy>
 800e7e2:	4621      	mov	r1, r4
 800e7e4:	4640      	mov	r0, r8
 800e7e6:	f7fd fdd7 	bl	800c398 <_free_r>
 800e7ea:	463c      	mov	r4, r7
 800e7ec:	e7e0      	b.n	800e7b0 <_realloc_r+0x1e>

0800e7ee <__ascii_wctomb>:
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	4608      	mov	r0, r1
 800e7f2:	b141      	cbz	r1, 800e806 <__ascii_wctomb+0x18>
 800e7f4:	2aff      	cmp	r2, #255	@ 0xff
 800e7f6:	d904      	bls.n	800e802 <__ascii_wctomb+0x14>
 800e7f8:	228a      	movs	r2, #138	@ 0x8a
 800e7fa:	601a      	str	r2, [r3, #0]
 800e7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e800:	4770      	bx	lr
 800e802:	700a      	strb	r2, [r1, #0]
 800e804:	2001      	movs	r0, #1
 800e806:	4770      	bx	lr

0800e808 <fiprintf>:
 800e808:	b40e      	push	{r1, r2, r3}
 800e80a:	b503      	push	{r0, r1, lr}
 800e80c:	4601      	mov	r1, r0
 800e80e:	ab03      	add	r3, sp, #12
 800e810:	4805      	ldr	r0, [pc, #20]	@ (800e828 <fiprintf+0x20>)
 800e812:	f853 2b04 	ldr.w	r2, [r3], #4
 800e816:	6800      	ldr	r0, [r0, #0]
 800e818:	9301      	str	r3, [sp, #4]
 800e81a:	f000 f83f 	bl	800e89c <_vfiprintf_r>
 800e81e:	b002      	add	sp, #8
 800e820:	f85d eb04 	ldr.w	lr, [sp], #4
 800e824:	b003      	add	sp, #12
 800e826:	4770      	bx	lr
 800e828:	20000030 	.word	0x20000030

0800e82c <abort>:
 800e82c:	b508      	push	{r3, lr}
 800e82e:	2006      	movs	r0, #6
 800e830:	f000 fa08 	bl	800ec44 <raise>
 800e834:	2001      	movs	r0, #1
 800e836:	f7f4 fc23 	bl	8003080 <_exit>

0800e83a <_malloc_usable_size_r>:
 800e83a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e83e:	1f18      	subs	r0, r3, #4
 800e840:	2b00      	cmp	r3, #0
 800e842:	bfbc      	itt	lt
 800e844:	580b      	ldrlt	r3, [r1, r0]
 800e846:	18c0      	addlt	r0, r0, r3
 800e848:	4770      	bx	lr

0800e84a <__sfputc_r>:
 800e84a:	6893      	ldr	r3, [r2, #8]
 800e84c:	3b01      	subs	r3, #1
 800e84e:	2b00      	cmp	r3, #0
 800e850:	b410      	push	{r4}
 800e852:	6093      	str	r3, [r2, #8]
 800e854:	da08      	bge.n	800e868 <__sfputc_r+0x1e>
 800e856:	6994      	ldr	r4, [r2, #24]
 800e858:	42a3      	cmp	r3, r4
 800e85a:	db01      	blt.n	800e860 <__sfputc_r+0x16>
 800e85c:	290a      	cmp	r1, #10
 800e85e:	d103      	bne.n	800e868 <__sfputc_r+0x1e>
 800e860:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e864:	f000 b932 	b.w	800eacc <__swbuf_r>
 800e868:	6813      	ldr	r3, [r2, #0]
 800e86a:	1c58      	adds	r0, r3, #1
 800e86c:	6010      	str	r0, [r2, #0]
 800e86e:	7019      	strb	r1, [r3, #0]
 800e870:	4608      	mov	r0, r1
 800e872:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e876:	4770      	bx	lr

0800e878 <__sfputs_r>:
 800e878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e87a:	4606      	mov	r6, r0
 800e87c:	460f      	mov	r7, r1
 800e87e:	4614      	mov	r4, r2
 800e880:	18d5      	adds	r5, r2, r3
 800e882:	42ac      	cmp	r4, r5
 800e884:	d101      	bne.n	800e88a <__sfputs_r+0x12>
 800e886:	2000      	movs	r0, #0
 800e888:	e007      	b.n	800e89a <__sfputs_r+0x22>
 800e88a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e88e:	463a      	mov	r2, r7
 800e890:	4630      	mov	r0, r6
 800e892:	f7ff ffda 	bl	800e84a <__sfputc_r>
 800e896:	1c43      	adds	r3, r0, #1
 800e898:	d1f3      	bne.n	800e882 <__sfputs_r+0xa>
 800e89a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e89c <_vfiprintf_r>:
 800e89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8a0:	460d      	mov	r5, r1
 800e8a2:	b09d      	sub	sp, #116	@ 0x74
 800e8a4:	4614      	mov	r4, r2
 800e8a6:	4698      	mov	r8, r3
 800e8a8:	4606      	mov	r6, r0
 800e8aa:	b118      	cbz	r0, 800e8b4 <_vfiprintf_r+0x18>
 800e8ac:	6a03      	ldr	r3, [r0, #32]
 800e8ae:	b90b      	cbnz	r3, 800e8b4 <_vfiprintf_r+0x18>
 800e8b0:	f7fc fda2 	bl	800b3f8 <__sinit>
 800e8b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e8b6:	07d9      	lsls	r1, r3, #31
 800e8b8:	d405      	bmi.n	800e8c6 <_vfiprintf_r+0x2a>
 800e8ba:	89ab      	ldrh	r3, [r5, #12]
 800e8bc:	059a      	lsls	r2, r3, #22
 800e8be:	d402      	bmi.n	800e8c6 <_vfiprintf_r+0x2a>
 800e8c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e8c2:	f7fc ff06 	bl	800b6d2 <__retarget_lock_acquire_recursive>
 800e8c6:	89ab      	ldrh	r3, [r5, #12]
 800e8c8:	071b      	lsls	r3, r3, #28
 800e8ca:	d501      	bpl.n	800e8d0 <_vfiprintf_r+0x34>
 800e8cc:	692b      	ldr	r3, [r5, #16]
 800e8ce:	b99b      	cbnz	r3, 800e8f8 <_vfiprintf_r+0x5c>
 800e8d0:	4629      	mov	r1, r5
 800e8d2:	4630      	mov	r0, r6
 800e8d4:	f000 f938 	bl	800eb48 <__swsetup_r>
 800e8d8:	b170      	cbz	r0, 800e8f8 <_vfiprintf_r+0x5c>
 800e8da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e8dc:	07dc      	lsls	r4, r3, #31
 800e8de:	d504      	bpl.n	800e8ea <_vfiprintf_r+0x4e>
 800e8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e8e4:	b01d      	add	sp, #116	@ 0x74
 800e8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8ea:	89ab      	ldrh	r3, [r5, #12]
 800e8ec:	0598      	lsls	r0, r3, #22
 800e8ee:	d4f7      	bmi.n	800e8e0 <_vfiprintf_r+0x44>
 800e8f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e8f2:	f7fc feef 	bl	800b6d4 <__retarget_lock_release_recursive>
 800e8f6:	e7f3      	b.n	800e8e0 <_vfiprintf_r+0x44>
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8fc:	2320      	movs	r3, #32
 800e8fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e902:	f8cd 800c 	str.w	r8, [sp, #12]
 800e906:	2330      	movs	r3, #48	@ 0x30
 800e908:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800eab8 <_vfiprintf_r+0x21c>
 800e90c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e910:	f04f 0901 	mov.w	r9, #1
 800e914:	4623      	mov	r3, r4
 800e916:	469a      	mov	sl, r3
 800e918:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e91c:	b10a      	cbz	r2, 800e922 <_vfiprintf_r+0x86>
 800e91e:	2a25      	cmp	r2, #37	@ 0x25
 800e920:	d1f9      	bne.n	800e916 <_vfiprintf_r+0x7a>
 800e922:	ebba 0b04 	subs.w	fp, sl, r4
 800e926:	d00b      	beq.n	800e940 <_vfiprintf_r+0xa4>
 800e928:	465b      	mov	r3, fp
 800e92a:	4622      	mov	r2, r4
 800e92c:	4629      	mov	r1, r5
 800e92e:	4630      	mov	r0, r6
 800e930:	f7ff ffa2 	bl	800e878 <__sfputs_r>
 800e934:	3001      	adds	r0, #1
 800e936:	f000 80a7 	beq.w	800ea88 <_vfiprintf_r+0x1ec>
 800e93a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e93c:	445a      	add	r2, fp
 800e93e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e940:	f89a 3000 	ldrb.w	r3, [sl]
 800e944:	2b00      	cmp	r3, #0
 800e946:	f000 809f 	beq.w	800ea88 <_vfiprintf_r+0x1ec>
 800e94a:	2300      	movs	r3, #0
 800e94c:	f04f 32ff 	mov.w	r2, #4294967295
 800e950:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e954:	f10a 0a01 	add.w	sl, sl, #1
 800e958:	9304      	str	r3, [sp, #16]
 800e95a:	9307      	str	r3, [sp, #28]
 800e95c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e960:	931a      	str	r3, [sp, #104]	@ 0x68
 800e962:	4654      	mov	r4, sl
 800e964:	2205      	movs	r2, #5
 800e966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e96a:	4853      	ldr	r0, [pc, #332]	@ (800eab8 <_vfiprintf_r+0x21c>)
 800e96c:	f7f1 fc38 	bl	80001e0 <memchr>
 800e970:	9a04      	ldr	r2, [sp, #16]
 800e972:	b9d8      	cbnz	r0, 800e9ac <_vfiprintf_r+0x110>
 800e974:	06d1      	lsls	r1, r2, #27
 800e976:	bf44      	itt	mi
 800e978:	2320      	movmi	r3, #32
 800e97a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e97e:	0713      	lsls	r3, r2, #28
 800e980:	bf44      	itt	mi
 800e982:	232b      	movmi	r3, #43	@ 0x2b
 800e984:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e988:	f89a 3000 	ldrb.w	r3, [sl]
 800e98c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e98e:	d015      	beq.n	800e9bc <_vfiprintf_r+0x120>
 800e990:	9a07      	ldr	r2, [sp, #28]
 800e992:	4654      	mov	r4, sl
 800e994:	2000      	movs	r0, #0
 800e996:	f04f 0c0a 	mov.w	ip, #10
 800e99a:	4621      	mov	r1, r4
 800e99c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9a0:	3b30      	subs	r3, #48	@ 0x30
 800e9a2:	2b09      	cmp	r3, #9
 800e9a4:	d94b      	bls.n	800ea3e <_vfiprintf_r+0x1a2>
 800e9a6:	b1b0      	cbz	r0, 800e9d6 <_vfiprintf_r+0x13a>
 800e9a8:	9207      	str	r2, [sp, #28]
 800e9aa:	e014      	b.n	800e9d6 <_vfiprintf_r+0x13a>
 800e9ac:	eba0 0308 	sub.w	r3, r0, r8
 800e9b0:	fa09 f303 	lsl.w	r3, r9, r3
 800e9b4:	4313      	orrs	r3, r2
 800e9b6:	9304      	str	r3, [sp, #16]
 800e9b8:	46a2      	mov	sl, r4
 800e9ba:	e7d2      	b.n	800e962 <_vfiprintf_r+0xc6>
 800e9bc:	9b03      	ldr	r3, [sp, #12]
 800e9be:	1d19      	adds	r1, r3, #4
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	9103      	str	r1, [sp, #12]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	bfbb      	ittet	lt
 800e9c8:	425b      	neglt	r3, r3
 800e9ca:	f042 0202 	orrlt.w	r2, r2, #2
 800e9ce:	9307      	strge	r3, [sp, #28]
 800e9d0:	9307      	strlt	r3, [sp, #28]
 800e9d2:	bfb8      	it	lt
 800e9d4:	9204      	strlt	r2, [sp, #16]
 800e9d6:	7823      	ldrb	r3, [r4, #0]
 800e9d8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e9da:	d10a      	bne.n	800e9f2 <_vfiprintf_r+0x156>
 800e9dc:	7863      	ldrb	r3, [r4, #1]
 800e9de:	2b2a      	cmp	r3, #42	@ 0x2a
 800e9e0:	d132      	bne.n	800ea48 <_vfiprintf_r+0x1ac>
 800e9e2:	9b03      	ldr	r3, [sp, #12]
 800e9e4:	1d1a      	adds	r2, r3, #4
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	9203      	str	r2, [sp, #12]
 800e9ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e9ee:	3402      	adds	r4, #2
 800e9f0:	9305      	str	r3, [sp, #20]
 800e9f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800eac8 <_vfiprintf_r+0x22c>
 800e9f6:	7821      	ldrb	r1, [r4, #0]
 800e9f8:	2203      	movs	r2, #3
 800e9fa:	4650      	mov	r0, sl
 800e9fc:	f7f1 fbf0 	bl	80001e0 <memchr>
 800ea00:	b138      	cbz	r0, 800ea12 <_vfiprintf_r+0x176>
 800ea02:	9b04      	ldr	r3, [sp, #16]
 800ea04:	eba0 000a 	sub.w	r0, r0, sl
 800ea08:	2240      	movs	r2, #64	@ 0x40
 800ea0a:	4082      	lsls	r2, r0
 800ea0c:	4313      	orrs	r3, r2
 800ea0e:	3401      	adds	r4, #1
 800ea10:	9304      	str	r3, [sp, #16]
 800ea12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea16:	4829      	ldr	r0, [pc, #164]	@ (800eabc <_vfiprintf_r+0x220>)
 800ea18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ea1c:	2206      	movs	r2, #6
 800ea1e:	f7f1 fbdf 	bl	80001e0 <memchr>
 800ea22:	2800      	cmp	r0, #0
 800ea24:	d03f      	beq.n	800eaa6 <_vfiprintf_r+0x20a>
 800ea26:	4b26      	ldr	r3, [pc, #152]	@ (800eac0 <_vfiprintf_r+0x224>)
 800ea28:	bb1b      	cbnz	r3, 800ea72 <_vfiprintf_r+0x1d6>
 800ea2a:	9b03      	ldr	r3, [sp, #12]
 800ea2c:	3307      	adds	r3, #7
 800ea2e:	f023 0307 	bic.w	r3, r3, #7
 800ea32:	3308      	adds	r3, #8
 800ea34:	9303      	str	r3, [sp, #12]
 800ea36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea38:	443b      	add	r3, r7
 800ea3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea3c:	e76a      	b.n	800e914 <_vfiprintf_r+0x78>
 800ea3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea42:	460c      	mov	r4, r1
 800ea44:	2001      	movs	r0, #1
 800ea46:	e7a8      	b.n	800e99a <_vfiprintf_r+0xfe>
 800ea48:	2300      	movs	r3, #0
 800ea4a:	3401      	adds	r4, #1
 800ea4c:	9305      	str	r3, [sp, #20]
 800ea4e:	4619      	mov	r1, r3
 800ea50:	f04f 0c0a 	mov.w	ip, #10
 800ea54:	4620      	mov	r0, r4
 800ea56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea5a:	3a30      	subs	r2, #48	@ 0x30
 800ea5c:	2a09      	cmp	r2, #9
 800ea5e:	d903      	bls.n	800ea68 <_vfiprintf_r+0x1cc>
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d0c6      	beq.n	800e9f2 <_vfiprintf_r+0x156>
 800ea64:	9105      	str	r1, [sp, #20]
 800ea66:	e7c4      	b.n	800e9f2 <_vfiprintf_r+0x156>
 800ea68:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea6c:	4604      	mov	r4, r0
 800ea6e:	2301      	movs	r3, #1
 800ea70:	e7f0      	b.n	800ea54 <_vfiprintf_r+0x1b8>
 800ea72:	ab03      	add	r3, sp, #12
 800ea74:	9300      	str	r3, [sp, #0]
 800ea76:	462a      	mov	r2, r5
 800ea78:	4b12      	ldr	r3, [pc, #72]	@ (800eac4 <_vfiprintf_r+0x228>)
 800ea7a:	a904      	add	r1, sp, #16
 800ea7c:	4630      	mov	r0, r6
 800ea7e:	f7fb fe63 	bl	800a748 <_printf_float>
 800ea82:	4607      	mov	r7, r0
 800ea84:	1c78      	adds	r0, r7, #1
 800ea86:	d1d6      	bne.n	800ea36 <_vfiprintf_r+0x19a>
 800ea88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ea8a:	07d9      	lsls	r1, r3, #31
 800ea8c:	d405      	bmi.n	800ea9a <_vfiprintf_r+0x1fe>
 800ea8e:	89ab      	ldrh	r3, [r5, #12]
 800ea90:	059a      	lsls	r2, r3, #22
 800ea92:	d402      	bmi.n	800ea9a <_vfiprintf_r+0x1fe>
 800ea94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea96:	f7fc fe1d 	bl	800b6d4 <__retarget_lock_release_recursive>
 800ea9a:	89ab      	ldrh	r3, [r5, #12]
 800ea9c:	065b      	lsls	r3, r3, #25
 800ea9e:	f53f af1f 	bmi.w	800e8e0 <_vfiprintf_r+0x44>
 800eaa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eaa4:	e71e      	b.n	800e8e4 <_vfiprintf_r+0x48>
 800eaa6:	ab03      	add	r3, sp, #12
 800eaa8:	9300      	str	r3, [sp, #0]
 800eaaa:	462a      	mov	r2, r5
 800eaac:	4b05      	ldr	r3, [pc, #20]	@ (800eac4 <_vfiprintf_r+0x228>)
 800eaae:	a904      	add	r1, sp, #16
 800eab0:	4630      	mov	r0, r6
 800eab2:	f7fc f8e1 	bl	800ac78 <_printf_i>
 800eab6:	e7e4      	b.n	800ea82 <_vfiprintf_r+0x1e6>
 800eab8:	0800f381 	.word	0x0800f381
 800eabc:	0800f38b 	.word	0x0800f38b
 800eac0:	0800a749 	.word	0x0800a749
 800eac4:	0800e879 	.word	0x0800e879
 800eac8:	0800f387 	.word	0x0800f387

0800eacc <__swbuf_r>:
 800eacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eace:	460e      	mov	r6, r1
 800ead0:	4614      	mov	r4, r2
 800ead2:	4605      	mov	r5, r0
 800ead4:	b118      	cbz	r0, 800eade <__swbuf_r+0x12>
 800ead6:	6a03      	ldr	r3, [r0, #32]
 800ead8:	b90b      	cbnz	r3, 800eade <__swbuf_r+0x12>
 800eada:	f7fc fc8d 	bl	800b3f8 <__sinit>
 800eade:	69a3      	ldr	r3, [r4, #24]
 800eae0:	60a3      	str	r3, [r4, #8]
 800eae2:	89a3      	ldrh	r3, [r4, #12]
 800eae4:	071a      	lsls	r2, r3, #28
 800eae6:	d501      	bpl.n	800eaec <__swbuf_r+0x20>
 800eae8:	6923      	ldr	r3, [r4, #16]
 800eaea:	b943      	cbnz	r3, 800eafe <__swbuf_r+0x32>
 800eaec:	4621      	mov	r1, r4
 800eaee:	4628      	mov	r0, r5
 800eaf0:	f000 f82a 	bl	800eb48 <__swsetup_r>
 800eaf4:	b118      	cbz	r0, 800eafe <__swbuf_r+0x32>
 800eaf6:	f04f 37ff 	mov.w	r7, #4294967295
 800eafa:	4638      	mov	r0, r7
 800eafc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eafe:	6823      	ldr	r3, [r4, #0]
 800eb00:	6922      	ldr	r2, [r4, #16]
 800eb02:	1a98      	subs	r0, r3, r2
 800eb04:	6963      	ldr	r3, [r4, #20]
 800eb06:	b2f6      	uxtb	r6, r6
 800eb08:	4283      	cmp	r3, r0
 800eb0a:	4637      	mov	r7, r6
 800eb0c:	dc05      	bgt.n	800eb1a <__swbuf_r+0x4e>
 800eb0e:	4621      	mov	r1, r4
 800eb10:	4628      	mov	r0, r5
 800eb12:	f7ff fa53 	bl	800dfbc <_fflush_r>
 800eb16:	2800      	cmp	r0, #0
 800eb18:	d1ed      	bne.n	800eaf6 <__swbuf_r+0x2a>
 800eb1a:	68a3      	ldr	r3, [r4, #8]
 800eb1c:	3b01      	subs	r3, #1
 800eb1e:	60a3      	str	r3, [r4, #8]
 800eb20:	6823      	ldr	r3, [r4, #0]
 800eb22:	1c5a      	adds	r2, r3, #1
 800eb24:	6022      	str	r2, [r4, #0]
 800eb26:	701e      	strb	r6, [r3, #0]
 800eb28:	6962      	ldr	r2, [r4, #20]
 800eb2a:	1c43      	adds	r3, r0, #1
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d004      	beq.n	800eb3a <__swbuf_r+0x6e>
 800eb30:	89a3      	ldrh	r3, [r4, #12]
 800eb32:	07db      	lsls	r3, r3, #31
 800eb34:	d5e1      	bpl.n	800eafa <__swbuf_r+0x2e>
 800eb36:	2e0a      	cmp	r6, #10
 800eb38:	d1df      	bne.n	800eafa <__swbuf_r+0x2e>
 800eb3a:	4621      	mov	r1, r4
 800eb3c:	4628      	mov	r0, r5
 800eb3e:	f7ff fa3d 	bl	800dfbc <_fflush_r>
 800eb42:	2800      	cmp	r0, #0
 800eb44:	d0d9      	beq.n	800eafa <__swbuf_r+0x2e>
 800eb46:	e7d6      	b.n	800eaf6 <__swbuf_r+0x2a>

0800eb48 <__swsetup_r>:
 800eb48:	b538      	push	{r3, r4, r5, lr}
 800eb4a:	4b29      	ldr	r3, [pc, #164]	@ (800ebf0 <__swsetup_r+0xa8>)
 800eb4c:	4605      	mov	r5, r0
 800eb4e:	6818      	ldr	r0, [r3, #0]
 800eb50:	460c      	mov	r4, r1
 800eb52:	b118      	cbz	r0, 800eb5c <__swsetup_r+0x14>
 800eb54:	6a03      	ldr	r3, [r0, #32]
 800eb56:	b90b      	cbnz	r3, 800eb5c <__swsetup_r+0x14>
 800eb58:	f7fc fc4e 	bl	800b3f8 <__sinit>
 800eb5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb60:	0719      	lsls	r1, r3, #28
 800eb62:	d422      	bmi.n	800ebaa <__swsetup_r+0x62>
 800eb64:	06da      	lsls	r2, r3, #27
 800eb66:	d407      	bmi.n	800eb78 <__swsetup_r+0x30>
 800eb68:	2209      	movs	r2, #9
 800eb6a:	602a      	str	r2, [r5, #0]
 800eb6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb70:	81a3      	strh	r3, [r4, #12]
 800eb72:	f04f 30ff 	mov.w	r0, #4294967295
 800eb76:	e033      	b.n	800ebe0 <__swsetup_r+0x98>
 800eb78:	0758      	lsls	r0, r3, #29
 800eb7a:	d512      	bpl.n	800eba2 <__swsetup_r+0x5a>
 800eb7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eb7e:	b141      	cbz	r1, 800eb92 <__swsetup_r+0x4a>
 800eb80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eb84:	4299      	cmp	r1, r3
 800eb86:	d002      	beq.n	800eb8e <__swsetup_r+0x46>
 800eb88:	4628      	mov	r0, r5
 800eb8a:	f7fd fc05 	bl	800c398 <_free_r>
 800eb8e:	2300      	movs	r3, #0
 800eb90:	6363      	str	r3, [r4, #52]	@ 0x34
 800eb92:	89a3      	ldrh	r3, [r4, #12]
 800eb94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800eb98:	81a3      	strh	r3, [r4, #12]
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	6063      	str	r3, [r4, #4]
 800eb9e:	6923      	ldr	r3, [r4, #16]
 800eba0:	6023      	str	r3, [r4, #0]
 800eba2:	89a3      	ldrh	r3, [r4, #12]
 800eba4:	f043 0308 	orr.w	r3, r3, #8
 800eba8:	81a3      	strh	r3, [r4, #12]
 800ebaa:	6923      	ldr	r3, [r4, #16]
 800ebac:	b94b      	cbnz	r3, 800ebc2 <__swsetup_r+0x7a>
 800ebae:	89a3      	ldrh	r3, [r4, #12]
 800ebb0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ebb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ebb8:	d003      	beq.n	800ebc2 <__swsetup_r+0x7a>
 800ebba:	4621      	mov	r1, r4
 800ebbc:	4628      	mov	r0, r5
 800ebbe:	f000 f883 	bl	800ecc8 <__smakebuf_r>
 800ebc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebc6:	f013 0201 	ands.w	r2, r3, #1
 800ebca:	d00a      	beq.n	800ebe2 <__swsetup_r+0x9a>
 800ebcc:	2200      	movs	r2, #0
 800ebce:	60a2      	str	r2, [r4, #8]
 800ebd0:	6962      	ldr	r2, [r4, #20]
 800ebd2:	4252      	negs	r2, r2
 800ebd4:	61a2      	str	r2, [r4, #24]
 800ebd6:	6922      	ldr	r2, [r4, #16]
 800ebd8:	b942      	cbnz	r2, 800ebec <__swsetup_r+0xa4>
 800ebda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ebde:	d1c5      	bne.n	800eb6c <__swsetup_r+0x24>
 800ebe0:	bd38      	pop	{r3, r4, r5, pc}
 800ebe2:	0799      	lsls	r1, r3, #30
 800ebe4:	bf58      	it	pl
 800ebe6:	6962      	ldrpl	r2, [r4, #20]
 800ebe8:	60a2      	str	r2, [r4, #8]
 800ebea:	e7f4      	b.n	800ebd6 <__swsetup_r+0x8e>
 800ebec:	2000      	movs	r0, #0
 800ebee:	e7f7      	b.n	800ebe0 <__swsetup_r+0x98>
 800ebf0:	20000030 	.word	0x20000030

0800ebf4 <_raise_r>:
 800ebf4:	291f      	cmp	r1, #31
 800ebf6:	b538      	push	{r3, r4, r5, lr}
 800ebf8:	4605      	mov	r5, r0
 800ebfa:	460c      	mov	r4, r1
 800ebfc:	d904      	bls.n	800ec08 <_raise_r+0x14>
 800ebfe:	2316      	movs	r3, #22
 800ec00:	6003      	str	r3, [r0, #0]
 800ec02:	f04f 30ff 	mov.w	r0, #4294967295
 800ec06:	bd38      	pop	{r3, r4, r5, pc}
 800ec08:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ec0a:	b112      	cbz	r2, 800ec12 <_raise_r+0x1e>
 800ec0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ec10:	b94b      	cbnz	r3, 800ec26 <_raise_r+0x32>
 800ec12:	4628      	mov	r0, r5
 800ec14:	f000 f830 	bl	800ec78 <_getpid_r>
 800ec18:	4622      	mov	r2, r4
 800ec1a:	4601      	mov	r1, r0
 800ec1c:	4628      	mov	r0, r5
 800ec1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec22:	f000 b817 	b.w	800ec54 <_kill_r>
 800ec26:	2b01      	cmp	r3, #1
 800ec28:	d00a      	beq.n	800ec40 <_raise_r+0x4c>
 800ec2a:	1c59      	adds	r1, r3, #1
 800ec2c:	d103      	bne.n	800ec36 <_raise_r+0x42>
 800ec2e:	2316      	movs	r3, #22
 800ec30:	6003      	str	r3, [r0, #0]
 800ec32:	2001      	movs	r0, #1
 800ec34:	e7e7      	b.n	800ec06 <_raise_r+0x12>
 800ec36:	2100      	movs	r1, #0
 800ec38:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ec3c:	4620      	mov	r0, r4
 800ec3e:	4798      	blx	r3
 800ec40:	2000      	movs	r0, #0
 800ec42:	e7e0      	b.n	800ec06 <_raise_r+0x12>

0800ec44 <raise>:
 800ec44:	4b02      	ldr	r3, [pc, #8]	@ (800ec50 <raise+0xc>)
 800ec46:	4601      	mov	r1, r0
 800ec48:	6818      	ldr	r0, [r3, #0]
 800ec4a:	f7ff bfd3 	b.w	800ebf4 <_raise_r>
 800ec4e:	bf00      	nop
 800ec50:	20000030 	.word	0x20000030

0800ec54 <_kill_r>:
 800ec54:	b538      	push	{r3, r4, r5, lr}
 800ec56:	4d07      	ldr	r5, [pc, #28]	@ (800ec74 <_kill_r+0x20>)
 800ec58:	2300      	movs	r3, #0
 800ec5a:	4604      	mov	r4, r0
 800ec5c:	4608      	mov	r0, r1
 800ec5e:	4611      	mov	r1, r2
 800ec60:	602b      	str	r3, [r5, #0]
 800ec62:	f7f4 f9fd 	bl	8003060 <_kill>
 800ec66:	1c43      	adds	r3, r0, #1
 800ec68:	d102      	bne.n	800ec70 <_kill_r+0x1c>
 800ec6a:	682b      	ldr	r3, [r5, #0]
 800ec6c:	b103      	cbz	r3, 800ec70 <_kill_r+0x1c>
 800ec6e:	6023      	str	r3, [r4, #0]
 800ec70:	bd38      	pop	{r3, r4, r5, pc}
 800ec72:	bf00      	nop
 800ec74:	20004b4c 	.word	0x20004b4c

0800ec78 <_getpid_r>:
 800ec78:	f7f4 b9ea 	b.w	8003050 <_getpid>

0800ec7c <__swhatbuf_r>:
 800ec7c:	b570      	push	{r4, r5, r6, lr}
 800ec7e:	460c      	mov	r4, r1
 800ec80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec84:	2900      	cmp	r1, #0
 800ec86:	b096      	sub	sp, #88	@ 0x58
 800ec88:	4615      	mov	r5, r2
 800ec8a:	461e      	mov	r6, r3
 800ec8c:	da0d      	bge.n	800ecaa <__swhatbuf_r+0x2e>
 800ec8e:	89a3      	ldrh	r3, [r4, #12]
 800ec90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ec94:	f04f 0100 	mov.w	r1, #0
 800ec98:	bf14      	ite	ne
 800ec9a:	2340      	movne	r3, #64	@ 0x40
 800ec9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800eca0:	2000      	movs	r0, #0
 800eca2:	6031      	str	r1, [r6, #0]
 800eca4:	602b      	str	r3, [r5, #0]
 800eca6:	b016      	add	sp, #88	@ 0x58
 800eca8:	bd70      	pop	{r4, r5, r6, pc}
 800ecaa:	466a      	mov	r2, sp
 800ecac:	f000 f848 	bl	800ed40 <_fstat_r>
 800ecb0:	2800      	cmp	r0, #0
 800ecb2:	dbec      	blt.n	800ec8e <__swhatbuf_r+0x12>
 800ecb4:	9901      	ldr	r1, [sp, #4]
 800ecb6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ecba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ecbe:	4259      	negs	r1, r3
 800ecc0:	4159      	adcs	r1, r3
 800ecc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ecc6:	e7eb      	b.n	800eca0 <__swhatbuf_r+0x24>

0800ecc8 <__smakebuf_r>:
 800ecc8:	898b      	ldrh	r3, [r1, #12]
 800ecca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eccc:	079d      	lsls	r5, r3, #30
 800ecce:	4606      	mov	r6, r0
 800ecd0:	460c      	mov	r4, r1
 800ecd2:	d507      	bpl.n	800ece4 <__smakebuf_r+0x1c>
 800ecd4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ecd8:	6023      	str	r3, [r4, #0]
 800ecda:	6123      	str	r3, [r4, #16]
 800ecdc:	2301      	movs	r3, #1
 800ecde:	6163      	str	r3, [r4, #20]
 800ece0:	b003      	add	sp, #12
 800ece2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ece4:	ab01      	add	r3, sp, #4
 800ece6:	466a      	mov	r2, sp
 800ece8:	f7ff ffc8 	bl	800ec7c <__swhatbuf_r>
 800ecec:	9f00      	ldr	r7, [sp, #0]
 800ecee:	4605      	mov	r5, r0
 800ecf0:	4639      	mov	r1, r7
 800ecf2:	4630      	mov	r0, r6
 800ecf4:	f7fd fbc4 	bl	800c480 <_malloc_r>
 800ecf8:	b948      	cbnz	r0, 800ed0e <__smakebuf_r+0x46>
 800ecfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecfe:	059a      	lsls	r2, r3, #22
 800ed00:	d4ee      	bmi.n	800ece0 <__smakebuf_r+0x18>
 800ed02:	f023 0303 	bic.w	r3, r3, #3
 800ed06:	f043 0302 	orr.w	r3, r3, #2
 800ed0a:	81a3      	strh	r3, [r4, #12]
 800ed0c:	e7e2      	b.n	800ecd4 <__smakebuf_r+0xc>
 800ed0e:	89a3      	ldrh	r3, [r4, #12]
 800ed10:	6020      	str	r0, [r4, #0]
 800ed12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ed16:	81a3      	strh	r3, [r4, #12]
 800ed18:	9b01      	ldr	r3, [sp, #4]
 800ed1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ed1e:	b15b      	cbz	r3, 800ed38 <__smakebuf_r+0x70>
 800ed20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed24:	4630      	mov	r0, r6
 800ed26:	f000 f81d 	bl	800ed64 <_isatty_r>
 800ed2a:	b128      	cbz	r0, 800ed38 <__smakebuf_r+0x70>
 800ed2c:	89a3      	ldrh	r3, [r4, #12]
 800ed2e:	f023 0303 	bic.w	r3, r3, #3
 800ed32:	f043 0301 	orr.w	r3, r3, #1
 800ed36:	81a3      	strh	r3, [r4, #12]
 800ed38:	89a3      	ldrh	r3, [r4, #12]
 800ed3a:	431d      	orrs	r5, r3
 800ed3c:	81a5      	strh	r5, [r4, #12]
 800ed3e:	e7cf      	b.n	800ece0 <__smakebuf_r+0x18>

0800ed40 <_fstat_r>:
 800ed40:	b538      	push	{r3, r4, r5, lr}
 800ed42:	4d07      	ldr	r5, [pc, #28]	@ (800ed60 <_fstat_r+0x20>)
 800ed44:	2300      	movs	r3, #0
 800ed46:	4604      	mov	r4, r0
 800ed48:	4608      	mov	r0, r1
 800ed4a:	4611      	mov	r1, r2
 800ed4c:	602b      	str	r3, [r5, #0]
 800ed4e:	f7f4 f9e7 	bl	8003120 <_fstat>
 800ed52:	1c43      	adds	r3, r0, #1
 800ed54:	d102      	bne.n	800ed5c <_fstat_r+0x1c>
 800ed56:	682b      	ldr	r3, [r5, #0]
 800ed58:	b103      	cbz	r3, 800ed5c <_fstat_r+0x1c>
 800ed5a:	6023      	str	r3, [r4, #0]
 800ed5c:	bd38      	pop	{r3, r4, r5, pc}
 800ed5e:	bf00      	nop
 800ed60:	20004b4c 	.word	0x20004b4c

0800ed64 <_isatty_r>:
 800ed64:	b538      	push	{r3, r4, r5, lr}
 800ed66:	4d06      	ldr	r5, [pc, #24]	@ (800ed80 <_isatty_r+0x1c>)
 800ed68:	2300      	movs	r3, #0
 800ed6a:	4604      	mov	r4, r0
 800ed6c:	4608      	mov	r0, r1
 800ed6e:	602b      	str	r3, [r5, #0]
 800ed70:	f7f4 f9e6 	bl	8003140 <_isatty>
 800ed74:	1c43      	adds	r3, r0, #1
 800ed76:	d102      	bne.n	800ed7e <_isatty_r+0x1a>
 800ed78:	682b      	ldr	r3, [r5, #0]
 800ed7a:	b103      	cbz	r3, 800ed7e <_isatty_r+0x1a>
 800ed7c:	6023      	str	r3, [r4, #0]
 800ed7e:	bd38      	pop	{r3, r4, r5, pc}
 800ed80:	20004b4c 	.word	0x20004b4c

0800ed84 <_init>:
 800ed84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed86:	bf00      	nop
 800ed88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed8a:	bc08      	pop	{r3}
 800ed8c:	469e      	mov	lr, r3
 800ed8e:	4770      	bx	lr

0800ed90 <_fini>:
 800ed90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed92:	bf00      	nop
 800ed94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed96:	bc08      	pop	{r3}
 800ed98:	469e      	mov	lr, r3
 800ed9a:	4770      	bx	lr
